package com.quicktvui.sdk.compiler.processor;import static com.quicktvui.sdk.annotations.Constants.AUTO_INIT_CLASS_SUFFIX;import static com.quicktvui.sdk.annotations.Constants.AUTO_REGISTER_CLASS_PKG;import com.squareup.javapoet.ClassName;import com.squareup.javapoet.JavaFile;import com.squareup.javapoet.MethodSpec;import com.squareup.javapoet.ParameterSpec;import com.squareup.javapoet.TypeSpec;import com.quicktvui.sdk.annotations.ESKitAutoInit;import com.quicktvui.sdk.compiler.AnnotationProcessor;import com.quicktvui.sdk.compiler.utils.Utils;import java.lang.annotation.Annotation;import java.util.Set;import javax.annotation.processing.RoundEnvironment;import javax.lang.model.element.Element;import javax.lang.model.element.Modifier;/** * <br> * * <br> */public class ESKitAutoInitProcessor extends AbstractProcessor {    private ClassName mKeepClassName;    public ESKitAutoInitProcessor(AnnotationProcessor processor) {        super(processor);    }    @Override    public void process(RoundEnvironment roundEnv, AnnotationProcessor processor) {        Class<? extends Annotation> findAnnotationClass = ESKitAutoInit.class;        Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(findAnnotationClass);        if (elements == null || elements.size() == 0) return;        if (mKeepClassName == null) {            mKeepClassName = getKeepClassName();        }        for (Element element : elements) {            ESKitAutoInit annotation = (ESKitAutoInit) element.getAnnotation(findAnnotationClass);            int priority = annotation.priority();            if(priority > 9) {                logE("@ESKitAutoInit priority最大支持9 " + element);            }            priority = 9 - priority;            String className = "A" + priority + "_" + element.getSimpleName() + AUTO_INIT_CLASS_SUFFIX;            TypeSpec.Builder classBuilder = TypeSpec.classBuilder(className).addModifiers(Modifier.FINAL)                    .addAnnotation(mKeepClassName);            addInitMethod(classBuilder, element);            try {                JavaFile.builder(AUTO_REGISTER_CLASS_PKG, classBuilder.build()).build().writeTo(getFiler());            } catch (Exception e) {                logE(Utils.getStackTraceString(e));            }        }    }    private void addInitMethod(TypeSpec.Builder classBuilder, Element element) {        MethodSpec.Builder builder = MethodSpec.methodBuilder("init")                .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)                .addParameter(                        ParameterSpec.builder(                                        ClassName.get("android.content", "Context"), "context")                                .build()                )                .addParameter(                        ParameterSpec.builder(                                        ClassName.get("android.os", "Bundle"), "params")                                .build()                )                .addStatement("$L.logIF($S)", "com.sunrain.toolkit.utils.log.L", element.getSimpleName() + " init")                .addStatement("new $L().init(context, params)", element);        classBuilder.addMethod(builder.build());    }}