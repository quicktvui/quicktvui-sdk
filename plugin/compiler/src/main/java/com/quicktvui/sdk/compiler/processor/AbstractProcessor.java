package com.quicktvui.sdk.compiler.processor;import com.squareup.javapoet.ClassName;import com.sun.tools.javac.code.Symbol;import com.sun.tools.javac.file.PathFileObject;import java.io.File;import java.nio.file.Path;import javax.annotation.processing.Filer;import javax.lang.model.element.Element;import javax.lang.model.util.Elements;import javax.lang.model.util.Types;import javax.tools.Diagnostic;import javax.tools.JavaFileObject;import com.quicktvui.sdk.compiler.AnnotationProcessor;/** * <br> * * <br> */abstract class AbstractProcessor implements IProcessor {    protected AnnotationProcessor mProcessor;    public AbstractProcessor(AnnotationProcessor processor) {        mProcessor = processor;    }    public Filer getFiler() {        return mProcessor.env().getFiler();    }    public Elements getElementUtils() {        return mProcessor.env().getElementUtils();    }    public Types getTypeUtils() {        return mProcessor.env().getTypeUtils();    }    public void logD(String msg) {        mProcessor.env().getMessager().printMessage(Diagnostic.Kind.NOTE, msg);    }    public void logW(String msg) {        mProcessor.env().getMessager().printMessage(Diagnostic.Kind.WARNING, msg);    }    public void logE(String msg) {        mProcessor.env().getMessager().printMessage(Diagnostic.Kind.ERROR, msg);    }    /**     * ~/projects/quicktv-sdk/app/src/main/java/tv/huan/quicktvsdk/sample/test_reg/TestApolloInit.java     * ~/projects/quicktv-sdk/app/build/tmp/kapt3/stubs/debug/tv/huan/quicktvsdk/sample/test_reg/TestKotlinInit.java     *     * @param element     * @return     */    protected String getModulePath(Element element) {        if (element instanceof Symbol.ClassSymbol) {            JavaFileObject sourceFile = ((Symbol.ClassSymbol) element).sourcefile;            if (sourceFile instanceof PathFileObject) {                Path path = ((PathFileObject) sourceFile).getPath();                if (path != null) {                    String pathStr = path.toString();                    String kapt = File.separator + "kapt" + File.separator;                    String kapt3 = File.separator + "kapt3" + File.separator;                    int endIndex;                    if (pathStr.contains(kapt3) || pathStr.contains(kapt)) {                        String build = File.separator + "build" + File.separator;                        endIndex = pathStr.indexOf(build);                    } else {                        String src = File.separator + "src" + File.separator;                        endIndex = pathStr.indexOf(src);                    }                    return pathStr.substring(0, endIndex);                }            }        }        return null;    }    protected ClassName getKeepClassName() {        ClassName[] checkKeepClass = new ClassName[]{                ClassName.get("androidx.annotation", "Keep"),                ClassName.get("android.support.annotation", "Keep"),        };        for (ClassName className : checkKeepClass) {            if (getElementUtils().getTypeElement(className.canonicalName()) != null) {                return className;            }        }        return null;    }    protected String getSafeModuleName(Element element) {        return getSafeModuleName(getModulePath(element));    }    protected String getSafeModuleName(String moduleName) {        return moduleName.substring(moduleName.lastIndexOf(File.separator) + 1).replaceAll("\\.", "_")                .replaceAll("-", "_");    }}