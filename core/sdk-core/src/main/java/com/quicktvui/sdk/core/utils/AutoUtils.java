package com.quicktvui.sdk.core.utils;import static com.quicktvui.sdk.annotations.Constants.AUTO_INIT_CLASS_SUFFIX;import static com.quicktvui.sdk.annotations.Constants.AUTO_REGISTER_CLASS_METHOD;import static com.quicktvui.sdk.annotations.Constants.AUTO_REGISTER_CLASS_SUFFIX;import android.app.Application;import android.content.Context;import android.os.Bundle;import com.sunrain.toolkit.utils.log.L;import com.quicktvui.sdk.core.InitConfig;import java.lang.reflect.InvocationTargetException;import java.util.ArrayList;import java.util.Collections;import java.util.Enumeration;import java.util.List;import dalvik.system.DexFile;/** * <br> * * <br> */public final class AutoUtils {    private static final List<String> registerList = new ArrayList<>();    private static final List<String> initList = new ArrayList<>();    public static void init(Context context) {        final long startTime = System.currentTimeMillis();        try {            DexFile dexFile = new DexFile(context.getPackageCodePath());            Enumeration<String> entries = dexFile.entries();            while (entries.hasMoreElements()) {                String className = entries.nextElement();                if (className.endsWith(AUTO_REGISTER_CLASS_SUFFIX)) {                    registerList.add(className);                } else if (className.endsWith(AUTO_INIT_CLASS_SUFFIX)) {                    initList.add(className);                }            }        } catch (Exception e) {            L.logEF("AutoUtils", e);        } finally {            L.logIF("AutoUtils cost:" + (System.currentTimeMillis() - startTime));        }    }    public static void autoRegister() {        for (String className : registerList) {            processRegister(className);        }    }    public static void autoInit(Application context, InitConfig config) {        Collections.sort(initList);        for (String className : initList) {            processInit(className, context, config);        }    }    private static void processRegister(String className) {        try {            Class<?> regClass = Class.forName(className);            regClass.getDeclaredMethod(AUTO_REGISTER_CLASS_METHOD).invoke(null);        } catch (ClassNotFoundException e) {            L.logEF("请在项目中使用:\nannotationProcessor/kapt 'com.extscreen.sdk:compiler:xxx'", e);        } catch (NoSuchMethodException e) {            L.logEF("找不到注册方法", e);        } catch (Exception e) {            L.logEF("注册失败", e);        }    }    private static void processInit(String className, Application context, InitConfig config) {        try {            Class<?> initClass = Class.forName(className);            Bundle bundle = new Bundle();            bundle.putBoolean("debug", config.getDebug());            bundle.putString("channel", config.getChannel());            bundle.putInt("flags", config.getFlags());            bundle.putString("bcCode", config.getBcCode());            initClass.getDeclaredMethod("init", Context.class, Bundle.class).invoke(null, context, bundle);        } catch (ClassNotFoundException e) {            L.logEF("请在项目中使用:\nannotationProcessor/kapt 'com.extscreen.sdk:compiler:xxx'", e);        } catch (NoSuchMethodException e) {            L.logEF("找不到初始化方法", e);        } catch (IllegalAccessException e) {            L.logEF("执行初始化失败", e);        } catch (InvocationTargetException e) {            L.logEF("调用初始化方法异常", e);        }catch (Exception e) {            L.logEF("初始化未知异常", e);        }    }}