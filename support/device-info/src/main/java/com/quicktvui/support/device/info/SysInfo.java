package com.quicktvui.support.device.info;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.UiModeManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ConfigurationInfo;
import android.content.pm.FeatureInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.hardware.SensorEvent;
import android.net.Uri;
import android.os.BatteryManager;
import android.os.Build;
import android.support.v4.media.session.PlaybackStateCompat;
import android.telephony.TelephonyManager;
import android.util.Log;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SysInfo {
    static final int ARM_IMPL_ARM = 65;
    static final int ARM_IMPL_DEC = 68;
    static final int ARM_IMPL_FS = 77;
    static final int ARM_IMPL_INTC = 105;
    static final int ARM_IMPL_MARV = 86;
    static final int ARM_IMPL_NVDA = 78;
    static final int ARM_IMPL_QCOM = 81;
    static final int ARM_PART_A15 = 3087;
    static final int ARM_PART_A5 = 3077;
    static final int ARM_PART_A53 = 3331;
    static final int ARM_PART_A57 = 3335;
    static final int ARM_PART_A7 = 3079;
    static final int ARM_PART_A72 = 3336;
    static final int ARM_PART_A9 = 3081;
    private static final int BATTCHGCNTMETHOD_CHARGE_COUNTER = 2;
    private static final int BATTCHGCNTMETHOD_NONE = 1;
    private static final int BATTCHGCNTMETHOD_UNDETECTED = 0;
    private static final int BATTCHGRATEMETHOD_BATT_CURRENT_NOW_MUL_M1 = 2;
    private static final int BATTCHGRATEMETHOD_CURRENT_NOW = 4;
    private static final int BATTCHGRATEMETHOD_CURRENT_NOW_MUL_1000 = 6;
    private static final int BATTCHGRATEMETHOD_CURRENT_NOW_MUL_M1 = 5;
    private static final int BATTCHGRATEMETHOD_NONE = 1;
    private static final int BATTCHGRATEMETHOD_UNDETECTED = 0;
    public static final int CL_DEVICE_TYPE_ACCELERATOR = 8;
    public static final int CL_DEVICE_TYPE_CPU = 2;
    public static final int CL_DEVICE_TYPE_CUSTOM = 16;
    public static final int CL_DEVICE_TYPE_DEFAULT = 1;
    public static final int CL_DEVICE_TYPE_GPU = 4;
    static final String CORE_A12 = "Cortex-A12";
    static final String CORE_A15 = "Cortex-A15";
    static final String CORE_A17 = "Cortex-A17";
    static final String CORE_A5 = "Cortex-A5";
    static final String CORE_A53 = "Cortex-A53";
    static final String CORE_A57 = "Cortex-A57";
    static final String CORE_A7 = "Cortex-A7";
    static final String CORE_A72 = "Cortex-A72";
    static final String CORE_A8 = "Cortex-A8";
    static final String CORE_A9 = "Cortex-A9";
    static final String CORE_AIRMONT = "Airmont";
    static final String CORE_ARM1026 = "ARM1026";
    static final String CORE_ARM11 = "ARM11";
    static final String CORE_ARM1136 = "ARM1136";
    static final String CORE_ARM1156 = "ARM1156";
    static final String CORE_ARM1176 = "ARM1176";
    static final String CORE_ARM920 = "ARM920";
    static final String CORE_ARM922 = "ARM922";
    static final String CORE_ARM926 = "ARM926";
    static final String CORE_ARM940 = "ARM940";
    static final String CORE_ARM946 = "ARM946";
    static final String CORE_ARM966 = "ARM966";
    static final String CORE_ARM968 = "ARM968";
    static final String CORE_BONNELL = "Bonnell";
    static final String CORE_DENVER = "Denver";
    static final String CORE_EXCAVATOR = "Excavator";
    static final String CORE_GOLDMONT = "Goldmont";
    static final String CORE_HUSKY = "Husky";
    static final String CORE_K21 = "K21";
    static final String CORE_KRAIT = "Krait";
    static final String CORE_KRAIT_300 = "Krait 300";
    static final String CORE_KRAIT_400 = "Krait 400";
    static final String CORE_KRAIT_450 = "Krait 450";
    static final String CORE_M0 = "Cortex-M0";
    static final String CORE_M0_PLUS = "Cortex-M0+";
    static final String CORE_M1 = "Cortex-M1";
    static final String CORE_M3 = "Cortex-M3";
    static final String CORE_M4 = "Cortex-M4";
    static final String CORE_PILEDRIVER = "Piledriver";
    static final String CORE_R4 = "Cortex-R4";
    static final String CORE_R5 = "Cortex-R5";
    static final String CORE_SALTWELL = "Saltwell";
    static final String CORE_SCORPION = "Scorpion";
    static final String CORE_SLM = "Silvermont";
    static final String CORE_STEAMROLLER = "Steamroller";
    private static final String CPUEMU_EXYNOS_5260 = "Processor : ARMv7 Processor rev 3 (v7l)\nprocessor\t: 0\nBogoMIPS\t: 48.00\n\nprocessor\t: 1\nBogoMIPS\t: 48.00\n\nprocessor\t: 2\nBogoMIPS\t: 48.00\n\nprocessor\t: 3\nBogoMIPS\t: 48.00\n\nprocessor\t: 4\nBogoMIPS\t: 48.00\n\nprocessor\t: 5\nBogoMIPS\t: 48.00\n\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xc07\nCPU revision\t: 3\n\nHardware\t: UNIVERSAL5260\nRevision\t: 000a\nSerial\t: 7394614132041ea2\n";
    private static final String CPUEMU_EXYNOS_5410 = "Processor\t: ARMv7 Processor rev 3 (v7l)\nprocessor\t: 0\nBogoMIPS\t: 1590.88\n\nprocessor\t: 1\nBogoMIPS\t: 1590.88\n\nprocessor\t: 2\nBogoMIPS\t: 1590.88\n\nprocessor\t: 3\nBogoMIPS\t: 1590.88\n\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x2\nCPU part\t: 0xc0f\nCPU revision\t: 3\n\nHardware\t: UNIVERSAL5410\nRevision\t: 000a\nSerial\t: a17a30814d00f714\n";
    private static final String CPUEMU_EXYNOS_5420 = "Processor\t: ARMv7 Processor rev 3 (v7l)\nprocessor\t: 0\nBogoMIPS\t: 1590.88\n\nprocessor\t: 1\nBogoMIPS\t: 1590.88\n\nprocessor\t: 2\nBogoMIPS\t: 1590.88\n\nprocessor\t: 3\nBogoMIPS\t: 1590.88\n\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x2\nCPU part\t: 0xc0f\nCPU revision\t: 3\n\nHardware\t: Samsung EXYNOS5420\nRevision\t: 000b\nSerial\t: 4f3c51df4d00c786\n";
    private static final String CPUEMU_EXYNOS_5433 = "processor\t: 0\nmodel name\t: ARMv7 Processor rev 1 (v7l)\nBogoMIPS\t: 52.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 1\n\nprocessor\t: 1\nmodel name\t: ARMv7 Processor rev 1 (v7l)\nBogoMIPS\t: 52.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 1\n\nprocessor\t: 2\nmodel name\t: ARMv7 Processor rev 1 (v7l)\nBogoMIPS\t: 52.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 1\n\nprocessor\t: 3\nmodel name\t: ARMv7 Processor rev 1 (v7l)\nBogoMIPS\t: 52.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 1\n\nprocessor\t: 4\nmodel name\t: ARMv7 Processor rev 0 (v7l)\nBogoMIPS\t: 64.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x1\nCPU part\t: 0xd07\nCPU revision\t: 0\n\nprocessor\t: 5\nmodel name\t: ARMv7 Processor rev 0 (v7l)\nBogoMIPS\t: 64.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x1\nCPU part\t: 0xd07\nCPU revision\t: 0\n\nprocessor\t: 6\nmodel name\t: ARMv7 Processor rev 0 (v7l)\nBogoMIPS\t: 64.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x1\nCPU part\t: 0xd07\nCPU revision\t: 0\n\nprocessor\t: 7\nmodel name\t: ARMv7 Processor rev 0 (v7l)\nBogoMIPS\t: 64.00\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x1\nCPU part\t: 0xd07\nCPU revision\t: 0\n\nHardware\t: Samsung EXYNOS5433\nRevision\t: 0015\nSerial\t\t: b5b167ca12380041\n";
    private static final String CPUEMU_EXYNOS_7420 = "Processor\t: AArch64 Processor rev 0 (aarch64)\nprocessor\t: 0\nprocessor\t: 1\nprocessor\t: 2\nprocessor\t: 3\nprocessor\t: 4\nprocessor\t: 5\nprocessor\t: 6\nprocessor\t: 7\nFeatures\t: fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 8\nCPU variant\t: 0x1\nCPU part\t: 0xd07\nCPU revision\t: 0\n\nHardware\t: SAMSUNG Exynos7420\n";
    private static final String CPUEMU_KIRIN_925 = "Processor : ARMv7 Processor rev 3 (v7l)\nprocessor\t: 0\nBogoMIPS\t: 41.44\n\nprocessor\t: 1\nBogoMIPS\t: 41.44\n\nprocessor\t: 2\nBogoMIPS\t: 41.44\n\nprocessor\t: 3\nBogoMIPS\t: 41.44\n\nprocessor\t: 4\nBogoMIPS\t: 38.40\n\nprocessor\t: 5\nBogoMIPS\t: 38.40\n\nprocessor\t: 6\nBogoMIPS\t: 38.40\n\nprocessor\t: 7\nBogoMIPS\t: 38.40\n\nFeatures\t: swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0 & 0x3\nCPU part\t: 0xc07 & 0xc0f\nCPU revision\t: 5 & 3\n\nHardware\t: Kirin925\nRevision\t: 0000\nSerial\t: 0000000000000000\n";
    private static final String CPUEMU_KIRIN_935 = "Processor\t: AArch64 Processor rev 3 (aarch64)\nprocessor\t: 0\nprocessor\t: 1\nprocessor\t: 2\nprocessor\t: 3\nprocessor\t: 4\nprocessor\t: 5\nprocessor\t: 6\nprocessor\t: 7\nFeatures\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 8\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 3\n\nHardware\t: Hisilicon Kirin 935\n";
    private static final String CPUEMU_SNAP_808_MSM8992 = "Processor\t: AArch64 Processor rev 3 (aarch64)\nprocessor\t: 0\nprocessor\t: 1\nprocessor\t: 2\nprocessor\t: 3\nprocessor\t: 4\nprocessor\t: 5\nFeatures\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 8\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 3\n\nHardware\t: Qualcomm Technologies, Inc MSM8992\nRevision\t: 000b\n";
    private static final String CPUEMU_SNAP_810_MSM8994 = "Processor\t: AArch64 Processor rev 2 (aarch64)\nprocessor\t: 0\nprocessor\t: 1\nprocessor\t: 2\nprocessor\t: 3\nprocessor\t: 4\nprocessor\t: 5\nprocessor\t: 6\nprocessor\t: 7\nFeatures\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt \nCPU implementer\t: 0x41\nCPU architecture: 8\nCPU variant\t: 0x0\nCPU part\t: 0xd03\nCPU revision\t: 2\n\nHardware\t: Qualcomm Technologies, Inc MSM8994\nRevision\t: 0008\n";
    public static final int CPU_INSTRSET_32BIT_ARMV6 = 1;
    public static final int CPU_INSTRSET_32BIT_ARMV7 = 2;
    public static final int CPU_INSTRSET_32BIT_X86 = 3;
    public static final int CPU_INSTRSET_64BIT_ARM = 4;
    public static final int CPU_INSTRSET_64BIT_ARMV8_A = 5;
    public static final int CPU_INSTRSET_64BIT_X86 = 6;
    public static final int CPU_INSTRSET_MIPS = 7;
    public static final int CPU_INSTRSET_MIPS64 = 8;
    public static final int CPU_INSTRSET_UNKNOWN = 0;
    private static final int DEVMANUF_ACER = 5;
    private static final int DEVMANUF_ACTIONS = 196;
    private static final int DEVMANUF_AINOL = 174;
    private static final int DEVMANUF_ALCATEL = 62;
    private static final int DEVMANUF_ALLVIEW = 6;
    private static final int DEVMANUF_ALLWINNER = 90;
    private static final int DEVMANUF_AMAZON = 68;
    private static final int DEVMANUF_AMPE = 108;
    private static final int DEVMANUF_ANDROID_EMU = 1;
    private static final int DEVMANUF_ANYCOOL = 105;
    private static final int DEVMANUF_ARCHOS = 130;
    private static final int DEVMANUF_ASSISTANT = 122;
    private static final int DEVMANUF_ASUS = 7;
    private static final int DEVMANUF_ATONGM = 190;
    private static final int DEVMANUF_AXGIO = 163;
    private static final int DEVMANUF_BEELINE = 193;
    private static final int DEVMANUF_BL = 110;
    private static final int DEVMANUF_BLACKBERRY = 8;
    private static final int DEVMANUF_BLACKVIEW = 9;
    private static final int DEVMANUF_BLAUPUNKT = 172;
    private static final int DEVMANUF_BLU = 10;
    private static final int DEVMANUF_BLUEGO = 182;
    private static final int DEVMANUF_BN = 173;
    private static final int DEVMANUF_BQ = 102;
    private static final int DEVMANUF_CASIO = 183;
    private static final int DEVMANUF_CAT = 60;
    private static final int DEVMANUF_CELKON = 179;
    private static final int DEVMANUF_CHERRY = 11;
    private static final int DEVMANUF_CHUWI = 153;
    private static final int DEVMANUF_CKK = 127;
    private static final int DEVMANUF_CLOUDFONE = 12;
    private static final int DEVMANUF_COLORFLY = 103;
    private static final int DEVMANUF_CONCORDE = 61;
    private static final int DEVMANUF_COOLPAD = 81;
    private static final int DEVMANUF_CUBE = 107;
    private static final int DEVMANUF_CUBIEBOARD = 189;
    private static final int DEVMANUF_CUBOT = 13;
    private static final int DEVMANUF_DELL = 72;
    private static final int DEVMANUF_DEXP = 76;
    private static final int DEVMANUF_DIGMA = 150;
    private static final int DEVMANUF_DNS = 145;
    private static final int DEVMANUF_DOOGEE = 14;
    private static final int DEVMANUF_DPS = 139;
    private static final int DEVMANUF_DTC = 63;
    private static final int DEVMANUF_EACHINE = 98;
    private static final int DEVMANUF_ECOO = 112;
    private static final int DEVMANUF_ECS = 176;
    private static final int DEVMANUF_ELEPHONE = 83;
    private static final int DEVMANUF_ENERGY_SISTEM = 95;
    private static final int DEVMANUF_ESCORT = 167;
    private static final int DEVMANUF_EXPLAY = 100;
    private static final int DEVMANUF_FAEA = 93;
    private static final int DEVMANUF_FLY = 15;
    private static final int DEVMANUF_FREELANDER = 82;
    private static final int DEVMANUF_G = 185;
    private static final int DEVMANUF_GIGABYTE = 16;
    private static final int DEVMANUF_GIGASET = 117;
    private static final int DEVMANUF_GIONEE = 17;
    private static final int DEVMANUF_GOCLEVER = 177;
    private static final int DEVMANUF_GPLUS = 158;
    private static final int DEVMANUF_HAIER = 155;
    private static final int DEVMANUF_HAIPAI = 73;
    private static final int DEVMANUF_HARDKERNEL = 18;
    private static final int DEVMANUF_HIGHSCREEN = 160;
    private static final int DEVMANUF_HIMAX = 169;
    private static final int DEVMANUF_HISENSE = 19;
    private static final int DEVMANUF_HP = 175;
    private static final int DEVMANUF_HTC = 20;
    private static final int DEVMANUF_HTM = 101;
    private static final int DEVMANUF_HUAWEI = 21;
    private static final int DEVMANUF_IJOY = 109;
    private static final int DEVMANUF_IMOBILE = 166;
    private static final int DEVMANUF_IMPRESSION = 104;
    private static final int DEVMANUF_INEW = 99;
    private static final int DEVMANUF_INFOCUS = 22;
    private static final int DEVMANUF_INHON = 69;
    private static final int DEVMANUF_INNOS = 126;
    private static final int DEVMANUF_IOCEAN = 23;
    private static final int DEVMANUF_IONIK = 154;
    private static final int DEVMANUF_IRBIS = 164;
    private static final int DEVMANUF_IRU = 147;
    private static final int DEVMANUF_IRULU = 187;
    private static final int DEVMANUF_JIAYU = 24;
    private static final int DEVMANUF_JOLLA = 188;
    private static final int DEVMANUF_JUST5 = 134;
    private static final int DEVMANUF_KARBONN = 25;
    private static final int DEVMANUF_KATA = 27;
    private static final int DEVMANUF_KAZAM = 26;
    private static final int DEVMANUF_KENEKSI = 2;
    private static final int DEVMANUF_KIANO = 70;
    private static final int DEVMANUF_KINGELON = 135;
    private static final int DEVMANUF_KINGSING = 96;
    private static final int DEVMANUF_KINGTOP = 148;
    private static final int DEVMANUF_KINGZONE = 97;
    private static final int DEVMANUF_KNC = 161;
    private static final int DEVMANUF_KOMU = 3;
    private static final int DEVMANUF_KYOCERA = 78;
    private static final int DEVMANUF_LANDVO = 151;
    private static final int DEVMANUF_LANIX = 131;
    private static final int DEVMANUF_LARK = 181;
    private static final int DEVMANUF_LAVA = 140;
    private static final int DEVMANUF_LEADER = 115;
    private static final int DEVMANUF_LEAGOO = 28;
    private static final int DEVMANUF_LENOVO = 29;
    private static final int DEVMANUF_LETV = 191;
    private static final int DEVMANUF_LG = 30;
    private static final int DEVMANUF_MEDIACOM = 119;
    private static final int DEVMANUF_MEDION = 111;
    private static final int DEVMANUF_MEIZU = 31;
    private static final int DEVMANUF_MELE = 64;
    private static final int DEVMANUF_MICROMAX = 91;
    private static final int DEVMANUF_MIJUE = 137;
    private static final int DEVMANUF_MINIX = 32;
    private static final int DEVMANUF_MLAIS = 123;
    private static final int DEVMANUF_MOTOROLA = 33;
    private static final int DEVMANUF_MPIE = 128;
    private static final int DEVMANUF_MSI = 92;
    private static final int DEVMANUF_MTC = 80;
    private static final int DEVMANUF_MYPHONE = 34;
    private static final int DEVMANUF_MYWIGO = 35;
    private static final int DEVMANUF_NAVCITY = 138;
    private static final int DEVMANUF_NAVON = 152;
    private static final int DEVMANUF_NO1 = 36;
    private static final int DEVMANUF_NOKIA = 37;
    private static final int DEVMANUF_NVIDIA = 38;
    private static final int DEVMANUF_NYX = 195;
    private static final int DEVMANUF_ODYS = 156;
    private static final int DEVMANUF_ONDA = 66;
    private static final int DEVMANUF_ONEPLUS = 40;
    private static final int DEVMANUF_OP3NDOTT = 88;
    private static final int DEVMANUF_OPLUS = 39;
    private static final int DEVMANUF_OPPO = 41;
    private static final int DEVMANUF_ORANGE = 114;
    private static final int DEVMANUF_OUKITEL = 178;
    private static final int DEVMANUF_OVERMAX = 120;
    private static final int DEVMANUF_PANTECH = 42;
    private static final int DEVMANUF_PHICOMM = 171;
    private static final int DEVMANUF_PHILIPS = 43;
    private static final int DEVMANUF_PIPO = 65;
    private static final int DEVMANUF_POCKETBOOK = 168;
    private static final int DEVMANUF_POMP = 186;
    private static final int DEVMANUF_POV = 85;
    private static final int DEVMANUF_PRESTIGIO = 44;
    private static final int DEVMANUF_QBEX = 146;
    private static final int DEVMANUF_QMOBILE = 184;
    private static final int DEVMANUF_RCA = 4;
    private static final int DEVMANUF_REKAM = 144;
    private static final int DEVMANUF_RIKOMAGIC = 197;
    private static final int DEVMANUF_SAMSUNG = 45;
    private static final int DEVMANUF_SE = 48;
    private static final int DEVMANUF_SHARP = 87;
    private static final int DEVMANUF_SIM_AREN = 194;
    private static final int DEVMANUF_SKK = 46;
    private static final int DEVMANUF_SONY = 47;
    private static final int DEVMANUF_STARWAY = 116;
    private static final int DEVMANUF_STOREX = 129;
    private static final int DEVMANUF_SUPRA = 165;
    private static final int DEVMANUF_TABLET_EXPRESS = 106;
    private static final int DEVMANUF_TCL = 157;
    private static final int DEVMANUF_TECLAST = 49;
    private static final int DEVMANUF_TEXET = 74;
    private static final int DEVMANUF_THL = 50;
    private static final int DEVMANUF_TORQUE = 51;
    private static final int DEVMANUF_TOSHIBA = 121;
    private static final int DEVMANUF_TREKSTOR = 170;
    private static final int DEVMANUF_TRONFY = 180;
    private static final int DEVMANUF_TTEM = 198;
    private static final int DEVMANUF_UHAPPY = 141;
    private static final int DEVMANUF_ULEFONE = 125;
    private static final int DEVMANUF_UMI = 52;
    private static final int DEVMANUF_UNKNOWN = 0;
    private static final int DEVMANUF_UTOK = 94;
    private static final int DEVMANUF_VEGA = 159;
    private static final int DEVMANUF_VERYKOOL = 118;
    private static final int DEVMANUF_VESTEL = 77;
    private static final int DEVMANUF_VIDEOCON = 133;
    private static final int DEVMANUF_VIEWSONIC = 136;
    private static final int DEVMANUF_VIVAX = 67;
    private static final int DEVMANUF_VIVO = 113;
    private static final int DEVMANUF_VKWORLD = 142;
    private static final int DEVMANUF_VODAFONE = 89;
    private static final int DEVMANUF_VPHONE = 53;
    private static final int DEVMANUF_WAYTEQ = 54;
    private static final int DEVMANUF_WEXLER = 75;
    private static final int DEVMANUF_WIKO = 71;
    private static final int DEVMANUF_XIAOMI = 55;
    private static final int DEVMANUF_XOLO = 79;
    private static final int DEVMANUF_YARVIK = 56;
    private static final int DEVMANUF_YONESTOPTECH = 132;
    private static final int DEVMANUF_YOTA = 57;
    private static final int DEVMANUF_YU = 162;
    private static final int DEVMANUF_YUNTAB = 143;
    private static final int DEVMANUF_ZEEPAD = 124;
    private static final int DEVMANUF_ZIDOO = 86;
    private static final int DEVMANUF_ZIFRO = 84;
    private static final int DEVMANUF_ZONDA = 149;
    private static final int DEVMANUF_ZOPO = 58;
    private static final int DEVMANUF_ZTE = 59;
    private static final int DEVMANUF_ZUK = 192;
    public static final int DEVTYP_CAMERA = 11;
    public static final int DEVTYP_PHABLET = 3;
    public static final int DEVTYP_PHONE = 1;
    public static final int DEVTYP_PHONE_TABLET = 2;
    public static final int DEVTYP_SBC = 12;
    public static final int DEVTYP_TABLET = 4;
    public static final int DEVTYP_TV = 8;
    public static final int DEVTYP_TVBOX = 9;
    public static final int DEVTYP_TVSTICK = 10;
    public static final int DEVTYP_WATCH = 5;
    public static final int DEVTYP_WATCH_ROUND = 7;
    public static final int DEVTYP_WATCH_SQUARE = 6;
    private static final int GPUCLKMETHOD_ADRENO = 2;
    private static final int GPUCLKMETHOD_MALI = 3;
    private static final int GPUCLKMETHOD_NONE = 1;
    private static final int GPUCLKMETHOD_OMAP = 4;
    private static final int GPUCLKMETHOD_POWERVR_ROGUE = 5;
    private static final int GPUCLKMETHOD_TEGRA = 6;
    private static final int GPUCLKMETHOD_TEGRA3_4 = 7;
    private static final int GPUCLKMETHOD_UNDETECTED = 0;
    private static final int GPUCLKMETHOD_VIVANTE = 8;
    private static final int GPUUTIMETHOD_ADRENO = 2;
    private static final int GPUUTIMETHOD_MALI = 3;
    private static final int GPUUTIMETHOD_NONE = 1;
    private static final int GPUUTIMETHOD_TEGRA_K1 = 4;
    private static final int GPUUTIMETHOD_TEGRA_X1 = 5;
    private static final int GPUUTIMETHOD_UNDETECTED = 0;
    public static final int LCDTYP_3DIPS = 21;
    public static final int LCDTYP_3DLCD = 20;
    public static final int LCDTYP_AHIPS = 11;
    public static final int LCDTYP_AMOLED = 23;
    public static final int LCDTYP_ASV = 4;
    public static final int LCDTYP_CPOLED = 27;
    public static final int LCDTYP_CSAMOLED = 28;
    public static final int LCDTYP_EINK = 30;
    public static final int LCDTYP_HDIPS = 12;
    public static final int LCDTYP_IGZO = 5;
    public static final int LCDTYP_IPS = 6;
    public static final int LCDTYP_IPSP = 7;
    public static final int LCDTYP_JDIIPS = 13;
    public static final int LCDTYP_LTPS = 8;
    public static final int LCDTYP_MVA = 31;
    public static final int LCDTYP_OLED = 22;
    public static final int LCDTYP_PLS = 2;
    public static final int LCDTYP_POLED = 26;
    public static final int LCDTYP_SAMOLED = 24;
    public static final int LCDTYP_SAMOLEDP = 25;
    public static final int LCDTYP_SCLCD = 16;
    public static final int LCDTYP_SFAMOLED = 29;
    public static final int LCDTYP_SIPS = 9;
    public static final int LCDTYP_SIPSP = 10;
    public static final int LCDTYP_SLCD = 17;
    public static final int LCDTYP_SLCD2 = 18;
    public static final int LCDTYP_SLCD3 = 19;
    public static final int LCDTYP_SPLS = 3;
    public static final int LCDTYP_TFHDIPSP = 15;
    public static final int LCDTYP_TFT = 1;
    public static final int LCDTYP_THDIPS = 14;
    static final String MANUF_ACT = "Actions";
    static final String MANUF_ALLW = "Allwinner";
    static final String MANUF_AMD = "AMD";
    static final String MANUF_AML = "AMLogic";
    static final String MANUF_ARM = "ARM";
    static final String MANUF_BCOM = "Broadcom";
    static final String MANUF_DEC = "DEC";
    static final String MANUF_FS = "Freescale";
    static final String MANUF_HISI = "HiSilicon";
    static final String MANUF_INTC = "Intel";
    static final String MANUF_LC = "Leadcore";
    static final String MANUF_LG = "LG";
    static final String MANUF_MARV = "Marvell";
    static final String MANUF_MTK = "MediaTek";
    static final String MANUF_NVDA = "nVIDIA";
    static final String MANUF_QCOM = "Qualcomm";
    static final String MANUF_RC = "RockChip";
    static final String MANUF_SAMS = "Samsung";
    static final String MANUF_SPRD = "Spreadtrum";
    static final String MANUF_STE = "ST-Ericsson";
    static final String MANUF_TI = "Texas Instruments";
    public static final int PRESSURE_HPA = 1;
    public static final int PRESSURE_INHG = 2;
    public static final int PRESSURE_MMHG = 3;
    public static final int RAMTYP_DDR3L = 1;
    public static final int RAMTYP_DDR3L_1866 = 2;
    public static final int RAMTYP_DDR3L_RS = 3;
    public static final int RAMTYP_DDR3L_RS_1333 = 4;
    public static final int RAMTYP_LPDDR1 = 5;
    public static final int RAMTYP_LPDDR2 = 6;
    public static final int RAMTYP_LPDDR3 = 7;
    public static final int RAMTYP_LPDDR3_1066 = 8;
    public static final int RAMTYP_LPDDR3_1600 = 9;
    public static final int RAMTYP_LPDDR4 = 10;
    static final int SOC_ACT = 15000;
    static final int SOC_ALLW = 14000;
    static final int SOC_ALLW_A10 = 14001;
    static final int SOC_ALLW_A13 = 14002;
    static final int SOC_ALLW_A20 = 14003;
    static final int SOC_ALLW_A23 = 14004;
    static final int SOC_ALLW_A31 = 14005;
    static final int SOC_ALLW_A31S = 14006;
    static final int SOC_ALLW_A33 = 14007;
    static final int SOC_ALLW_A80 = 14008;
    static final int SOC_ALLW_A80T = 14009;
    static final int SOC_AMD = 1000;
    static final int SOC_AML = 16000;
    static final int SOC_AML8726_M8 = 16001;
    static final int SOC_AML8726_MX = 16002;
    static final int SOC_AMUR = 1001;
    static final int SOC_APOLLO_LAKE = 45;
    static final int SOC_ATM7021 = 15001;
    static final int SOC_ATM7029 = 15002;
    static final int SOC_ATOM_X3_C3130 = 46;
    static final int SOC_ATOM_X3_C3230RK = 47;
    static final int SOC_ATOM_X3_C3440 = 48;
    static final int SOC_ATOM_X5_Z8300 = 33;
    static final int SOC_ATOM_X5_Z8350 = 34;
    static final int SOC_ATOM_X5_Z8500 = 35;
    static final int SOC_ATOM_X5_Z8550 = 36;
    static final int SOC_ATOM_X7_Z8700 = 37;
    static final int SOC_ATOM_X7_Z8750 = 38;
    static final int SOC_ATOM_Z2420 = 1;
    static final int SOC_ATOM_Z2460 = 2;
    static final int SOC_ATOM_Z2480 = 3;
    static final int SOC_ATOM_Z2520 = 6;
    static final int SOC_ATOM_Z2560 = 7;
    static final int SOC_ATOM_Z2580 = 8;
    static final int SOC_ATOM_Z2610 = 4;
    static final int SOC_ATOM_Z2760 = 9;
    static final int SOC_ATOM_Z3460 = 30;
    static final int SOC_ATOM_Z3480 = 31;
    static final int SOC_ATOM_Z3530 = 40;
    static final int SOC_ATOM_Z3560 = 41;
    static final int SOC_ATOM_Z3570 = 42;
    static final int SOC_ATOM_Z3580 = 43;
    static final int SOC_ATOM_Z3680 = 11;
    static final int SOC_ATOM_Z3680D = 12;
    static final int SOC_ATOM_Z3735D = 13;
    static final int SOC_ATOM_Z3735E = 14;
    static final int SOC_ATOM_Z3735F = 15;
    static final int SOC_ATOM_Z3735G = 16;
    static final int SOC_ATOM_Z3736F = 17;
    static final int SOC_ATOM_Z3736G = 18;
    static final int SOC_ATOM_Z3740 = 19;
    static final int SOC_ATOM_Z3740D = 20;
    static final int SOC_ATOM_Z3745 = 21;
    static final int SOC_ATOM_Z3745D = 22;
    static final int SOC_ATOM_Z3770 = 23;
    static final int SOC_ATOM_Z3770D = 24;
    static final int SOC_ATOM_Z3775 = 25;
    static final int SOC_ATOM_Z3775D = 26;
    static final int SOC_ATOM_Z3785 = 27;
    static final int SOC_ATOM_Z3795 = 28;
    static final int SOC_BAYTRAIL = 29;
    static final int SOC_BCM = 3000;
    static final int SOC_BCM21553 = 3001;
    static final int SOC_BCM21654G = 3002;
    static final int SOC_BCM21664 = 3003;
    static final int SOC_BCM21664T = 3004;
    static final int SOC_BCM23550 = 3005;
    static final int SOC_BCM28155 = 3006;
    static final int SOC_CHERRYTRAIL = 39;
    static final int SOC_CLOVERVIEW = 10;
    static final int SOC_EXYNOS_3110 = 6001;
    static final int SOC_EXYNOS_3470 = 6002;
    static final int SOC_EXYNOS_3475 = 6003;
    static final int SOC_EXYNOS_4210 = 6004;
    static final int SOC_EXYNOS_4212 = 6005;
    static final int SOC_EXYNOS_4212_4412 = 6006;
    static final int SOC_EXYNOS_4412 = 6007;
    static final int SOC_EXYNOS_5250 = 6009;
    static final int SOC_EXYNOS_5260 = 6010;
    static final int SOC_EXYNOS_5410 = 6011;
    static final int SOC_EXYNOS_5420 = 6012;
    static final int SOC_EXYNOS_5422 = 6013;
    static final int SOC_EXYNOS_5430 = 6014;
    static final int SOC_EXYNOS_5433 = 6015;
    static final int SOC_EXYNOS_5800 = 6016;
    static final int SOC_EXYNOS_5XXX = 6008;
    static final int SOC_EXYNOS_7410 = 6017;
    static final int SOC_EXYNOS_7420 = 6018;
    static final int SOC_EXYNOS_7580 = 6019;
    static final int SOC_EXYNOS_8890 = 6020;
    static final int SOC_GENERIC_X86 = 51;
    static final int SOC_HISI = 4000;
    static final int SOC_K3V2 = 4001;
    static final int SOC_K3V2E = 4002;
    static final int SOC_KIRIN_620 = 4003;
    static final int SOC_KIRIN_910 = 4004;
    static final int SOC_KIRIN_910T = 4005;
    static final int SOC_KIRIN_920 = 4006;
    static final int SOC_KIRIN_925 = 4007;
    static final int SOC_KIRIN_928 = 4008;
    static final int SOC_KIRIN_930 = 4009;
    static final int SOC_KIRIN_935 = 4010;
    static final int SOC_KIRIN_940 = 4011;
    static final int SOC_KIRIN_950 = 4012;
    static final int SOC_LC = 17000;
    static final int SOC_LC1810 = 17001;
    static final int SOC_LC1811 = 17002;
    static final int SOC_LC1813 = 17003;
    static final int SOC_LC1860 = 17004;
    static final int SOC_LC1860C = 17005;
    static final int SOC_LC1913 = 17006;
    static final int SOC_LC1960 = 17007;
    static final int SOC_LG = 12000;
    static final int SOC_MARV = 7000;
    static final int SOC_MEDFIELD = 5;
    static final int SOC_MERRIFIELD = 32;
    static final int SOC_MOOREFIELD = 44;
    static final int SOC_MT6513 = 8001;
    static final int SOC_MT6515 = 8002;
    static final int SOC_MT6516 = 8003;
    static final int SOC_MT6517 = 8004;
    static final int SOC_MT6517T = 8005;
    static final int SOC_MT6570 = 8006;
    static final int SOC_MT6571 = 8007;
    static final int SOC_MT6572 = 8008;
    static final int SOC_MT6572M = 8009;
    static final int SOC_MT6573 = 8010;
    static final int SOC_MT6575 = 8011;
    static final int SOC_MT6575M = 8012;
    static final int SOC_MT6577 = 8013;
    static final int SOC_MT6577T = 8014;
    static final int SOC_MT6580 = 8015;
    static final int SOC_MT6581 = 8016;
    static final int SOC_MT6582 = 8017;
    static final int SOC_MT6582M = 8018;
    static final int SOC_MT6588 = 8019;
    static final int SOC_MT6589 = 8020;
    static final int SOC_MT6589M = 8021;
    static final int SOC_MT6589T = 8022;
    static final int SOC_MT6591 = 8023;
    static final int SOC_MT6592 = 8024;
    static final int SOC_MT6592M = 8025;
    static final int SOC_MT6592T = 8026;
    static final int SOC_MT6592W = 8027;
    static final int SOC_MT6595 = 8028;
    static final int SOC_MT6595M = 8029;
    static final int SOC_MT6595T = 8030;
    static final int SOC_MT6732 = 8031;
    static final int SOC_MT6732A = 8032;
    static final int SOC_MT6732M = 8033;
    static final int SOC_MT6735 = 8034;
    static final int SOC_MT6735A = 8035;
    static final int SOC_MT6735M = 8036;
    static final int SOC_MT6735P = 8037;
    static final int SOC_MT6752 = 8038;
    static final int SOC_MT6752L = 8039;
    static final int SOC_MT6752M = 8040;
    static final int SOC_MT6753 = 8041;
    static final int SOC_MT6755 = 8042;
    static final int SOC_MT6795 = 8043;
    static final int SOC_MT6795M = 8044;
    static final int SOC_MT6795T = 8045;
    static final int SOC_MT6797 = 8046;
    static final int SOC_MT8117 = 8047;
    static final int SOC_MT8121 = 8048;
    static final int SOC_MT8125 = 8049;
    static final int SOC_MT8127 = 8050;
    static final int SOC_MT8135 = 8051;
    static final int SOC_MT8135V = 8052;
    static final int SOC_MT8161 = 8053;
    static final int SOC_MT8165 = 8054;
    static final int SOC_MT8173 = 8055;
    static final int SOC_MT8312 = 8056;
    static final int SOC_MT8312C = 8057;
    static final int SOC_MT8312D = 8058;
    static final int SOC_MT8317 = 8059;
    static final int SOC_MT8317T = 8060;
    static final int SOC_MT8377 = 8061;
    static final int SOC_MT8377T = 8062;
    static final int SOC_MT8382 = 8063;
    static final int SOC_MT8389 = 8064;
    static final int SOC_MT8389T = 8065;
    static final int SOC_MT8392 = 8066;
    static final int SOC_MT8685 = 8067;
    static final int SOC_MT8732 = 8068;
    static final int SOC_MT8735 = 8069;
    static final int SOC_MT8752 = 8070;
    static final int SOC_MT8783 = 8071;
    static final int SOC_MT8783T = 8072;
    static final int SOC_MTK = 8000;
    static final int SOC_NOVATHOR_U8420 = 11001;
    static final int SOC_NOVATHOR_U8500 = 11002;
    static final int SOC_NUCLUN = 12001;
    static final int SOC_NVDA = 2000;
    static final int SOC_OMAP3410 = 10001;
    static final int SOC_OMAP3430 = 10002;
    static final int SOC_OMAP3610 = 10003;
    static final int SOC_OMAP3620 = 10004;
    static final int SOC_OMAP3630 = 10005;
    static final int SOC_OMAP4430 = 10006;
    static final int SOC_OMAP4460 = 10007;
    static final int SOC_OMAP4470 = 10008;
    static final int SOC_PXA1088 = 7003;
    static final int SOC_PXA1908 = 7004;
    static final int SOC_PXA1920 = 7005;
    static final int SOC_PXA1928 = 7006;
    static final int SOC_PXA1936 = 7007;
    static final int SOC_PXA986 = 7001;
    static final int SOC_PXA988 = 7002;
    static final int SOC_QCOM = 9000;
    static final int SOC_RC = 5000;
    static final int SOC_RK2906 = 5001;
    static final int SOC_RK2918 = 5002;
    static final int SOC_RK2928 = 5003;
    static final int SOC_RK3026 = 5004;
    static final int SOC_RK3028 = 5005;
    static final int SOC_RK3066 = 5006;
    static final int SOC_RK3126 = 5007;
    static final int SOC_RK3128 = 5008;
    static final int SOC_RK3168 = 5009;
    static final int SOC_RK3188 = 5010;
    static final int SOC_RK3188T = 5011;
    static final int SOC_RK3288 = 5012;
    static final int SOC_RK3368 = 5013;
    static final int SOC_SAMS = 6000;
    static final int SOC_SC6820 = 13001;
    static final int SOC_SC6820I = 13002;
    static final int SOC_SC6821 = 13003;
    static final int SOC_SC6825 = 13004;
    static final int SOC_SC7715 = 13005;
    static final int SOC_SC7727S = 13006;
    static final int SOC_SC7730A = 13007;
    static final int SOC_SC7730S = 13008;
    static final int SOC_SC7730SE = 13009;
    static final int SOC_SC7731G = 13010;
    static final int SOC_SC7735S = 13011;
    static final int SOC_SC8810 = 13012;
    static final int SOC_SNAP_200_A7 = 9026;
    static final int SOC_SNAP_200_MSM8210 = 9027;
    static final int SOC_SNAP_200_MSM8212 = 9028;
    static final int SOC_SNAP_200_MSM8225Q = 9029;
    static final int SOC_SNAP_200_MSM8610 = 9030;
    static final int SOC_SNAP_200_MSM8625Q = 9031;
    static final int SOC_SNAP_208 = 9032;
    static final int SOC_SNAP_208_MSM8208 = 9033;
    static final int SOC_SNAP_210_212 = 9034;
    static final int SOC_SNAP_210_MSM8209 = 9035;
    static final int SOC_SNAP_210_MSM8909 = 9036;
    static final int SOC_SNAP_400 = 9037;
    static final int SOC_SNAP_400_APQ8026 = 9038;
    static final int SOC_SNAP_400_MSM8226 = 9039;
    static final int SOC_SNAP_400_MSM8228 = 9040;
    static final int SOC_SNAP_400_MSM8626 = 9041;
    static final int SOC_SNAP_400_MSM8926 = 9042;
    static final int SOC_SNAP_400_MSM8928 = 9043;
    static final int SOC_SNAP_400_MSM8930 = 9044;
    static final int SOC_SNAP_400_MSM8930AB = 9045;
    static final int SOC_SNAP_410_412 = 9046;
    static final int SOC_SNAP_410_MSM8216 = 9047;
    static final int SOC_SNAP_410_MSM8916 = 9048;
    static final int SOC_SNAP_415_425_615_616_617 = 9049;
    static final int SOC_SNAP_415_MSM8929 = 9050;
    static final int SOC_SNAP_430 = 9051;
    static final int SOC_SNAP_430_MSM8937 = 9052;
    static final int SOC_SNAP_600_APQ8064AB = 9053;
    static final int SOC_SNAP_600_APQ8064FLO = 9054;
    static final int SOC_SNAP_600_APQ8064T = 9055;
    static final int SOC_SNAP_610 = 9056;
    static final int SOC_SNAP_610_MSM8936 = 9057;
    static final int SOC_SNAP_615_MSM8939 = 9058;
    static final int SOC_SNAP_617_MSM8952 = 9059;
    static final int SOC_SNAP_618 = 9060;
    static final int SOC_SNAP_618_MSM8956 = 9061;
    static final int SOC_SNAP_620 = 9062;
    static final int SOC_SNAP_620_MSM8976 = 9063;
    static final int SOC_SNAP_800_801 = 9064;
    static final int SOC_SNAP_800_MSM8274 = 9065;
    static final int SOC_SNAP_800_MSM8974 = 9066;
    static final int SOC_SNAP_801 = 9067;
    static final int SOC_SNAP_801_MSM8974AA = 9068;
    static final int SOC_SNAP_801_MSM8974AB = 9069;
    static final int SOC_SNAP_801_MSM8974AC = 9070;
    static final int SOC_SNAP_805 = 9071;
    static final int SOC_SNAP_805_APQ8084 = 9072;
    static final int SOC_SNAP_805_APQ8084AB = 9073;
    static final int SOC_SNAP_808 = 9074;
    static final int SOC_SNAP_808_MSM8992 = 9075;
    static final int SOC_SNAP_810 = 9076;
    static final int SOC_SNAP_810_MSM8994 = 9077;
    static final int SOC_SNAP_820 = 9078;
    static final int SOC_SNAP_820_MSM8996 = 9079;
    static final int SOC_SNAP_DUAL_KRAIT = 9080;
    static final int SOC_SNAP_QUAD_KRAIT = 9081;
    static final int SOC_SNAP_S1 = 9001;
    static final int SOC_SNAP_S1_MSM7225 = 9002;
    static final int SOC_SNAP_S1_MSM7227 = 9003;
    static final int SOC_SNAP_S1_MSM7227A = 9004;
    static final int SOC_SNAP_S1_MSM7625A = 9005;
    static final int SOC_SNAP_S1_MSM7X27 = 9006;
    static final int SOC_SNAP_S1_MSM7X27A = 9007;
    static final int SOC_SNAP_S1_S2 = 9008;
    static final int SOC_SNAP_S2 = 9009;
    static final int SOC_SNAP_S2_MSM8255 = 9010;
    static final int SOC_SNAP_S3 = 9011;
    static final int SOC_SNAP_S4_PLAY_200_MSM8225Q = 9014;
    static final int SOC_SNAP_S4_PLAY_200_MSM8225Q_MSM8625Q = 9015;
    static final int SOC_SNAP_S4_PLAY_MSM8225_MSM8625 = 9013;
    static final int SOC_SNAP_S4_PLAY_MSM8625 = 9012;
    static final int SOC_SNAP_S4_PLUS = 9016;
    static final int SOC_SNAP_S4_PLUS_400 = 9017;
    static final int SOC_SNAP_S4_PLUS_MSM8227 = 9018;
    static final int SOC_SNAP_S4_PLUS_MSM8230 = 9019;
    static final int SOC_SNAP_S4_PLUS_MSM8960 = 9020;
    static final int SOC_SNAP_S4_PRO = 9021;
    static final int SOC_SNAP_S4_PRO_600 = 9022;
    static final int SOC_SNAP_S4_PRO_APQ8064 = 9023;
    static final int SOC_SNAP_S4_PRO_MSM8960DT = 9024;
    static final int SOC_SNAP_S4_PRO_MSM8960T = 9025;
    static final int SOC_SOFIA = 49;
    static final int SOC_SOFIA_LTE = 50;
    static final int SOC_SPRD = 13000;
    static final int SOC_STE = 11000;
    static final int SOC_TEGRA_2 = 2001;
    static final int SOC_TEGRA_2_AP20H = 2002;
    static final int SOC_TEGRA_2_T20 = 2003;
    static final int SOC_TEGRA_3 = 2004;
    static final int SOC_TEGRA_3_T30L = 2005;
    static final int SOC_TEGRA_4 = 2006;
    static final int SOC_TEGRA_4I = 2008;
    static final int SOC_TEGRA_4_T114 = 2007;
    static final int SOC_TEGRA_K1_T124 = 2009;
    static final int SOC_TEGRA_K1_T132 = 2010;
    static final int SOC_TI = 10000;
    static final int SOC_UNKNOWN = 0;
    public static final int TEMP_CELSIUS = 1;
    public static final int TEMP_FAHRENHEIT = 2;
    private static final int TYPE_GLANCE_GESTURE = 24;
    private static final int TYPE_PICK_UP_GESTURE = 25;
    private static final int TYPE_TILT_DETECTOR = 22;
    private static final int TYPE_WAKE_GESTURE = 23;
    private static final String USBDEV_DIR = "/sys/bus/usb/devices";

    public static class BatteryInfo {
        public String chargeCnt_Str = "";
        public int chargeCnt_uAh = Integer.MIN_VALUE;
        public String chargeRate_Str = "";
        public int chargeRate_uA = Integer.MIN_VALUE;
        public String energyCnt_Str = "";
        public int health = -1;
        public String level = "";
        public int powerSource = -1;
        public int status = -1;
        public String tech = "";
        public String temp = "";
        public String volt = "";
    }

    private static native String getABIMessage();

    private static native int getCUDAInfo(int i, CUDAInfoClass cUDAInfoClass);

    private static native int[] getCpuidReg(int i, int i2, int i3, int i4);

    private static native int getOCLInfo(int i, int i2, OpenCLInfoClass openCLInfoClass);

    public static class ScreenInfo {
        public float diagSize = -1.0f;
        public int dpi = -1;
        public int resX = -1;
        public int resY = -1;
        public int sizeX = -1;
        public int sizeY = -1;

        public ScreenInfo(int _resX, int _resY, int _sizeX, int _sizeY, float _diagSize, int _dpi) {
            this.resX = _resX;
            this.resY = _resY;
            this.sizeX = _sizeX;
            this.sizeY = _sizeY;
            this.diagSize = _diagSize;
            this.dpi = _dpi;
        }
    }

    public static int strToInt(String val) {
        try {
            return Integer.valueOf(val).intValue();
        } catch (NumberFormatException e) {
            return Integer.MIN_VALUE;
        }
    }

    public static long strToLong(String val) {
        try {
            return Long.valueOf(val).longValue();
        } catch (NumberFormatException e) {
            return Long.MIN_VALUE;
        }
    }

    public static float strToFloat(String val) {
        try {
            return Float.valueOf(val).floatValue();
        } catch (NumberFormatException e) {
            return Float.MIN_VALUE;
        }
    }

    public static int hexToInt(String val) {
        try {
            return Integer.valueOf(val, 16).intValue();
        } catch (NumberFormatException e) {
            return Integer.MIN_VALUE;
        }
    }

    public static int randomInt(int max) {
        return new Random().nextInt(max);
    }

    public static String build_Hardware() {
        if (Build.VERSION.SDK_INT >= 8) {
            return Build.HARDWARE.trim();
        }
        return "";
    }

    public static String build_Manufacturer() {
        if (Build.VERSION.SDK_INT >= 4) {
            return Build.MANUFACTURER.trim();
        }
        return "";
    }

    public static String build_Unknown() {
        if (Build.VERSION.SDK_INT >= 8) {
            return "unknown".trim();
        }
        return "unknown";
    }

    public static boolean isAndroidEmulator() {
        return build_Manufacturer().equals(build_Unknown()) && build_Hardware().equals("goldfish");
    }

    public static boolean isBlackBerryDevice() {
        return build_Manufacturer().toUpperCase().equals("BLACKBERRY") || build_Manufacturer().equals("RIM");
    }

    public static boolean isBlackBerrySimulator() {
        return Build.BOARD.trim().startsWith("BBSIM-");
    }

    public static boolean isAlcatelOT990() {
        return Build.DEVICE.trim().toUpperCase().startsWith("ONE_TOUCH_990_") || Build.PRODUCT.trim().toUpperCase().startsWith("ONE_TOUCH_990_");
    }

    public static boolean isDevManuf(int manuf) {
        switch (manuf) {
            case 7:
                return build_Manufacturer().toUpperCase().equals("ASUS");
            case 20:
                return build_Manufacturer().toUpperCase().equals("HTC");
            case 21:
                if (Build.BRAND.trim().toUpperCase().equals("HUAWEI") || build_Manufacturer().toUpperCase().equals("HUAWEI")) {
                    return true;
                }
                return false;
            case 25:
                return build_Manufacturer().toUpperCase().equals("KARBONN");
            case 29:
                return build_Manufacturer().toUpperCase().equals("LENOVO");
            case 30:
                return build_Manufacturer().toUpperCase().equals("LGE");
            case 33:
                return build_Manufacturer().toUpperCase().equals("MOTOROLA");
            case 38:
                return build_Manufacturer().toUpperCase().equals("NVIDIA");
            case 40:
                return build_Manufacturer().toUpperCase().equals("ONEPLUS");
            case 41:
                return build_Manufacturer().toUpperCase().equals("OPPO");
            case 45:
                return build_Manufacturer().toUpperCase().equals("SAMSUNG");
            case 47:
                return build_Manufacturer().toUpperCase().equals("SONY");
            case 102:
                return build_Manufacturer().toUpperCase().equals("BQ");
            default:
                return false;
        }
    }

    public static boolean isAsusMeMOPad7_ME572C() {
        return isDevManuf(7) && getStrippedBuildModel(7).equals("K007");
    }

    public static boolean isAsusMeMOPad8_ME581C() {
        return isDevManuf(7) && getStrippedBuildModel(7).equals("K01H");
    }

    public static boolean isAsusMeMOPad8_ME581CL() {
        return isDevManuf(7) && getStrippedBuildModel(7).equals("K015");
    }

    public static boolean isAsusNexus7() {
        return isDevManuf(7) && getStrippedBuildModel(7).equals("NEXUS 7");
    }

    public static boolean isAsusNexus7_2013() {
        return isDevManuf(7) && getStrippedBuildModel(7).equals("NEXUS 7") && Build.PRODUCT.trim().toUpperCase().equals("RAZOR");
    }

    public static boolean isBQAquarisM5() {
        return isDevManuf(102) && getStrippedBuildModel(102).equals("AQUARIS M5");
    }

    public static boolean isHTCNexus9() {
        return isDevManuf(20) && getStrippedBuildModel(20).equals("NEXUS 9");
    }

    public static boolean isHTCOneE8_M8() {
        if (!isDevManuf(20)) {
            return false;
        }
        String mdl = getStrippedBuildModel(20);
        if (mdl.startsWith("0PAJ") || mdl.equals("ONE_E8") || mdl.equals("ONE E8") || mdl.startsWith("0P6B") || mdl.equals("6525LVW") || mdl.equals("ONE_M8") || mdl.equals("ONE M8") || mdl.equals("ONE_M8 DUAL SIM")) {
            return true;
        }
        return false;
    }

    public static boolean isHTCOneX() {
        return isDevManuf(20) && getStrippedBuildModel(20).equals("ONE X");
    }

    public static boolean isHuaweiP8Lite() {
        return isDevManuf(21) && getStrippedBuildModel(21).startsWith("ALE-");
    }

    public static boolean isLenovoYogaTablet2_8() {
        if (!isDevManuf(29)) {
            return false;
        }
        String mdl = getStrippedBuildModel(29);
        if (mdl.equals("YOGA TABLET 2-830F") || mdl.equals("YOGA TABLET 2-830L")) {
            return true;
        }
        return false;
    }

    public static boolean isLenovoYogaTablet10HDPlus() {
        return isDevManuf(29) && getStrippedBuildModel(29).equals("B8080-H");
    }

    public static boolean isLGG2() {
        if (!isDevManuf(30)) {
            return false;
        }
        String mdl = getStrippedBuildModel(30);
        if (mdl.equals("D800") || mdl.equals("D801") || mdl.equals("D802") || mdl.equals("D802TA") || mdl.equals("D803") || mdl.equals("D805") || mdl.equals("F320K") || mdl.equals("F320L") || mdl.equals("F320S") || mdl.equals("L-01F") || mdl.equals("LS980") || mdl.equals("VS980")) {
            return true;
        }
        return false;
    }

    public static boolean isLGG2mini() {
        if (!isDevManuf(30)) {
            return false;
        }
        String mdl = getStrippedBuildModel(30);
        if (mdl.equals("D610") || mdl.equals("D618") || mdl.equals("D620") || mdl.equals("D620K") || mdl.equals("D620R")) {
            return true;
        }
        return false;
    }

    public static boolean isLGG3() {
        if (!isDevManuf(30)) {
            return false;
        }
        String mdl = getStrippedBuildModel(30);
        if (mdl.equals("D850") || mdl.equals("D851") || mdl.equals("D852G") || mdl.equals("D855") || mdl.equals("D856") || mdl.equals("D857") || mdl.equals("D858") || mdl.equals("D859") || mdl.equals("F400K") || mdl.equals("F400L") || mdl.equals("F400S") || mdl.equals("F460K") || mdl.equals("F460L") || mdl.equals("F460S") || mdl.equals("LS990") || mdl.equals("VS985")) {
            return true;
        }
        return false;
    }

    public static boolean isLGG3S() {
        if (!isDevManuf(30)) {
            return false;
        }
        String mdl = getStrippedBuildModel(30);
        if (mdl.equals("D722") || mdl.equals("D722K") || mdl.equals("D722V") || mdl.equals("D724")) {
            return true;
        }
        return false;
    }

    public static boolean isLGG3Screen() {
        return isDevManuf(30) && getStrippedBuildModel(30).equals("F490L");
    }

    public static boolean isLGL90() {
        if (!isDevManuf(30)) {
            return false;
        }
        String mdl = getStrippedBuildModel(30);
        if (mdl.equals("D405") || mdl.equals("D405N") || mdl.equals("D410")) {
            return true;
        }
        return false;
    }

    public static boolean isLGNexus4() {
        return isDevManuf(30) && getStrippedBuildModel(30).equals("NEXUS 4");
    }

    public static boolean isLGNexus5() {
        return isDevManuf(30) && getStrippedBuildModel(30).equals("NEXUS 5");
    }

    public static boolean isMeizuM2Note() {
        if (!isDevManuf(31)) {
            return false;
        }
        String mdl = getStrippedBuildModel(31);
        if (mdl.equals("M2NOTE") || mdl.equals("M2 NOTE")) {
            return true;
        }
        return false;
    }

    public static boolean isMotorolaMotoG() {
        if (!isDevManuf(33)) {
            return false;
        }
        String mdl = getStrippedBuildModel(33);
        if (mdl.equals("XT1028") || mdl.equals("XT1031") || mdl.equals("XT1032") || mdl.equals("XT1034") || mdl.equals("XT1035")) {
            return true;
        }
        return false;
    }

    public static boolean isMotorolaMotoG2014() {
        if (!isDevManuf(33)) {
            return false;
        }
        String mdl = getStrippedBuildModel(33);
        if (mdl.equals("XT1063") || mdl.equals("XT1064") || mdl.equals("XT1068") || mdl.equals("XT1069") || mdl.equals("XT1072") || mdl.equals("XT1078")) {
            return true;
        }
        return false;
    }

    public static boolean isMotorolaMotoX() {
        if (!isDevManuf(33)) {
            return false;
        }
        String mdl = getStrippedBuildModel(33);
        if (mdl.equals("XT1049") || mdl.equals("XT1050") || mdl.equals("XT1052") || mdl.equals("XT1053") || mdl.equals("XT1055") || mdl.equals("XT1056") || mdl.equals("XT1058") || mdl.equals("XT1060")) {
            return true;
        }
        return false;
    }

    public static boolean isMotorolaMotoX2014() {
        if (!isDevManuf(33)) {
            return false;
        }
        String mdl = getStrippedBuildModel(33);
        if (mdl.equals("XT1092") || mdl.equals("XT1093") || mdl.equals("XT1094") || mdl.equals("XT1095") || mdl.equals("XT1096") || mdl.equals("XT1097")) {
            return true;
        }
        return false;
    }

    public static boolean isMotorolaNexus6() {
        return isDevManuf(33) && getStrippedBuildModel(33).equals("NEXUS 6");
    }

    public static boolean isOnePlusOne() {
        return isDevManuf(40) && getStrippedBuildModel(40).equals("A0001");
    }

    public static boolean isOppoFind7() {
        if (!isDevManuf(41)) {
            return false;
        }
        String mdl = getStrippedBuildModel(41);
        if (mdl.equals("FIND7") || mdl.equals("FIND 7")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxyAlpha() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G850");
    }

    public static boolean isSamsungGalaxyJ1() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-J100");
    }

    public static boolean isSamsungGalaxyJ5() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-J500");
    }

    public static boolean isSamsungGalaxyNote3() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("SM-N900");
    }

    public static boolean isSamsungGalaxyNote3DualSIM() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("SM-N9002");
    }

    public static boolean isSamsungGalaxyNote3LTE() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("SM-N9005");
    }

    public static boolean isSamsungGalaxyNote4() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.startsWith("SM-N910") || mdl.startsWith("SM-N916")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxyNote5() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-N920");
    }

    public static boolean isSamsungGalaxyNote10_1() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("GT-N8000") || mdl.equals("GT-N8010") || mdl.equals("GT-N8020")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxyNoteEdge() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-N915");
    }

    public static boolean isSamsungGalaxyNotePro12_2() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("SM-P900") || mdl.equals("SM-P901") || mdl.equals("SM-P905")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxySIII() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("GT-I9300");
    }

    public static boolean isSamsungGalaxyS3Neo() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("GT-I9301I");
    }

    public static boolean isSamsungGalaxyS4() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("GT-I950");
    }

    public static boolean isSamsungGalaxyS4CDMA() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("SCH-I545");
    }

    public static boolean isSamsungGalaxyS4Active() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("GT-I9295");
    }

    public static boolean isSamsungGalaxyS4VE() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("GT-I9515");
    }

    public static boolean isSamsungGalaxyS5() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G900");
    }

    public static boolean isSamsungGalaxyS5Active() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G870");
    }

    public static boolean isSamsungGalaxyS5LTEA() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G906");
    }

    public static boolean isSamsungGalaxyS5Plus() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G901");
    }

    public static boolean isSamsungGalaxyS5Sport() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G860");
    }

    public static boolean isSamsungGalaxyS6() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G920");
    }

    public static boolean isSamsungGalaxyS6Active() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G890");
    }

    public static boolean isSamsungGalaxyS6Edge() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G925");
    }

    public static boolean isSamsungGalaxyS6EdgePlus() {
        return isDevManuf(45) && getStrippedBuildModel(45).startsWith("SM-G928");
    }

    public static boolean isSamsungGalaxySDuos() {
        return isDevManuf(45) && getStrippedBuildModel(45).equals("GT-S7562");
    }

    public static boolean isSamsungGalaxyTab4_10_1() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("SM-T530") || mdl.equals("SM-T531") || mdl.equals("SM-T533") || mdl.equals("SM-T535")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxyTabS_8_4() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("SM-T700") || mdl.equals("SM-T705") || mdl.equals("SM-T705Y")) {
            return true;
        }
        return false;
    }

    public static boolean isSamsungGalaxyTabS_10_5() {
        if (!isDevManuf(45)) {
            return false;
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("SM-T800") || mdl.equals("SM-T805") || mdl.equals("SM-T805W")) {
            return true;
        }
        return false;
    }

    public static boolean isSonyXperiaM() {
        if (!isDevManuf(47)) {
            return false;
        }
        String mdl = getStrippedBuildModel(47);
        if (mdl.equals("C1904") || mdl.equals("C1905") || mdl.equals("C2004") || mdl.equals("C2005")) {
            return true;
        }
        return false;
    }

    public static boolean isSonyXperiaZ2() {
        if (!isDevManuf(47)) {
            return false;
        }
        String mdl = getStrippedBuildModel(47);
        if (mdl.equals("D6502") || mdl.equals("D6503") || mdl.equals("D6543") || mdl.equals("L50W")) {
            return true;
        }
        return false;
    }

    public static boolean disableOpenGLESDetection() {
        if (isBlackBerrySimulator()) {
            return true;
        }
        if (!isDevManuf(45) || !getStrippedBuildModel(45).equals("GT-S7580")) {
            return false;
        }
        return true;
    }

    public static String tempToStr(float temp, int tempSetting) {
        if (temp <= 0.0f) {
            return "";
        }
        if (tempSetting == 2) {
            return String.format("%.1f°F", Float.valueOf(((9.0f * temp) + 160.0f) / 5.0f));
        }
        return String.format("%.1f°C", Float.valueOf(temp));
    }

    public static String pressureToStr(float press, int pressSetting) {
        if (press <= 0.0f) {
            return "";
        }
        if (pressSetting == 3) {
            return String.format("%.1f mmHg", Float.valueOf(0.75f * press));
        } else if (pressSetting == 2) {
            return String.format("%.1f inHg", Float.valueOf(press / 33.863888f));
        } else {
            return String.format("%.1f hPa", Float.valueOf(press));
        }
    }

    public static String readSystemFile_Str(String filename) {
        StringBuffer sb = new StringBuffer();
        if (sb == null) {
            return "";
        }
        File fil = new File(filename);
        if (fil != null && fil.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(fil));
                if (br != null) {
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        }
                        sb.append(aLine + "\n");
                    }
                    br.close();
                }
            } catch (IOException e) {
            }
        }
        return sb.toString();
    }

    public static String readFirstLineFromSystemFile_Str(String filename) {
        try {
            RandomAccessFile reader = new RandomAccessFile(filename, "r");
            if (reader == null) {
                return "";
            }
            String res = reader.readLine();
            reader.close();
            return res;
        } catch (Exception e) {
            return "";
        }
    }

    public static String parseLineFromSystemFile_Str(String filename, String id) {
        String res = "";
        File fil = new File(filename);
        if (fil != null && fil.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(fil));
                if (br != null) {
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        }
                        String aLine2 = aLine.trim();
                        if (aLine2.indexOf(id + ":") == 0) {
                            res = aLine2.substring(id.length() + 1).trim();
                            break;
                        }
                    }
                    br.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return res;
    }

    public static String getRILSerialNumber() {
        try {
            Class<?> c = Class.forName("android.os.SystemProperties");
            return (String) c.getMethod("get", String.class).invoke(c, "ril.serialnumber");
        } catch (Exception e) {
            return null;
        }
    }

    public static long getAvailMemoryMB(Activity activity) {
        if (activity == null) {
            return 0;
        }
        ActivityManager actmgr = (ActivityManager) activity.getSystemService("activity");
        ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
        if (actmgr == null || memInfo == null) {
            return 0;
        }
        actmgr.getMemoryInfo(memInfo);
        return memInfo.availMem / 1048576;
    }

    public static long getTotalMemoryMB_ActivityManager(Activity activity) {
        long res = 0;
        if (Build.VERSION.SDK_INT >= 16) {
            if (activity == null) {
                return 0;
            }
            ActivityManager actMgr = (ActivityManager) activity.getSystemService("activity");
            ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
            if (!(actMgr == null || memInfo == null)) {
                actMgr.getMemoryInfo(memInfo);
                res = memInfo.totalMem / 1048576;
            }
        }
        return res;
    }

    public static long getTotalMemoryMB_proc_meminfo() {
        long res = 0;
        File meminfo = new File("/proc/meminfo");
        if (meminfo != null && meminfo.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(meminfo));
                if (br != null) {
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        } else if (aLine.startsWith("MemTotal:")) {
                            String aLine2 = aLine.substring(9).trim().toUpperCase();
                            int i = aLine2.indexOf(" KB");
                            if (i > 0) {
                                long val = strToLong(aLine2.substring(0, i));
                                if (val > 0) {
                                    res = val / PlaybackStateCompat.ACTION_PLAY_FROM_MEDIA_ID;
                                }
                            }
                        }
                    }
                    br.close();
                }
            } catch (IOException e) {
            }
        }
        return res;
    }

    public static long getTotalMemoryMB(Activity activity) {
        long res = getTotalMemoryMB_ActivityManager(activity);
        if (res <= 0) {
            return getTotalMemoryMB_proc_meminfo();
        }
        return res;
    }

    public static long getMinMaxGPUClockFromFile_MHz(String sysFile, boolean getMax) {
        String valStr = readFirstLineFromSystemFile_Str(sysFile);
        if (valStr.length() == 0) {
            return 0;
        }
        String[] valStrArr = valStr.split(" ");
        if (valStrArr.length == 0) {
            return 0;
        }
        List<Long> valueList = new ArrayList<>();
        for (String str : valStrArr) {
            long val = strToLong(str);
            if (val > 0) {
                valueList.add(Long.valueOf(val));
            }
        }
        if (valueList.size() == 0) {
            return 0;
        }
        Collections.sort(valueList);
        if (getMax) {
            return valueList.get(valueList.size() - 1).longValue();
        }
        return valueList.get(0).longValue();
    }

    private static int getOGLESVersion_FromPackageManager(Context context) {
        FeatureInfo[] featureInfos;
        PackageManager pkgmgr = context.getPackageManager();
        if (pkgmgr == null || (featureInfos = pkgmgr.getSystemAvailableFeatures()) == null || featureInfos.length <= 0) {
            return 65536;
        }
        for (FeatureInfo fInfo : featureInfos) {
            if (fInfo != null && fInfo.name == null) {
                if (fInfo.reqGlEsVersion != 0) {
                    return fInfo.reqGlEsVersion;
                } else {
                    return 65536;
                }
            }
        }
        return 65536;
    }

    private static int getOGLESVersion_FromActivityManager(Context context) {
        ConfigurationInfo configInfo;
        ActivityManager actmgr = (ActivityManager) context.getSystemService("activity");
        if (actmgr == null || (configInfo = actmgr.getDeviceConfigurationInfo()) == null || configInfo.reqGlEsVersion == 0) {
            return 65536;
        }
        return configInfo.reqGlEsVersion;
    }

    public static int getOpenGLESVersion(Activity activity) {
        int ver1 = getOGLESVersion_FromPackageManager(activity);
        int ver2 = getOGLESVersion_FromActivityManager(activity);
        return ver1 > ver2 ? ver1 : ver2;
    }

    private static long getAdrenoCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/gpuclk");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val < 0) {
            return -1;
        }
        long val2 = val / 1000000;
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.GPUMinClock > val2) {
            return sysInfoST.GPUMinClock;
        }
        return val2;
    }

    private static long getAdrenoMinGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/devfreq/min_freq");
        if (valStr.length() == 0) {
            valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/min_gpuclk");
        }
        if (valStr.length() == 0) {
            long minClk = getMinMaxGPUClockFromFile_MHz("/sys/class/kgsl/kgsl-3d0/gpu_available_frequencies", false);
            if (minClk > 0) {
                return minClk / 1000000;
            }
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000000;
        }
        return -1;
    }

    public static long getAdrenoMaxGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/devfreq/max_freq");
        if (valStr.length() == 0) {
            valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/max_gpuclk");
        }
        if (valStr.length() == 0) {
            long maxClk = getMinMaxGPUClockFromFile_MHz("/sys/class/kgsl/kgsl-3d0/gpu_available_frequencies", true);
            if (maxClk > 0) {
                return maxClk / 1000000;
            }
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getMaliCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/misc/mali0/device/clock");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val < 0) {
            return -1;
        }
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.GPUMinClock > val) {
            return sysInfoST.GPUMinClock;
        }
        return val;
    }

    private static long getMaliMinGPUClock_MHz() {
        long minClk = getMinMaxGPUClockFromFile_MHz("/sys/class/misc/mali0/device/dvfs_table", false);
        if (minClk > 0) {
            return minClk;
        }
        return -1;
    }

    private static long getMaliMaxGPUClock_MHz() {
        long maxClk = getMinMaxGPUClockFromFile_MHz("/sys/class/misc/mali0/device/dvfs_table", true);
        if (maxClk > 0) {
            return maxClk;
        }
        return -1;
    }

    private static long getOMAPCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/kernel/debug/clock/virt_38400000_ck/sys_clkin_ck/dpll_per_ck/dpll_per_x2_ck/dpll_per_m7x2_ck/gpu_fck/rate");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val >= 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getPowerVRRogueCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/dfrgx/cur_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val >= 0) {
            return val / 1000;
        }
        return -1;
    }

    private static long getPowerVRRogueMinGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/dfrgx/min_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000;
        }
        return -1;
    }

    private static long getPowerVRRogueMaxGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/dfrgx/max_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000;
        }
        return -1;
    }

    private static long getTegraCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/kernel/tegra_gpu/gpu_rate");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val >= 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getTegraMinGPUClock_MHz() {
        long minClk = getMinMaxGPUClockFromFile_MHz("/sys/kernel/tegra_gpu/gpu_available_rates", false);
        if (minClk > 0) {
            return minClk / 1000000;
        }
        return -1;
    }

    private static long getTegraMaxGPUClock_MHz() {
        long maxClk = getMinMaxGPUClockFromFile_MHz("/sys/kernel/tegra_gpu/gpu_available_rates", true);
        if (maxClk > 0) {
            return maxClk / 1000000;
        }
        return -1;
    }

    private static long getTegra3_4CurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/gr3d/cur_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val >= 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getTegra3_4MinGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/gr3d/min_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getTegra3_4MaxGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/gr3d/max_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000000;
        }
        return -1;
    }

    private static long getVivanteCurrentGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/devfreq-vpu.0/cur_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val >= 0) {
            return val / 1000;
        }
        return -1;
    }

    private static long getVivanteMinGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/devfreq-vpu.0/min_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000;
        }
        return -1;
    }

    private static long getVivanteMaxGPUClock_MHz() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/devfreq/devfreq-vpu.0/max_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long val = strToLong(valStr);
        if (val > 0) {
            return val / 1000;
        }
        return -1;
    }

    public static long[] getGPUClockRange_MHz() {
        Long min = Long.valueOf(getAdrenoMinGPUClock_MHz());
        Long max = Long.valueOf(getAdrenoMaxGPUClock_MHz());
        if (min.longValue() <= 0 || max.longValue() <= 0) {
            Long min2 = Long.valueOf(getMaliMinGPUClock_MHz());
            Long max2 = Long.valueOf(getMaliMaxGPUClock_MHz());
            if (min2.longValue() <= 0 || max2.longValue() <= 0) {
                Long min3 = Long.valueOf(getPowerVRRogueMinGPUClock_MHz());
                Long max3 = Long.valueOf(getPowerVRRogueMaxGPUClock_MHz());
                if (min3.longValue() <= 0 || max3.longValue() <= 0) {
                    Long min4 = Long.valueOf(getTegraMinGPUClock_MHz());
                    Long max4 = Long.valueOf(getTegraMaxGPUClock_MHz());
                    if (min4.longValue() <= 0 || max4.longValue() <= 0) {
                        Long min5 = Long.valueOf(getTegra3_4MinGPUClock_MHz());
                        Long max5 = Long.valueOf(getTegra3_4MaxGPUClock_MHz());
                        if (min5.longValue() <= 0 || max5.longValue() <= 0) {
                            Long min6 = Long.valueOf(getVivanteMinGPUClock_MHz());
                            Long max6 = Long.valueOf(getVivanteMaxGPUClock_MHz());
                            if (min6.longValue() <= 0 || max6.longValue() <= 0) {
                                return null;
                            }
                            return new long[]{min6.longValue(), max6.longValue()};
                        }
                        return new long[]{min5.longValue(), max5.longValue()};
                    }
                    return new long[]{min4.longValue(), max4.longValue()};
                }
                return new long[]{min3.longValue(), max3.longValue()};
            }
            SysInfoSingleTon.getInstance().GPUMinClock = min2.longValue();
            return new long[]{min2.longValue(), max2.longValue()};
        }
        SysInfoSingleTon.getInstance().GPUMinClock = min.longValue();
        return new long[]{min.longValue(), max.longValue()};
    }

    public static long getCurrentGPUClock_MHz() {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.GPUClock_Method == 0) {
            sysInfoST.GPUClock_Method = 1;
            if (Long.valueOf(getAdrenoCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 2;
            } else if (Long.valueOf(getMaliCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 3;
            } else if (Long.valueOf(getOMAPCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 4;
            } else if (Long.valueOf(getPowerVRRogueCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 5;
            } else if (Long.valueOf(getTegraCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 6;
            } else if (Long.valueOf(getTegra3_4CurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 7;
            } else if (Long.valueOf(getVivanteCurrentGPUClock_MHz()).longValue() >= 0) {
                sysInfoST.GPUClock_Method = 8;
            }
        }
        switch (sysInfoST.GPUClock_Method) {
            case 2:
                Long clk = Long.valueOf(getAdrenoCurrentGPUClock_MHz());
                if (clk.longValue() >= 0) {
                    return clk.longValue();
                }
                break;
            case 3:
                Long clk2 = Long.valueOf(getMaliCurrentGPUClock_MHz());
                if (clk2.longValue() >= 0) {
                    return clk2.longValue();
                }
                break;
            case 4:
                Long clk3 = Long.valueOf(getOMAPCurrentGPUClock_MHz());
                if (clk3.longValue() >= 0) {
                    return clk3.longValue();
                }
                break;
            case 5:
                Long clk4 = Long.valueOf(getPowerVRRogueCurrentGPUClock_MHz());
                if (clk4.longValue() >= 0) {
                    return clk4.longValue();
                }
                break;
            case 6:
                Long clk5 = Long.valueOf(getTegraCurrentGPUClock_MHz());
                if (clk5.longValue() >= 0) {
                    return clk5.longValue();
                }
                break;
            case 7:
                Long clk6 = Long.valueOf(getTegra3_4CurrentGPUClock_MHz());
                if (clk6.longValue() >= 0) {
                    return clk6.longValue();
                }
                break;
            case 8:
                Long clk7 = Long.valueOf(getVivanteCurrentGPUClock_MHz());
                if (clk7.longValue() >= 0) {
                    return clk7.longValue();
                }
                break;
        }
        return -1;
    }

    public static int getAdrenoGPUUtilization() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/kgsl/kgsl-3d0/gpubusy");
        if (valStr.length() == 0) {
            return -1;
        }
        String valStr2 = valStr.trim();
        int pos = valStr2.indexOf(" ");
        if (pos <= 0) {
            return -1;
        }
        int val1 = strToInt(valStr2.substring(0, pos));
        int val2 = strToInt(valStr2.substring(pos + 1).trim());
        if (val1 == 0 || val2 == 0) {
            return 0;
        }
        int val = Math.round((100.0f * ((float) val1)) / ((float) val2));
        if (val < 0 || val > 100) {
            return -1;
        }
        return val;
    }

    public static int getMaliGPUUtilization() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/misc/mali0/device/utilization");
        if (valStr.length() == 0) {
            return -1;
        }
        int val = strToInt(valStr);
        if (val < 0 || val > 100) {
            return -1;
        }
        return val;
    }

    public static int getTegraK1GPUUtilization() {
        int val;
        String valStr = readFirstLineFromSystemFile_Str("/sys/devices/platform/host1x/gk20a.0/load");
        if (valStr.length() != 0 && (val = strToInt(valStr)) >= 0 && val <= 1000) {
            return Math.round((float) (val / 10));
        }
        return -1;
    }

    public static int getTegraX1GPUUtilization() {
        int val;
        String valStr = readFirstLineFromSystemFile_Str("/sys/devices/platform/host1x/gm20a.0/load");
        if (valStr.length() != 0 && (val = strToInt(valStr)) >= 0 && val <= 1000) {
            return Math.round((float) (val / 10));
        }
        return -1;
    }

    public static int getGPUUtilization() {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.GPUUtil_Method == 0) {
            sysInfoST.GPUUtil_Method = 1;
            if (getAdrenoGPUUtilization() >= 0) {
                sysInfoST.GPUUtil_Method = 2;
            } else if (getMaliGPUUtilization() >= 0) {
                sysInfoST.GPUUtil_Method = 3;
            } else if (getTegraK1GPUUtilization() >= 0) {
                sysInfoST.GPUUtil_Method = 4;
            } else if (getTegraX1GPUUtilization() >= 0) {
                sysInfoST.GPUUtil_Method = 5;
            }
        }
        switch (sysInfoST.GPUUtil_Method) {
            case 2:
                int util = getAdrenoGPUUtilization();
                if (util >= 0) {
                    return util;
                }
                break;
            case 3:
                int util2 = getMaliGPUUtilization();
                if (util2 >= 0) {
                    return util2;
                }
                break;
            case 4:
                int util3 = getTegraK1GPUUtilization();
                if (util3 >= 0) {
                    return util3;
                }
                break;
            case 5:
                int util4 = getTegraX1GPUUtilization();
                if (util4 >= 0) {
                    return util4;
                }
                break;
        }
        return -1;
    }

    public static int getAdrenoALUCount() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        String oglVendor = sysinfo.OGLES_Vendor;
        String oglRender = sysinfo.OGLES_Renderer;
        if (oglVendor == null || oglVendor.length() <= 0 || oglRender == null || oglRender.length() <= 0) {
            return 0;
        }
        String oglVendor2 = oglVendor.trim().toUpperCase();
        String oglRender2 = oglRender.trim().toUpperCase();
        if (!oglVendor2.startsWith("QUALCOMM") || !oglRender2.startsWith("ADRENO ")) {
            return 0;
        }
        if (oglRender2.startsWith("ADRENO (TM) ")) {
            oglRender2 = oglRender2.substring(12);
        } else if (oglRender2.startsWith("ADRENO ")) {
            oglRender2 = oglRender2.substring(7);
        }
        if (oglRender2.equals("200")) {
            return 8;
        }
        if (oglRender2.equals("203") || oglRender2.equals("205")) {
            return 16;
        }
        if (oglRender2.equals("220") || oglRender2.equals("225")) {
            return 32;
        }
        if (oglRender2.equals("302") || oglRender2.equals("304") || oglRender2.equals("305") || oglRender2.equals("306")) {
            return 24;
        }
        if (oglRender2.equals("330") || oglRender2.equals("418") || oglRender2.equals("420")) {
            return 128;
        }
        if (oglRender2.equals("405")) {
            return 48;
        }
        if (oglRender2.equals("430")) {
            return DEVMANUF_ZUK;
        }
        if (oglRender2.equals("450") || oglRender2.equals("530")) {
        }
        return 0;
    }

    private static boolean isTegraK1() {
        return readFirstLineFromSystemFile_Str("/sys/class/devfreq/gk20a.0/cur_freq") != "";
    }

    private static boolean isTegraX1() {
        return readFirstLineFromSystemFile_Str("/sys/class/devfreq/gm20a.0/cur_freq") != "";
    }

    public static String getGPUModel() {
        if (isTegraK1()) {
            return "nVIDIA Tegra K1 (GK20A)";
        }
        if (isTegraX1()) {
            return "nVIDIA Tegra X1 (GM20A)";
        }
        return "";
    }

    public static String getGPUArchitecture() {
        if (isTegraK1()) {
            return "nVIDIA Kepler";
        }
        if (isTegraX1()) {
            return "nVIDIA Maxwell";
        }
        return "";
    }

    private static int popCount(int inp) {
        if (inp < 0) {
            return 0;
        }
        int bitCount = 0;
        for (int i = 0; i < 31; i++) {
            bitCount += (inp >> i) & 1;
        }
        return bitCount;
    }

    public static int getMaliGPUCoreCount_Old() {
        switch (getSoCModel_Cached()) {
            case 4003:
            case 4004:
            case 4005:
            case 5006:
            case 5010:
            case 5011:
            case 6002:
            case 6004:
            case SOC_EXYNOS_4212 /*{ENCODED_INT: 6005}*/:
            case SOC_EXYNOS_4412 /*{ENCODED_INT: 6007}*/:
            case SOC_MT6588 /*{ENCODED_INT: 8019}*/:
            case SOC_MT6591 /*{ENCODED_INT: 8023}*/:
            case SOC_MT6592 /*{ENCODED_INT: 8024}*/:
            case SOC_MT6592M /*{ENCODED_INT: 8025}*/:
            case SOC_MT6592T /*{ENCODED_INT: 8026}*/:
            case SOC_MT6592W /*{ENCODED_INT: 8027}*/:
            case SOC_MT8127 /*{ENCODED_INT: 8050}*/:
            case SOC_MT8392 /*{ENCODED_INT: 8066}*/:
            case SOC_SC7735S /*{ENCODED_INT: 13011}*/:
                return 4;
            case 5004:
            case 5007:
            case 5008:
            case SOC_MT6580 /*{ENCODED_INT: 8015}*/:
            case SOC_MT6581 /*{ENCODED_INT: 8016}*/:
            case SOC_MT6582 /*{ENCODED_INT: 8017}*/:
            case SOC_MT6582M /*{ENCODED_INT: 8018}*/:
            case SOC_MT8382 /*{ENCODED_INT: 8063}*/:
            case SOC_SC6825 /*{ENCODED_INT: 13004}*/:
            case SOC_SC7730A /*{ENCODED_INT: 13007}*/:
            case SOC_SC7730S /*{ENCODED_INT: 13008}*/:
            case SOC_SC7730SE /*{ENCODED_INT: 13009}*/:
            case SOC_SC7731G /*{ENCODED_INT: 13010}*/:
            case SOC_ALLW_A20 /*{ENCODED_INT: 14003}*/:
            case SOC_ALLW_A23 /*{ENCODED_INT: 14004}*/:
            case SOC_ALLW_A33 /*{ENCODED_INT: 14007}*/:
            case SOC_LC1810 /*{ENCODED_INT: 17001}*/:
            case SOC_LC1811 /*{ENCODED_INT: 17002}*/:
            case SOC_LC1813 /*{ENCODED_INT: 17003}*/:
            case SOC_LC1913 /*{ENCODED_INT: 17006}*/:
                return 2;
            case SOC_MT6570 /*{ENCODED_INT: 8006}*/:
            case SOC_MT6571 /*{ENCODED_INT: 8007}*/:
            case SOC_MT6572 /*{ENCODED_INT: 8008}*/:
            case SOC_MT6572M /*{ENCODED_INT: 8009}*/:
            case SOC_NOVATHOR_U8420 /*{ENCODED_INT: 11001}*/:
            case SOC_NOVATHOR_U8500 /*{ENCODED_INT: 11002}*/:
            case SOC_SC6820 /*{ENCODED_INT: 13001}*/:
            case SOC_SC6820I /*{ENCODED_INT: 13002}*/:
            case SOC_SC6821 /*{ENCODED_INT: 13003}*/:
            case SOC_SC7715 /*{ENCODED_INT: 13005}*/:
            case SOC_SC7727S /*{ENCODED_INT: 13006}*/:
            case SOC_SC8810 /*{ENCODED_INT: 13012}*/:
            case SOC_ALLW_A10 /*{ENCODED_INT: 14001}*/:
            case SOC_ALLW_A13 /*{ENCODED_INT: 14002}*/:
                return 1;
            default:
                return 0;
        }
    }

    public static int getMaliGPUCoreCount_New() {
        int res = 0;
        try {
            RandomAccessFile reader = new RandomAccessFile("/sys/class/misc/mali0/device/core_mask", "r");
            if (reader != null) {
                while (true) {
                    String aLine = reader.readLine();
                    if (aLine == null) {
                        break;
                    }
                    String aLine2 = aLine.trim().toUpperCase();
                    if (aLine2.startsWith("AVAILABLE CORE MASK : ")) {
                        String aLine3 = aLine2.substring(22).trim();
                        if (aLine3.startsWith("0X")) {
                            res = popCount(hexToInt(aLine3.substring(2)));
                        } else {
                            res = popCount(strToInt(aLine3));
                        }
                    }
                }
                reader.close();
            }
        } catch (Exception e) {
        }
        return res;
    }

    public static int getMaliGPUCoreCount() {
        int res = getMaliGPUCoreCount_New();
        return res > 0 ? res : getMaliGPUCoreCount_Old();
    }

    public static int getTegraCUDACoreCount() {
        if (isTegraK1()) {
            return DEVMANUF_ZUK;
        }
        if (isTegraX1()) {
            return 256;
        }
        switch (getSoCModel_Cached()) {
            case 2006:
                return 72;
            case 2007:
            default:
                return 0;
            case 2008:
                return 60;
        }
    }

    public static int getTegraTMUCount() {
        if (isTegraK1()) {
            return 8;
        }
        if (isTegraX1()) {
            return 16;
        }
        return 0;
    }

    public static int getTegraROPCount() {
        if (isTegraK1()) {
            return 4;
        }
        if (isTegraX1()) {
            return 16;
        }
        switch (getSoCModel_Cached()) {
            case 2006:
                return 4;
            case 2007:
            default:
                return 0;
            case 2008:
                return 2;
        }
    }

    public static String getBatteryTemp_Str(Activity activity, int tempSetting) {
        IntentFilter ifilter;
        Intent batteryStatus;
        if (activity == null || (ifilter = new IntentFilter("android.intent.action.BATTERY_CHANGED")) == null || (batteryStatus = activity.registerReceiver(null, ifilter)) == null) {
            return null;
        }
        int temp = batteryStatus.getIntExtra("temperature", -1);
        if (temp > 0) {
            return tempToStr(((float) temp) / 10.0f, tempSetting);
        }
        return "";
    }

    public static String getTZHWMonTemp_Str(String fileName, int tempSetting) {
        int valueInt;
        float valueFloat;
        String fLine = readFirstLineFromSystemFile_Str(fileName);
        if (fLine.length() == 0 || (valueInt = strToInt(fLine)) <= 0) {
            return "";
        }
        if (valueInt > 1500000) {
            valueFloat = ((float) valueInt) / 100000.0f;
        } else if (valueInt > SOC_ACT) {
            valueFloat = ((float) valueInt) / 1000.0f;
        } else if (valueInt > DEVMANUF_DIGMA) {
            valueFloat = ((float) valueInt) / 10.0f;
        } else {
            valueFloat = (float) valueInt;
        }
        return tempToStr(valueFloat, tempSetting);
    }

    public static String getTZTemp_Str(int sensor, int tempSetting) {
        return getTZHWMonTemp_Str("/sys/class/thermal/thermal_zone" + sensor + "/temp", tempSetting);
    }

    public static String getTZName_Str(int sensor) {
        return readFirstLineFromSystemFile_Str("/sys/class/thermal/thermal_zone" + sensor + "/type");
    }

    public static String getHWMonTemp_Str(int sensor, int tempSetting) {
        return getTZHWMonTemp_Str("/sys/class/hwmon/hwmon" + sensor + "/temp1_input", tempSetting);
    }

    public static String getHWMonName_Str(int sensor) {
        return readFirstLineFromSystemFile_Str("/sys/class/hwmon/hwmon" + sensor + "/name");
    }

    public static String getMedfieldCoreTemp_Str(int tempSetting) {
        int valueInt;
        float valueFloat;
        String fLine = readFirstLineFromSystemFile_Str("/sys/class/hwmon/hwmon0/device/soc_temp_input");
        if (fLine.length() == 0 || (valueInt = strToInt(fLine)) <= 0) {
            return "";
        }
        if (valueInt > 1500000) {
            valueFloat = ((float) valueInt) / 100000.0f;
        } else if (valueInt > SOC_ACT) {
            valueFloat = ((float) valueInt) / 1000.0f;
        } else if (valueInt > DEVMANUF_DIGMA) {
            valueFloat = ((float) valueInt) / 10.0f;
        } else {
            valueFloat = (float) valueInt;
        }
        return tempToStr(valueFloat, tempSetting);
    }

    public static String enumTZTemps() {
        String res = "";
        for (int sensor = 0; sensor < 100; sensor++) {
            String fTemp = readFirstLineFromSystemFile_Str("/sys/class/thermal/thermal_zone" + sensor + "/temp");
            String fType = readFirstLineFromSystemFile_Str("/sys/class/thermal/thermal_zone" + sensor + "/type");
            if (fTemp != null && fTemp.length() > 0) {
                String res2 = res + "TZ #" + sensor;
                if (fType != null && fType.length() > 0) {
                    res2 = res2 + " (" + fType + ")";
                }
                res = res2 + ": " + fTemp + "\n";
            }
        }
        return res;
    }

    public static String enumHWMonTemps() {
        String res = "";
        for (int sensor = 0; sensor < 100; sensor++) {
            String fTemp = readFirstLineFromSystemFile_Str("/sys/class/hwmon/hwmon" + sensor + "/temp1_input");
            String fType = readFirstLineFromSystemFile_Str("/sys/class/hwmon/hwmon" + sensor + "/name");
            if (fTemp != null && fTemp.length() > 0) {
                String res2 = res + "HWMon #" + sensor;
                if (fType != null && fType.length() > 0) {
                    res2 = res2 + " (" + fType + ")";
                }
                res = res2 + ": " + fTemp + "\n";
            }
        }
        return res;
    }

    public static String enumDirectoryContent(String path, String contains1, String contains2, String contains3, String contains4, String contains5, String contains6, String contains7) {
        File[] flist;
        String fname;
        String res = "";
        File f = new File(path);
        if (!(f == null || !f.exists() || (flist = f.listFiles()) == null)) {
            for (File fil : flist) {
                if (!(fil == null || (fname = fil.getName()) == null)) {
                    String fnameuc = fname.toUpperCase();
                    boolean addit = contains1 == null && contains2 == null && contains3 == null && contains4 == null && contains5 == null && contains6 == null && contains7 == null;
                    if (contains1 != null && fnameuc.contains(contains1)) {
                        addit = true;
                    }
                    if (contains2 != null && fnameuc.contains(contains2)) {
                        addit = true;
                    }
                    if (contains3 != null && fnameuc.contains(contains3)) {
                        addit = true;
                    }
                    if (contains4 != null && fnameuc.contains(contains4)) {
                        addit = true;
                    }
                    if (contains5 != null && fnameuc.contains(contains5)) {
                        addit = true;
                    }
                    if (contains6 != null && fnameuc.contains(contains6)) {
                        addit = true;
                    }
                    if (contains7 != null && fnameuc.contains(contains7)) {
                        addit = true;
                    }
                    if (addit) {
                        res = res + fname + "\n";
                    }
                }
            }
        }
        return res;
    }

    public static String enumDevFreqFolders() {
        File[] flist;
        String fname;
        String res = "";
        File f = new File("/sys/class/devfreq");
        if (!(f == null || !f.exists() || (flist = f.listFiles()) == null)) {
            for (File fil : flist) {
                if (!(fil == null || (fname = fil.getName()) == null)) {
                    String freqFile = "/sys/class/devfreq/" + fname + "/cur_freq";
                    String valStr = readFirstLineFromSystemFile_Str(freqFile);
                    if (valStr.length() == 0) {
                        valStr = "< Failed >";
                    }
                    String res2 = res + freqFile + " = " + valStr + "\n";
                    String freqFile2 = "/sys/class/devfreq/" + fname + "/min_freq";
                    String valStr2 = readFirstLineFromSystemFile_Str(freqFile2);
                    if (valStr2.length() == 0) {
                        valStr2 = "< Failed >";
                    }
                    String res3 = res2 + freqFile2 + " = " + valStr2 + "\n";
                    String freqFile3 = "/sys/class/devfreq/" + fname + "/max_freq";
                    String valStr3 = readFirstLineFromSystemFile_Str(freqFile3);
                    if (valStr3.length() == 0) {
                        valStr3 = "< Failed >";
                    }
                    String res4 = res3 + freqFile3 + " = " + valStr3 + "\n";
                    String freqFile4 = "/sys/class/devfreq/" + fname + "/available_frequencies";
                    String valStr4 = readFirstLineFromSystemFile_Str(freqFile4);
                    if (valStr4.length() == 0) {
                        valStr4 = "< Failed >";
                    }
                    String res5 = res4 + freqFile4 + " = " + valStr4 + "\n";
                    String freqFile5 = "/sys/class/devfreq/" + fname + "/available_governors";
                    String valStr5 = readFirstLineFromSystemFile_Str(freqFile5);
                    if (valStr5.length() == 0) {
                        valStr5 = "< Failed >";
                    }
                    res = res5 + freqFile5 + " = " + valStr5 + "\n";
                }
            }
        }
        return res;
    }

    public static String enumCPUFreqFolders() {
        String res = "";
        for (int cpu = 0; cpu < 16; cpu++) {
            String dir = String.format("/sys/devices/system/cpu/cpu%d/cpufreq/", Integer.valueOf(cpu));
            String ciCur = readFirstLineFromSystemFile_Str(dir + "cpuinfo_cur_freq");
            String ciMin = readFirstLineFromSystemFile_Str(dir + "cpuinfo_min_freq");
            String ciMax = readFirstLineFromSystemFile_Str(dir + "cpuinfo_max_freq");
            String scCur = readFirstLineFromSystemFile_Str(dir + "scaling_cur_freq");
            String scMin = readFirstLineFromSystemFile_Str(dir + "scaling_min_freq");
            String scMax = readFirstLineFromSystemFile_Str(dir + "scaling_max_freq");
            if (ciCur.length() > 0 || ciMin.length() > 0 || ciMax.length() > 0 || scCur.length() > 0 || scMin.length() > 0 || scMax.length() > 0) {
                if (ciCur.length() == 0) {
                    ciCur = "< Failed >";
                }
                if (ciMin.length() == 0) {
                    ciMin = "< Failed >";
                }
                if (ciMax.length() == 0) {
                    ciMax = "< Failed >";
                }
                if (scCur.length() == 0) {
                    scCur = "< Failed >";
                }
                if (scMin.length() == 0) {
                    scMin = "< Failed >";
                }
                if (scMax.length() == 0) {
                    scMax = "< Failed >";
                }
                res = res + String.format("CPU%d: ", Integer.valueOf(cpu)) + ciCur + " / " + ciMin + " / " + ciMax + " // " + scCur + " / " + scMin + " / " + scMax + "\n";
            }
        }
        return res;
    }

    public static String enumTelephonyManagerMethodNames(TelephonyManager telMgr) {
        String res = "";
        try {
            Method[] methods = Class.forName(telMgr.getClass().getName()).getMethods();
            for (int idx = 0; idx < methods.length; idx++) {
                String methName = methods[idx].toString();
                if (methName.contains("Active") || methName.contains("Count") || methName.contains("Default") || methName.contains("Ds(") || methName.contains("Dual") || methName.contains("Duos") || methName.contains("Gemini") || methName.contains("getDataActivity") || methName.contains("getDataState") || methName.contains("getDataNetworkType") || methName.contains("getNetworkCountryIso") || methName.contains("getNetworkOperator") || methName.contains("getNetworkType") || methName.contains("getPhoneType") || methName.contains("getSimOperator") || methName.contains("getSimState") || methName.contains("hasIccCard") || methName.contains("isNetworkRoaming")) {
                    res = res + methods[idx] + " declared by " + methods[idx].getDeclaringClass() + "\n";
                }
            }
        } catch (ClassNotFoundException e) {
        }
        return res;
    }

    public static String enumEthernetManagerMethodNames() {
        String res = "";
        try {
            Method[] methods = Class.forName("android.net.ethernet.EthernetManager").getMethods();
            for (int idx = 0; idx < methods.length; idx++) {
                methods[idx].toString();
                res = res + methods[idx] + " declared by " + methods[idx].getDeclaringClass() + "\n";
            }
        } catch (ClassNotFoundException e) {
        }
        return res;
    }

    public static String enumEthernetDevInfoMethodNames() {
        String res = "";
        try {
            Method[] methods = Class.forName("android.net.ethernet.EthernetDevInfo").getMethods();
            for (int idx = 0; idx < methods.length; idx++) {
                methods[idx].toString();
                res = res + methods[idx] + " declared by " + methods[idx].getDeclaringClass() + "\n";
            }
        } catch (ClassNotFoundException e) {
        }
        return res;
    }

    public static String sensorEventToStr(SensorEvent event, int tempSetting, int pressSetting) {
        switch (event.sensor.getType() & 65535) {
            case 1:
            case 9:
            case 10:
                if (event.values != null && event.values.length >= 3) {
                    float x = ((float) Math.round(event.values[0] * 10.0f)) / 10.0f;
                    float y = ((float) Math.round(event.values[1] * 10.0f)) / 10.0f;
                    float z = ((float) Math.round(event.values[2] * 10.0f)) / 10.0f;
                    Object[] objArr = new Object[6];
                    objArr[0] = x >= 0.0f ? " " : "";
                    objArr[1] = Float.valueOf(x);
                    objArr[2] = y >= 0.0f ? " " : "";
                    objArr[3] = Float.valueOf(y);
                    objArr[4] = z >= 0.0f ? " " : "";
                    objArr[5] = Float.valueOf(z);
                    return String.format("x:%s%.1f / y:%s%.1f / z:%s%.1f m/s²", objArr);
                }
            case 2:
            case 14:
                if (event.values != null && event.values.length >= 3) {
                    float x2 = ((float) Math.round(event.values[0] * 10.0f)) / 10.0f;
                    float y2 = ((float) Math.round(event.values[1] * 10.0f)) / 10.0f;
                    float z2 = ((float) Math.round(event.values[2] * 10.0f)) / 10.0f;
                    Object[] objArr2 = new Object[6];
                    objArr2[0] = x2 >= 0.0f ? " " : "";
                    objArr2[1] = Float.valueOf(x2);
                    objArr2[2] = y2 >= 0.0f ? " " : "";
                    objArr2[3] = Float.valueOf(y2);
                    objArr2[4] = z2 >= 0.0f ? " " : "";
                    objArr2[5] = Float.valueOf(z2);
                    return String.format("x:%s%.1f / y:%s%.1f / z:%s%.1f µT", objArr2);
                }
            case 3:
                if (event.values != null && event.values.length >= 3) {
                    float a = ((float) Math.round(event.values[0] * 10.0f)) / 10.0f;
                    float p = ((float) Math.round(event.values[1] * 10.0f)) / 10.0f;
                    float r = ((float) Math.round(event.values[2] * 10.0f)) / 10.0f;
                    Object[] objArr3 = new Object[6];
                    objArr3[0] = a >= 0.0f ? " " : "";
                    objArr3[1] = Float.valueOf(a);
                    objArr3[2] = p >= 0.0f ? " " : "";
                    objArr3[3] = Float.valueOf(p);
                    objArr3[4] = r >= 0.0f ? " " : "";
                    objArr3[5] = Float.valueOf(r);
                    return String.format("Azimuth:%s%.1f / Pitch:%s%.1f / Roll:%s%.1f", objArr3);
                }
            case 4:
            case 16:
                if (event.values != null && event.values.length >= 3) {
                    float x3 = ((float) Math.round(event.values[0] * 10.0f)) / 10.0f;
                    float y3 = ((float) Math.round(event.values[1] * 10.0f)) / 10.0f;
                    float z3 = ((float) Math.round(event.values[2] * 10.0f)) / 10.0f;
                    Object[] objArr4 = new Object[6];
                    objArr4[0] = x3 >= 0.0f ? " " : "";
                    objArr4[1] = Float.valueOf(x3);
                    objArr4[2] = y3 >= 0.0f ? " " : "";
                    objArr4[3] = Float.valueOf(y3);
                    objArr4[4] = z3 >= 0.0f ? " " : "";
                    objArr4[5] = Float.valueOf(z3);
                    return String.format("x:%s%.1f / y:%s%.1f / z:%s%.1f rad/s", objArr4);
                }
            case 5:
                if (event.values != null && event.values.length >= 1) {
                    return String.format("%.1f lux", Float.valueOf(((float) Math.round(event.values[0] * 10.0f)) / 10.0f));
                }
            case 6:
                if (event.values != null && event.values.length >= 1) {
                    return pressureToStr(event.values[0], pressSetting);
                }
            case 7:
            case 13:
                if (event.values != null && event.values.length >= 1) {
                    return tempToStr(event.values[0], tempSetting);
                }
            case 8:
                if (event.values != null && event.values.length >= 1) {
                    return String.format("%.1f cm", Float.valueOf(((float) Math.round(event.values[0] * 10.0f)) / 10.0f));
                }
            case 11:
            case 15:
            case 20:
                if (event.values != null && event.values.length >= 3) {
                    float x4 = ((float) Math.round(event.values[0] * 10.0f)) / 10.0f;
                    float y4 = ((float) Math.round(event.values[1] * 10.0f)) / 10.0f;
                    float z4 = ((float) Math.round(event.values[2] * 10.0f)) / 10.0f;
                    Object[] objArr5 = new Object[6];
                    objArr5[0] = x4 >= 0.0f ? " " : "";
                    objArr5[1] = Float.valueOf(x4);
                    objArr5[2] = y4 >= 0.0f ? " " : "";
                    objArr5[3] = Float.valueOf(y4);
                    objArr5[4] = z4 >= 0.0f ? " " : "";
                    objArr5[5] = Float.valueOf(z4);
                    return String.format("x:%s%.1f / y:%s%.1f / z:%s%.1f", objArr5);
                }
            case 12:
                if (event.values != null && event.values.length >= 1) {
                    return String.format("%.1f%%", Float.valueOf(((float) Math.round(event.values[0] * 10.0f)) / 10.0f));
                }
            case 17:
            case 18:
            case 22:
            case 23:
            case 24:
            case 25:
                return "detected";
            case 19:
                if (event.values != null && event.values.length >= 1) {
                    return String.format("%d steps", Integer.valueOf(Math.round(event.values[0])));
                }
            case 21:
                if (event.values != null && event.values.length >= 1) {
                    return String.format("%d bpm", Integer.valueOf(Math.round(event.values[0])));
                }
        }
        return "";
    }

    public static String decodeLCDType(int lcdTyp) {
        switch (lcdTyp) {
            case 1:
                return "TFT";
            case 2:
                return "PLS TFT";
            case 3:
                return "Super PLS TFT";
            case 4:
                return "ASV";
            case 5:
                return "IGZO";
            case 6:
                return "IPS LCD";
            case 7:
                return "IPS Plus LCD";
            case 8:
                return "LTPS LCD";
            case 9:
                return "Super IPS";
            case 10:
                return "Super IPS+ LCD";
            case 11:
                return "AH-IPS";
            case 12:
                return "HD-IPS";
            case 13:
                return "JDI IPS";
            case 14:
                return "True HD-IPS";
            case 15:
                return "True Full HD IPS+";
            case 16:
                return "Super Clear LCD";
            case 17:
                return "S-LCD";
            case 18:
                return "Super LCD2";
            case 19:
                return "Super LCD3";
            case 20:
                return "3D LCD";
            case 21:
                return "3D IPS LCD";
            case 22:
                return "OLED";
            case 23:
                return "AMOLED";
            case 24:
                return "Super AMOLED";
            case 25:
                return "Super AMOLED Plus";
            case 26:
                return "P-OLED";
            case 27:
                return "Curved P-OLED";
            case 28:
                return "Curved Super AMOLED";
            case 29:
                return "Super Flexible AMOLED";
            case 30:
                return "E Ink";
            case 31:
                return "MVA";
            default:
                return null;
        }
    }

    public static String decodeRAMType(int ramTyp) {
        switch (ramTyp) {
            case 1:
                return "DDR3L";
            case 2:
                return "DDR3L-1866";
            case 3:
                return "DDR3L-RS";
            case 4:
                return "DDR3L-RS-1333";
            case 5:
                return "LPDDR1";
            case 6:
                return "LPDDR2";
            case 7:
                return "LPDDR3";
            case 8:
                return "LPDDR3-1066";
            case 9:
                return "LPDDR3-1600";
            case 10:
                return "LPDDR4";
            default:
                return null;
        }
    }

    private static String batCap(int batCap, int devTyp) {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        sysInfoST.DB_Battery_Capacity = batCap;
        sysInfoST.DB_Device_Type = devTyp;
        return "";
    }

    private static String batCap(int batCap, int devTyp, int lcdTyp, int lcdRes, float lcdDiag) {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        sysInfoST.DB_Battery_Capacity = batCap;
        sysInfoST.DB_Device_Type = devTyp;
        sysInfoST.DB_LCD_Type = lcdTyp;
        sysInfoST.DB_LCD_Res = lcdRes;
        sysInfoST.DB_LCD_Diagonal = lcdDiag;
        return "";
    }

    private static String batCap(int batCap, int devTyp, int lcdTyp, int lcdRes, float lcdDiag, int ramTyp) {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        sysInfoST.DB_Battery_Capacity = batCap;
        sysInfoST.DB_Device_Type = devTyp;
        sysInfoST.DB_LCD_Type = lcdTyp;
        sysInfoST.DB_LCD_Res = lcdRes;
        sysInfoST.DB_LCD_Diagonal = lcdDiag;
        sysInfoST.DB_RAM_Type = ramTyp;
        return "";
    }

    private static int getDevManufacturer() {
        String manuf = build_Manufacturer().toUpperCase();
        String brand = Build.BRAND.trim().toUpperCase();
        String displ = Build.DISPLAY.trim().toUpperCase();
        if (isAndroidEmulator()) {
            return 1;
        }
        if (brand.equals("AINOL") || manuf.equals("AINOL")) {
            return DEVMANUF_AINOL;
        }
        if (brand.equals("COLORFLY") || manuf.equals("COLORFLY")) {
            return 103;
        }
        if (brand.equals("COOLPAD") || manuf.equals("COOLPAD")) {
            return 81;
        }
        if (brand.equals("CUBIEBOARD") || manuf.equals("CUBIEBOARD")) {
            return DEVMANUF_CUBIEBOARD;
        }
        if (brand.equals("CUBOT") || manuf.equals("CUBOT")) {
            return 13;
        }
        if (brand.equals("DEXP") || manuf.equals("DEXP")) {
            return 76;
        }
        if (brand.equals("DOOGEE") || manuf.equals("DOOGEE") || displ.startsWith("DOOGEE-")) {
            return 14;
        }
        if (brand.equals("FLY") || manuf.equals("FLY")) {
            return 15;
        }
        if (brand.equals("GIGASET") || manuf.equals("GIGASET")) {
            return DEVMANUF_GIGASET;
        }
        if (brand.equals("HAIER") || manuf.equals("HAIER")) {
            return DEVMANUF_HAIER;
        }
        if (brand.equals("HUAWEI") || manuf.equals("HUAWEI")) {
            return 21;
        }
        if (brand.equals("I-MOBILE") || manuf.equals("I-MOBILE")) {
            return DEVMANUF_IMOBILE;
        }
        if (brand.equals("INEW") || manuf.equals("INEW")) {
            return 99;
        }
        if (brand.equals("IOCEAN") || manuf.equals("IOCEAN")) {
            return 23;
        }
        if (brand.equals("I.ONIK") || manuf.equals("I.ONIK")) {
            return DEVMANUF_IONIK;
        }
        if (brand.equals("JOLLA") || manuf.equals("JOLLA")) {
            return DEVMANUF_JOLLA;
        }
        if (brand.equals("JIAYU") || brand.equals("JYT") || manuf.equals("JIAYU") || manuf.equals("JYT")) {
            return 24;
        }
        if (brand.equals("KENEKSI") || manuf.equals("KENEKSI")) {
            return 2;
        }
        if (brand.equals("KOMU") || manuf.equals("KOMU")) {
            return 3;
        }
        if (brand.equals("LAVA") || manuf.equals("LAVA") || displ.startsWith("LAVA_")) {
            return DEVMANUF_LAVA;
        }
        if (brand.equals("MEDION") || manuf.equals("MEDION")) {
            return DEVMANUF_MEDION;
        }
        if (brand.equals("MIJUE") || manuf.equals("MIJUE")) {
            return DEVMANUF_MIJUE;
        }
        if (brand.equals("ONDA") || manuf.equals("ONDA")) {
            return 66;
        }
        if (brand.equals("OP3NDOTT") || manuf.equals("OP3NDOTT")) {
            return 88;
        }
        if (brand.equals("PIPO") || manuf.equals("PIPO")) {
            return 65;
        }
        if (brand.equals("PRESTIGIO") || manuf.equals("PRESTIGIO")) {
            return 44;
        }
        if (brand.equals("RCA") || manuf.equals("RCA")) {
            return 4;
        }
        if (brand.equals("SAMSUNG") || manuf.equals("SAMSUNG")) {
            return 45;
        }
        if (brand.equals("SIM-AREN") || manuf.equals("SIM-AREN")) {
            return DEVMANUF_SIM_AREN;
        }
        if (brand.equals("TTEM") || manuf.equals("TTEM")) {
            return DEVMANUF_TTEM;
        }
        if (brand.equals("UHAPPY") || manuf.equals("UHAPPY")) {
            return DEVMANUF_UHAPPY;
        }
        if (brand.equals("ULEFONE") || manuf.equals("ULEFONE")) {
            return DEVMANUF_ULEFONE;
        }
        if (brand.equals("VIEWSONIC") || manuf.equals("VIEWSONIC")) {
            return DEVMANUF_VIEWSONIC;
        }
        if (brand.equals("WIKO") || manuf.equals("WIKO")) {
            return 71;
        }
        if (brand.equals("YONESTOPTECH") || manuf.equals("YONESTOPTECH")) {
            return DEVMANUF_YONESTOPTECH;
        }
        if (manuf.equals("SOFTWINNER") && brand.equals("ALLWINNER")) {
            return 90;
        }
        if (manuf.equals("ACER")) {
            return 5;
        }
        if (manuf.equals("ACTIONS")) {
            return DEVMANUF_ACTIONS;
        }
        if (manuf.equals("ALCATEL")) {
            return 62;
        }
        if (manuf.equals("ALLVIEW")) {
            return 6;
        }
        if (manuf.equals("AMAZON")) {
            return 68;
        }
        if (manuf.equals("AMPE")) {
            return 108;
        }
        if (manuf.equals("ANYCOOL")) {
            return 105;
        }
        if (manuf.equals("ARCHOS")) {
            return 130;
        }
        if (manuf.equals("ASSISTANT")) {
            return DEVMANUF_ASSISTANT;
        }
        if (manuf.equals("ASUS")) {
            return 7;
        }
        if (manuf.equals("ATONGM")) {
            return DEVMANUF_ATONGM;
        }
        if (manuf.equals("AXGIO")) {
            return DEVMANUF_AXGIO;
        }
        if (manuf.equals("BEELINE")) {
            return DEVMANUF_BEELINE;
        }
        if (manuf.equals("BL")) {
            return DEVMANUF_BL;
        }
        if (manuf.equals("BLACKBERRY") || manuf.equals("RIM")) {
            return 8;
        }
        if (manuf.equals("BLACKVIEW")) {
            return 9;
        }
        if (manuf.equals("BLAUPUNKT")) {
            return DEVMANUF_BLAUPUNKT;
        }
        if (manuf.equals("BLU")) {
            return 10;
        }
        if (manuf.equals("BLUEGO")) {
            return DEVMANUF_BLUEGO;
        }
        if (manuf.equals("BN LLC")) {
            return DEVMANUF_BN;
        }
        if (manuf.equals("BQ")) {
            return 102;
        }
        if (manuf.equals("CASIO")) {
            return DEVMANUF_CASIO;
        }
        if (manuf.equals("CAT")) {
            return 60;
        }
        if (manuf.equals("CELKON")) {
            return DEVMANUF_CELKON;
        }
        if (manuf.equals("CHERRY") || manuf.equals("CHERRYMOBILE") || manuf.equals("CHERRY MOBILE")) {
            return 11;
        }
        if (manuf.equals("CHUWI")) {
            return DEVMANUF_CHUWI;
        }
        if (manuf.equals("CKK") || manuf.equals("CKKMOBILE")) {
            return 127;
        }
        if (manuf.equals("CLOUDFONE")) {
            return 12;
        }
        if (manuf.equals("CONCORDE") || manuf.startsWith("CONCORDE ")) {
            return 61;
        }
        if (manuf.equals("CUBE")) {
            return 107;
        }
        if (manuf.equals("DELL")) {
            return 72;
        }
        if (manuf.equals("DIGMA")) {
            return DEVMANUF_DIGMA;
        }
        if (manuf.equals("DNS")) {
            return DEVMANUF_DNS;
        }
        if (manuf.equals("DPS")) {
            return DEVMANUF_DPS;
        }
        if (manuf.equals("DTC")) {
            return 63;
        }
        if (manuf.equals("ECOO")) {
            return DEVMANUF_ECOO;
        }
        if (manuf.equals("ECS")) {
            return DEVMANUF_ECS;
        }
        if (manuf.equals("ELEPHONE")) {
            return 83;
        }
        if (manuf.equals("ENERGY_SISTEM")) {
            return 95;
        }
        if (manuf.equals("ESCORT")) {
            return DEVMANUF_ESCORT;
        }
        if (manuf.equals("EXPLAY")) {
            return 100;
        }
        if (manuf.equals("FAEA")) {
            return 93;
        }
        if (manuf.equals("FREELANDER")) {
            return 82;
        }
        if (manuf.equals("G")) {
            return DEVMANUF_G;
        }
        if (manuf.equals("G+")) {
            return DEVMANUF_GPLUS;
        }
        if (manuf.equals("GIGABYTE") || manuf.equals("GSMART")) {
            return 16;
        }
        if (manuf.equals("GIONEE")) {
            return 17;
        }
        if (manuf.equals("GOCLEVER")) {
            return DEVMANUF_GOCLEVER;
        }
        if (manuf.equals("HAIPAI")) {
            return 73;
        }
        if (manuf.startsWith("HARDKERNEL")) {
            return 18;
        }
        if (manuf.equals("HEWLETT-PACKARD")) {
            return DEVMANUF_HP;
        }
        if (manuf.equals("HIGHSCREEN")) {
            return DEVMANUF_HIGHSCREEN;
        }
        if (manuf.equals("HIMAX")) {
            return DEVMANUF_HIMAX;
        }
        if (manuf.equals("HISENSE")) {
            return 19;
        }
        if (manuf.equals("HTM")) {
            return 101;
        }
        if (manuf.equals("HTC")) {
            return 20;
        }
        if (manuf.equals("I-JOY")) {
            return 109;
        }
        if (manuf.equals("IMPRESSION")) {
            return 104;
        }
        if (manuf.equals("INFOCUS")) {
            return 22;
        }
        if (manuf.equals("INHON")) {
            return 69;
        }
        if (manuf.equals("INNOS")) {
            return 126;
        }
        if (manuf.equals("IRBIS")) {
            return DEVMANUF_IRBIS;
        }
        if (manuf.equals("IRU")) {
            return DEVMANUF_IRU;
        }
        if (manuf.equals("IRULU")) {
            return DEVMANUF_IRULU;
        }
        if (manuf.equals("JUST5")) {
            return DEVMANUF_JUST5;
        }
        if (manuf.equals("KARBONN")) {
            return 25;
        }
        if (manuf.equals("KAZAM")) {
            return 26;
        }
        if (manuf.equals("KATA") || displ.startsWith("HK.KATA.")) {
            return 27;
        }
        if (manuf.equals("KIANO")) {
            return 70;
        }
        if (manuf.equals("KINGELON")) {
            return DEVMANUF_KINGELON;
        }
        if (manuf.equals("KINGSING")) {
            return 96;
        }
        if (manuf.equals("KINGTOP")) {
            return DEVMANUF_KINGTOP;
        }
        if (manuf.equals("KINGZONE")) {
            return 97;
        }
        if (manuf.equals("KNC")) {
            return DEVMANUF_KNC;
        }
        if (manuf.equals("KYOCERA")) {
            return 78;
        }
        if (manuf.equals("LANDVO")) {
            return DEVMANUF_LANDVO;
        }
        if (manuf.equals("LANIX")) {
            return 131;
        }
        if (manuf.equals("LARK")) {
            return DEVMANUF_LARK;
        }
        if (manuf.equals("LEADER")) {
            return DEVMANUF_LEADER;
        }
        if (manuf.equals("LEAGOO")) {
            return 28;
        }
        if (manuf.equals("LENOVO")) {
            return 29;
        }
        if (manuf.equals("LETV")) {
            return DEVMANUF_LETV;
        }
        if (manuf.equals("LGE")) {
            return 30;
        }
        if (manuf.equals("MEDIACOM")) {
            return DEVMANUF_MEDIACOM;
        }
        if (manuf.equals("MEIZU")) {
            return 31;
        }
        if (manuf.equals("MELE")) {
            return 64;
        }
        if (manuf.equals("MICROMAX")) {
            return 91;
        }
        if (manuf.equals("MINIX")) {
            return 32;
        }
        if (manuf.equals("MLAIS")) {
            return DEVMANUF_MLAIS;
        }
        if (manuf.equals("MOTOROLA") || manuf.equals("MOTO")) {
            return 33;
        }
        if (manuf.equals("MPIE")) {
            return 128;
        }
        if (manuf.equals("MSI")) {
            return 92;
        }
        if (manuf.equals("MTC")) {
            return 80;
        }
        if (manuf.equals("MYPHONE")) {
            return 34;
        }
        if (manuf.equals("MWG")) {
            return 35;
        }
        if (manuf.equals("NAVCITY")) {
            return DEVMANUF_NAVCITY;
        }
        if (manuf.equals("NAVON")) {
            return DEVMANUF_NAVON;
        }
        if (manuf.equals("NO.1")) {
            return 36;
        }
        if (manuf.equals("NOKIA")) {
            return 37;
        }
        if (manuf.equals("NVIDIA")) {
            return 38;
        }
        if (manuf.equals("NYX")) {
            return DEVMANUF_NYX;
        }
        if (manuf.equals("ODYS")) {
            return DEVMANUF_ODYS;
        }
        if (manuf.equals("OPLUS")) {
            return 39;
        }
        if (manuf.equals("ONEPLUS")) {
            return 40;
        }
        if (manuf.equals("OPPO")) {
            return 41;
        }
        if (manuf.equals("ORANGE")) {
            return DEVMANUF_ORANGE;
        }
        if (manuf.equals("OUKITEL")) {
            return DEVMANUF_OUKITEL;
        }
        if (manuf.equals("OVERMAX")) {
            return DEVMANUF_OVERMAX;
        }
        if (manuf.equals("PANTECH")) {
            return 42;
        }
        if (manuf.equals("PHICOMM")) {
            return DEVMANUF_PHICOMM;
        }
        if (manuf.equals("PHILIPS")) {
            return 43;
        }
        if (manuf.equals("POMP")) {
            return DEVMANUF_POMP;
        }
        if (manuf.equals("POV")) {
            return 85;
        }
        if (manuf.equals("QBEX")) {
            return DEVMANUF_QBEX;
        }
        if (manuf.equals("QMOBILE") || manuf.equals("LINQ")) {
            return DEVMANUF_QMOBILE;
        }
        if (manuf.equals("REKAM")) {
            return DEVMANUF_REKAM;
        }
        if (manuf.equals("RIKOMAGIC")) {
            return DEVMANUF_RIKOMAGIC;
        }
        if (manuf.equals("SHARP")) {
            return 87;
        }
        if (manuf.equals("SKK") || manuf.equals("SKKMOBILE")) {
            return 46;
        }
        if (manuf.equals("SONY")) {
            return 47;
        }
        if (manuf.equals("SONY ERICSSON") || manuf.equals("SEMC")) {
            return 48;
        }
        if (manuf.equals("STARWAY")) {
            return DEVMANUF_STARWAY;
        }
        if (manuf.equals("STOREX") || manuf.equals("EZEE")) {
            return DEVMANUF_STOREX;
        }
        if (manuf.equals("SUPRA")) {
            return DEVMANUF_SUPRA;
        }
        if (manuf.equals("TABLET EXPRESS")) {
            return 106;
        }
        if (manuf.equals("TECLAST")) {
            return 49;
        }
        if (manuf.equals("TEXET")) {
            return 74;
        }
        if (manuf.equals("THL")) {
            return 50;
        }
        if (manuf.equals("TORQUE")) {
            return 51;
        }
        if (manuf.equals("TOSHIBA")) {
            return DEVMANUF_TOSHIBA;
        }
        if (manuf.equals("TREKSTOR")) {
            return DEVMANUF_TREKSTOR;
        }
        if (manuf.equals("TRONFY")) {
            return DEVMANUF_TRONFY;
        }
        if (manuf.equals("UMI")) {
            return 52;
        }
        if (manuf.equals("UTOK")) {
            return 94;
        }
        if (manuf.equals("VEGA")) {
            return DEVMANUF_VEGA;
        }
        if (manuf.startsWith("VERYKOOL")) {
            return DEVMANUF_VERYKOOL;
        }
        if (manuf.equals("VESTEL")) {
            return 77;
        }
        if (manuf.equals("VIDEOCON")) {
            return DEVMANUF_VIDEOCON;
        }
        if (manuf.equals("VIVAX")) {
            return 67;
        }
        if (manuf.equals("VIVO")) {
            return DEVMANUF_VIVO;
        }
        if (manuf.equals("VKWORLD")) {
            return DEVMANUF_VKWORLD;
        }
        if (manuf.equals("VODAFONE")) {
            return 89;
        }
        if (manuf.equals("VPHONE")) {
            return 53;
        }
        if (manuf.equals("WAYTEQ")) {
            return 54;
        }
        if (manuf.equals("WEXLER")) {
            return 75;
        }
        if (manuf.equals("XIAOMI")) {
            return 55;
        }
        if (manuf.equals("XOLO")) {
            return 79;
        }
        if (manuf.equals("YARVIK")) {
            return 56;
        }
        if (manuf.startsWith("YOTA ") || brand.equals("YOTAPHONE")) {
            return 57;
        }
        if (manuf.equals("YU")) {
            return DEVMANUF_YU;
        }
        if (manuf.equals("YUNTAB")) {
            return DEVMANUF_YUNTAB;
        }
        if (manuf.equals("ZEEPAD")) {
            return 124;
        }
        if (manuf.equals("ZIDOO")) {
            return 86;
        }
        if (manuf.equals("ZIFRO")) {
            return 84;
        }
        if (manuf.equals("ZONDA")) {
            return DEVMANUF_ZONDA;
        }
        if (manuf.equals("ZOPO") || manuf.equals("ZWX") || brand.equals("ZOPO")) {
            return 58;
        }
        if (manuf.equals("ZTE") || manuf.equals("NUBIA")) {
            return 59;
        }
        if (manuf.equals("ZUK")) {
            return DEVMANUF_ZUK;
        }
        if (manuf.equals("ALPS")) {
            String mdl = Build.MODEL.trim().toUpperCase();
            if (mdl.startsWith("CHERRY ")) {
                return 11;
            }
            if (mdl.startsWith("CUBOT ") || mdl.equals("A880")) {
                return 13;
            }
            if (mdl.startsWith("KIANO ")) {
                return 70;
            }
            if (mdl.startsWith("KINGTOP")) {
                return DEVMANUF_KINGTOP;
            }
            if (mdl.startsWith("KINGZONE ")) {
                return 97;
            }
            if (mdl.startsWith("THL")) {
                return 50;
            }
            if (mdl.equals("CENTAUR") || mdl.equals("CHROME") || mdl.equals("CYCLOPS II") || mdl.equals("GLIMPSE 2") || mdl.equals("MARIAN_S1") || mdl.equals("MARIAN TAB") || mdl.equals("MARIAN V1") || mdl.equals("PHOENIX TAB 4") || mdl.equals("PLATINUM") || mdl.equals("TITANIUM") || mdl.equals("WIND")) {
                return 46;
            }
            if (mdl.startsWith("UMI ") || mdl.equals("X2")) {
                return 52;
            }
            if (mdl.equals("HM NOTE 1W")) {
                return 55;
            }
            if (mdl.equals("S5 QUAD CORE")) {
                return 73;
            }
            if (mdl.equals("H100")) {
                return 101;
            }
            if (mdl.equals("E1911_V77_GQ2000_A41_6628_V20")) {
                return DEVMANUF_ULEFONE;
            }
            if (mdl.equals("709_V92_JBLA858")) {
                return DEVMANUF_KINGELON;
            }
            if (mdl.equals("S5500")) {
                return 61;
            }
            if (mdl.equals("QBA757")) {
                return DEVMANUF_QBEX;
            }
            if (mdl.equals("MD706")) {
                return DEVMANUF_KNC;
            }
            if (mdl.equals("G559T")) {
                return DEVMANUF_BLUEGO;
            }
            if (mdl.startsWith("SUPRA")) {
                return DEVMANUF_SUPRA;
            }
            if (mdl.startsWith("NYX_")) {
                return DEVMANUF_NYX;
            }
        } else if (manuf.equals("ANDROID")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("GOCLEVER ")) {
                return DEVMANUF_GOCLEVER;
            }
        } else if (manuf.equals("AOSBIS")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("PMP")) {
                return 44;
            }
        } else if (manuf.equals("BBK")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("VIVO ")) {
                return DEVMANUF_VIVO;
            }
        } else if (manuf.equals("BIRD")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("CONCORDE")) {
                return 61;
            }
        } else if (manuf.equals("COMPAL")) {
            String mdl2 = Build.MODEL.trim().toUpperCase();
            if (mdl2.equals("B15") || mdl2.equals("B15Q") || mdl2.equals("S50")) {
                return 60;
            }
        } else if (manuf.equals("CXQ")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("CONCORDE")) {
                return 61;
            }
        } else if (manuf.equals("ENSPERT")) {
            if (Build.BOARD.trim().toUpperCase().equals("WIKI")) {
                return 71;
            }
        } else if (manuf.equals("INTEL")) {
            if (Build.MODEL.trim().toUpperCase().equals("W032I-C3")) {
                return 88;
            }
        } else if (manuf.startsWith("MSTAR ")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("ZIDOO_")) {
                return 86;
            }
        } else if (manuf.equals("NAVIGATOR")) {
            String mdl3 = Build.MODEL.trim().toUpperCase();
            if (mdl3.startsWith("IMPAD ") || mdl3.startsWith("IMPAD-") || mdl3.startsWith("IMPAD_")) {
                return 104;
            }
        } else if (manuf.equals("NETXEON")) {
            if (Build.MODEL.trim().toUpperCase().equals("MXIV TELOS")) {
                return DEVMANUF_TRONFY;
            }
        } else if (manuf.equals("NV")) {
            String mdl4 = Build.MODEL.trim().toUpperCase();
            if (mdl4.startsWith("IMPAD ") || mdl4.startsWith("IMPAD-") || mdl4.startsWith("IMPAD_")) {
                return 104;
            }
        } else if (manuf.equals("OBREEY")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("POCKETBOOK")) {
                return DEVMANUF_POCKETBOOK;
            }
        } else if (manuf.equals("OUSHENG")) {
            if (Build.MODEL.trim().toUpperCase().equals("G7")) {
                return 23;
            }
        } else if (manuf.equals("SPRD")) {
            if (Build.BOARD.trim().toUpperCase().contains("_ZONDA_")) {
                return DEVMANUF_ZONDA;
            }
        } else if (manuf.equals("TCL")) {
            String mdl5 = Build.MODEL.trim().toUpperCase();
            if (mdl5.startsWith("ALCATEL") || mdl5.startsWith("4003") || mdl5.startsWith("4008") || mdl5.startsWith("4009") || mdl5.startsWith("4013") || mdl5.startsWith("4014") || mdl5.startsWith("4015") || mdl5.startsWith("4016") || mdl5.startsWith("4018") || mdl5.startsWith("4022") || mdl5.startsWith("4023") || mdl5.startsWith("4027") || mdl5.startsWith("4028") || mdl5.startsWith("4030") || mdl5.startsWith("4032") || mdl5.startsWith("4033") || mdl5.startsWith("4035") || mdl5.startsWith("4036") || mdl5.startsWith("4037") || mdl5.startsWith("4045") || mdl5.startsWith("4050") || mdl5.startsWith("5015") || mdl5.startsWith("5016") || mdl5.startsWith("5017") || mdl5.startsWith("5036") || mdl5.startsWith("5037") || mdl5.startsWith("5038") || mdl5.startsWith("5042") || mdl5.startsWith("5050") || mdl5.startsWith("5065") || mdl5.startsWith("6012") || mdl5.startsWith("6016") || mdl5.startsWith("6030") || mdl5.startsWith("6032") || mdl5.startsWith("6033") || mdl5.startsWith("6036") || mdl5.startsWith("6037") || mdl5.startsWith("6039") || mdl5.startsWith("6040") || mdl5.startsWith("6042") || mdl5.startsWith("6043") || mdl5.startsWith("6045") || mdl5.startsWith("6050") || mdl5.startsWith("7040") || mdl5.startsWith("7043") || mdl5.startsWith("7044") || mdl5.startsWith("7045") || mdl5.startsWith("7049") || mdl5.startsWith("7050") || mdl5.startsWith("7055") || mdl5.startsWith("8020") || mdl5.startsWith("8030")) {
                return 62;
            }
            return DEVMANUF_TCL;
        } else if (manuf.equals("TCT")) {
            String mdl6 = Build.MODEL.trim().toUpperCase();
            String dev = Build.DEVICE.trim().toUpperCase();
            String prod = Build.PRODUCT.trim().toUpperCase();
            if (mdl6.startsWith("ALCATEL") || mdl6.startsWith("ONE TOUCH ") || dev.startsWith("ONE_TOUCH_") || prod.startsWith("ONE_TOUCH_") || mdl6.startsWith("4032")) {
                return 62;
            }
            if (mdl6.startsWith("MTC")) {
                return 80;
            }
            if (mdl6.startsWith("VODAFONE")) {
                return 89;
            }
        } else if (manuf.equals("VOTO")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("UMI ")) {
                return 52;
            }
        } else if (manuf.equals("WITTIS")) {
            if (Build.MODEL.trim().toUpperCase().startsWith("GT")) {
                return 63;
            }
        } else if (manuf.equals("ROCKCHIP")) {
            String mdl7 = Build.MODEL.trim().toUpperCase();
            String prod2 = Build.PRODUCT.trim().toUpperCase();
            if (mdl7.startsWith("CONCORDE")) {
                return 61;
            }
            if (mdl7.startsWith("PIPO")) {
                return 65;
            }
            if (mdl7.equals("ES702") && prod2.equals("ES702")) {
                return DEVMANUF_ESCORT;
            }
            if (mdl7.equals("OV-BASICTABII")) {
                return DEVMANUF_OVERMAX;
            }
            if (mdl7.equals("PC1038")) {
                return 11;
            }
            if (mdl7.equals("P9") && prod2.equals("RK3288")) {
                return 65;
            }
            if (mdl7.equals("3G910RQ") && prod2.equals("RK31SDK")) {
                return DEVMANUF_REKAM;
            }
            if (mdl7.startsWith("SUPRA")) {
                return DEVMANUF_SUPRA;
            }
            if (mdl7.startsWith("RKM ")) {
                return DEVMANUF_RIKOMAGIC;
            }
        } else {
            String brd = Build.BOARD.trim().toUpperCase();
            String mdl8 = Build.MODEL.trim().toUpperCase();
            if (manuf.startsWith("IXION") && mdl8.startsWith("IXION")) {
                return 76;
            }
            if (manuf.startsWith("DIGITALZONE") && mdl8.startsWith("MELE ")) {
                return 64;
            }
            if (manuf.equals("GLIMPSE") && mdl8.startsWith("GLIMPSE")) {
                return 46;
            }
            if (manuf.equals("V3") && mdl8.equals("VIPER")) {
                return 46;
            }
            if (manuf.equals("YTONE") && mdl8.equals("MIRAGE_S1")) {
                return 46;
            }
            if (manuf.equals("IDXQ5") && mdl8.equals("IDXQ5")) {
                return DEVMANUF_DIGMA;
            }
            if (manuf.equals("DASH MUSIC JR") && mdl8.equals("DASHMUSICJR")) {
                return 10;
            }
            if (brd.equals("K12_MA975M8_B") && mdl8.startsWith("ONDA ")) {
                return 66;
            }
            if (brand.equals("XKP") && mdl8.equals("TPC-7151")) {
                return 67;
            }
            if (brd.equals("EXDROID") && mdl8.equals("NT-1711")) {
                return DEVMANUF_NAVCITY;
            }
            if (brd.equals("EXDROID") && mdl8.startsWith("ZT-7800")) {
                return 84;
            }
            if (brd.equals("NUCLEAR") && mdl8.equals("DPS DREAM 7")) {
                return DEVMANUF_DPS;
            }
            if (brd.equals("WING") && (mdl8.startsWith("IMPAD ") || mdl8.startsWith("IMPAD-") || mdl8.startsWith("IMPAD_"))) {
                return 104;
            }
            if (mdl8.startsWith("POV_TAB")) {
                return 85;
            }
            if (manuf.equals("M1") && mdl8.equals("M1") && brd.equals("ANDROID_4X_WET_KK")) {
                return 98;
            }
            if (manuf.equals("DEVICE") && mdl8.equals("GOLF") && brd.equals("GOLF")) {
                return 100;
            }
            if (manuf.equals("W502") && mdl8.equals("W502") && brd.equals("YK828_V10_EMMC")) {
                return 105;
            }
            if (manuf.equals("M402") && mdl8.equals("M402") && brd.equals("SIGNAL82_WET_KK")) {
                return DEVMANUF_NAVON;
            }
            if (manuf.equals("ECCOOQTIUM") && mdl8.equals("ECCOOQTIUM")) {
                return 109;
            }
            if (mdl8.equals("GM10_XYL") && brand.equals("GM10_XYL")) {
                return DEVMANUF_LEADER;
            }
            if (manuf.equals("QUATTOR 7") && mdl8.equals("OV-QUATTOR 7")) {
                return DEVMANUF_OVERMAX;
            }
            if (brand.equals("ALLWINNER-TABLET") && mdl8.equals("Q8H")) {
                return 90;
            }
            if (brand.equals("ALLWINNER-TABLET") && mdl8.startsWith("YUNTAB_")) {
                return DEVMANUF_YUNTAB;
            }
            if (brand.equals("WORRYFREE GADGETS") && mdl8.startsWith("ZEEPAD")) {
                return 124;
            }
            if (!brand.equals("HBD") || !mdl8.startsWith("VEGA ")) {
                return 0;
            }
            return DEVMANUF_VEGA;
        }
        return 0;
    }

    private static String getStrippedBuildModel(int devManuf) {
        String mdl = Build.MODEL.trim().toUpperCase();
        switch (devManuf) {
            case 2:
                if (mdl.startsWith("KENEKSI ") || mdl.startsWith("KENEKSI-") || mdl.startsWith("KENEKSI_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 7:
                if (mdl.startsWith("ASUS ") || mdl.startsWith("ASUS-") || mdl.startsWith("ASUS_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 10:
                if (mdl.startsWith("BLU ") || mdl.startsWith("BLU-") || mdl.startsWith("BLU_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case 11:
                if (mdl.startsWith("CHERRY MOBILE ")) {
                    return mdl.substring(14);
                }
                if (mdl.startsWith("CHERRYMOBILE ")) {
                    return mdl.substring(13);
                }
                if (mdl.startsWith("CHERRY ")) {
                    return mdl.substring(7);
                }
                return mdl;
            case 13:
                if (mdl.startsWith("CUBOT ") || mdl.startsWith("CUBOT-") || mdl.startsWith("CUBOT_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case 14:
                int i = mdl.indexOf(" DG");
                if (i < 0) {
                    i = mdl.indexOf("_DG");
                }
                if (i < 0) {
                    i = mdl.indexOf("-DG");
                }
                if (i >= 0) {
                    return mdl.substring(i + 1);
                }
                return mdl;
            case 17:
                if (mdl.startsWith("GIONEE ") || mdl.startsWith("GIONEE-") || mdl.startsWith("GIONEE_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case 20:
                if (mdl.startsWith("HTC ") || mdl.startsWith("HTC-") || mdl.startsWith("HTC_")) {
                    return mdl.substring(4);
                }
                if (mdl.startsWith("HTC")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 21:
                if (mdl.startsWith("HUAWEI ") || mdl.startsWith("HUAWEI-") || mdl.startsWith("HUAWEI_")) {
                    mdl = mdl.substring(7);
                }
                if (mdl.startsWith("HONOR ") || mdl.startsWith("HONOR-") || mdl.startsWith("HONOR_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case 24:
                if (mdl.startsWith("JIAYU ") || mdl.startsWith("JIAYU-") || mdl.startsWith("JIAYU_")) {
                    return mdl.substring(6);
                }
                if (mdl.startsWith("JY-")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 29:
                if (mdl.startsWith("LENOVO ") || mdl.startsWith("LENOVO-") || mdl.startsWith("LENOVO_")) {
                    mdl = mdl.substring(7);
                }
                if (mdl.endsWith("_ROW")) {
                    return mdl.substring(0, mdl.length() - 4);
                }
                return mdl;
            case 30:
                if (mdl.startsWith("LG ") || mdl.startsWith("LG-") || mdl.startsWith("LG_")) {
                    return mdl.substring(3);
                }
                if (mdl.startsWith(MANUF_LG)) {
                    return mdl.substring(2);
                }
                return mdl;
            case 34:
                if (mdl.startsWith("MYPHONE ") || mdl.startsWith("MYPHONE-") || mdl.startsWith("MYPHONE_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 35:
                if (mdl.startsWith("MWG")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 36:
                if (mdl.startsWith("NO1 ") || mdl.startsWith("NO1-") || mdl.startsWith("NO1_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case 37:
                if (mdl.startsWith("NOKIA ") || mdl.startsWith("NOKIA-") || mdl.startsWith("NOKIA_")) {
                    return mdl.substring(6);
                }
                if (mdl.startsWith("NOKIA")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 39:
                if (mdl.startsWith("O+ ") || mdl.startsWith("O+-") || mdl.startsWith("O+_")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 43:
                if (mdl.startsWith("PHILIPS ") || mdl.startsWith("PHILIPS-") || mdl.startsWith("PHILIPS_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 44:
                if (mdl.startsWith("PRESTIGIO ") || mdl.startsWith("PRESTIGIO-") || mdl.startsWith("PRESTIGIO_")) {
                    return mdl.substring(10);
                }
                return mdl;
            case 45:
                if (mdl.startsWith("SAMSUNG ") || mdl.startsWith("SAMSUNG-") || mdl.startsWith("SAMSUNG_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 50:
                if (mdl.startsWith("THL ") || mdl.startsWith("THL-") || mdl.startsWith("THL_")) {
                    return mdl.substring(4);
                }
                if (mdl.startsWith("THL")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 52:
                if (mdl.startsWith("UMI ") || mdl.startsWith("UMI-") || mdl.startsWith("UMI_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case 59:
                if (mdl.startsWith("ZTE ") || mdl.startsWith("ZTE-") || mdl.startsWith("ZTE_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case 61:
                if (mdl.startsWith("CONCORDE ") || mdl.startsWith("CONCORDE-") || mdl.startsWith("CONCORDE_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 62:
                if (mdl.startsWith("ALCATEL ONE TOUCH ")) {
                    return mdl.substring(18);
                }
                if (mdl.startsWith("ONE TOUCH ")) {
                    return mdl.substring(10);
                }
                if (mdl.startsWith("ALCATEL ") || mdl.startsWith("ALCATEL-") || mdl.startsWith("ALCATEL_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 65:
                if (mdl.startsWith("PIPO ") || mdl.startsWith("PIPO-") || mdl.startsWith("PIPO_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 66:
                if (mdl.startsWith("ONDA ") || mdl.startsWith("ONDA-") || mdl.startsWith("ONDA_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 70:
                if (mdl.startsWith("KIANO ") || mdl.startsWith("KIANO-") || mdl.startsWith("KIANO_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case 75:
                if (mdl.startsWith("WEXLER ") || mdl.startsWith("WEXLER-") || mdl.startsWith("WEXLER_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case 76:
                if (mdl.startsWith("DEXP ") || mdl.startsWith("DEXP-") || mdl.startsWith("DEXP_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 80:
                if (mdl.startsWith("MTC ") || mdl.startsWith("MTC-") || mdl.startsWith("MTC_")) {
                    return mdl.substring(4);
                }
                if (mdl.startsWith("MTC")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 81:
                if (mdl.startsWith("COOLPAD ") || mdl.startsWith("COOLPAD-") || mdl.startsWith("COOLPAD_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case 83:
                if (mdl.startsWith("ELEPHONE ") || mdl.startsWith("ELEPHONE-") || mdl.startsWith("ELEPHONE_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 85:
                if (mdl.startsWith("POV ") || mdl.startsWith("POV-") || mdl.startsWith("POV_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case 86:
                if (mdl.startsWith("ZIDOO ") || mdl.startsWith("ZIDOO-") || mdl.startsWith("ZIDOO_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case 89:
                if (mdl.startsWith("VODAFONE ") || mdl.startsWith("VODAFONE-") || mdl.startsWith("VODAFONE_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 91:
                if (mdl.startsWith("MICROMAX ") || mdl.startsWith("MICROMAX-") || mdl.startsWith("MICROMAX_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 93:
                if (mdl.startsWith("FAEA ") || mdl.startsWith("FAEA-") || mdl.startsWith("FAEA_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 94:
                if (mdl.startsWith("UTOK ") || mdl.startsWith("UTOK-") || mdl.startsWith("UTOK_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case 96:
                if (mdl.startsWith("KINGSING ") || mdl.startsWith("KINGSING-") || mdl.startsWith("KINGSING_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 97:
                if (mdl.startsWith("KINGZONE ") || mdl.startsWith("KINGZONE-") || mdl.startsWith("KINGZONE_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case 102:
                if (mdl.startsWith("BQ ") || mdl.startsWith("BQ-") || mdl.startsWith("BQ_")) {
                    return mdl.substring(3);
                }
                return mdl;
            case DEVMANUF_ECOO /*{ENCODED_INT: 112}*/:
                if (mdl.startsWith("ECOO ") || mdl.startsWith("ECOO-") || mdl.startsWith("ECOO_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case DEVMANUF_VIVO /*{ENCODED_INT: 113}*/:
                if (mdl.startsWith("VIVO ") || mdl.startsWith("VIVO-") || mdl.startsWith("VIVO_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case DEVMANUF_ORANGE /*{ENCODED_INT: 114}*/:
                if (mdl.startsWith("ORANGE ") || mdl.startsWith("ORANGE-") || mdl.startsWith("ORANGE_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case DEVMANUF_GIGASET /*{ENCODED_INT: 117}*/:
                if (mdl.startsWith("GIGASET ") || mdl.startsWith("GIGASET-") || mdl.startsWith("GIGASET_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case DEVMANUF_VERYKOOL /*{ENCODED_INT: 118}*/:
                if (mdl.startsWith("VERYKOOL ") || mdl.startsWith("VERYKOOL-") || mdl.startsWith("VERYKOOL_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case DEVMANUF_OVERMAX /*{ENCODED_INT: 120}*/:
                if (mdl.startsWith("OV ") || mdl.startsWith("OV-") || mdl.startsWith("OV_")) {
                    return mdl.substring(3);
                }
                return mdl;
            case 124:
                if (mdl.startsWith("ZEEPAD ") || mdl.startsWith("ZEEPAD-") || mdl.startsWith("ZEEPAD_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case 130:
                if (mdl.startsWith("ARCHOS ") || mdl.startsWith("ARCHOS-") || mdl.startsWith("ARCHOS_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case DEVMANUF_DPS /*{ENCODED_INT: 139}*/:
                if (mdl.startsWith("DPS ") || mdl.startsWith("DPS-") || mdl.startsWith("DPS_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case DEVMANUF_YUNTAB /*{ENCODED_INT: 143}*/:
                if (mdl.startsWith("YUNTAB ") || mdl.startsWith("YUNTAB-") || mdl.startsWith("YUNTAB_")) {
                    return mdl.substring(7);
                }
                return mdl;
            case DEVMANUF_DNS /*{ENCODED_INT: 145}*/:
                if (mdl.startsWith("DNS ") || mdl.startsWith("DNS-") || mdl.startsWith("DNS_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case DEVMANUF_KINGTOP /*{ENCODED_INT: 148}*/:
                if (mdl.startsWith("KINGTOP ") || mdl.startsWith("KINGTOP-") || mdl.startsWith("KINGTOP_")) {
                    return mdl.substring(8);
                }
                if (mdl.startsWith("KINGTOP")) {
                    return mdl.substring(7);
                }
                return mdl;
            case DEVMANUF_TCL /*{ENCODED_INT: 157}*/:
                if (mdl.startsWith("TCL ") || mdl.startsWith("TCL-") || mdl.startsWith("TCL_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case DEVMANUF_VEGA /*{ENCODED_INT: 159}*/:
                if (mdl.startsWith("VEGA ") || mdl.startsWith("VEGA-") || mdl.startsWith("VEGA_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case DEVMANUF_SUPRA /*{ENCODED_INT: 165}*/:
                if (mdl.startsWith("SUPRA ") || mdl.startsWith("SUPRA-") || mdl.startsWith("SUPRA_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case DEVMANUF_IMOBILE /*{ENCODED_INT: 166}*/:
                if (mdl.startsWith("I-MOBILE ") || mdl.startsWith("I-MOBILE-") || mdl.startsWith("I-MOBILE_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case DEVMANUF_POCKETBOOK /*{ENCODED_INT: 168}*/:
                if (mdl.startsWith("POCKETBOOK ") || mdl.startsWith("POCKETBOOK-") || mdl.startsWith("POCKETBOOK_")) {
                    return mdl.substring(11);
                }
                return mdl;
            case DEVMANUF_HIMAX /*{ENCODED_INT: 169}*/:
                if (mdl.startsWith("HIMAX ") || mdl.startsWith("HIMAX-") || mdl.startsWith("HIMAX_")) {
                    return mdl.substring(6);
                }
                return mdl;
            case DEVMANUF_HP /*{ENCODED_INT: 175}*/:
                if (mdl.startsWith("HP ") || mdl.startsWith("HP-") || mdl.startsWith("HP_")) {
                    return mdl.substring(3);
                }
                return mdl;
            case DEVMANUF_GOCLEVER /*{ENCODED_INT: 177}*/:
                if (mdl.startsWith("GOCLEVER ") || mdl.startsWith("GOCLEVER-") || mdl.startsWith("GOCLEVER_")) {
                    return mdl.substring(9);
                }
                return mdl;
            case DEVMANUF_LARK /*{ENCODED_INT: 181}*/:
                if (mdl.startsWith("LARK ") || mdl.startsWith("LARK-") || mdl.startsWith("LARK_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case DEVMANUF_POMP /*{ENCODED_INT: 186}*/:
                if (mdl.startsWith("POMP ") || mdl.startsWith("POMP-") || mdl.startsWith("POMP_")) {
                    return mdl.substring(5);
                }
                return mdl;
            case DEVMANUF_ZUK /*{ENCODED_INT: 192}*/:
                if (mdl.startsWith("ZUK ") || mdl.startsWith("ZUK-") || mdl.startsWith("ZUK_")) {
                    return mdl.substring(4);
                }
                return mdl;
            case DEVMANUF_BEELINE /*{ENCODED_INT: 193}*/:
                if (mdl.startsWith("BEELINE ") || mdl.startsWith("BEELINE-") || mdl.startsWith("BEELINE_")) {
                    return mdl.substring(8);
                }
                return mdl;
            case DEVMANUF_NYX /*{ENCODED_INT: 195}*/:
                if (mdl.startsWith("NYX ") || mdl.startsWith("NYX-") || mdl.startsWith("NYX_")) {
                    return mdl.substring(4);
                }
                if (mdl.startsWith("NYX")) {
                    return mdl.substring(3);
                }
                return mdl;
            default:
                return mdl;
        }
    }

    private static String getDevModel_Acer() {
        String mdl = getStrippedBuildModel(5);
        if (mdl.equals("A1-713")) {
            return "Iconia Tab 7 A1-713" + batCap(3400, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("A1-713HD")) {
            return "Iconia Tab 7 A1-713HD" + batCap(3400, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("A1-810")) {
            return "Iconia Tab A1-810" + batCap(4960, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("A1-811")) {
            return "Iconia Tab A1-811" + batCap(4960, 4, 1, 786432, 7.9f);
        }
        if (mdl.equals("A1-830")) {
            return "Iconia A1-830" + batCap(4000, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("A1-840")) {
            return "Iconia Tab 8 A1-840" + batCap(4600, 4, 1, 1024000, 8.0f);
        }
        if (mdl.equals("A1-840FHD")) {
            return "Iconia Tab 8 A1-840FHD" + batCap(4600, 4, 1, 2304000, 8.0f);
        }
        if (mdl.equals("A3-A10")) {
            return "Iconia Tab A3-A10" + batCap(7300, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("A3-A11")) {
            return "Iconia Tab A3-A11" + batCap(7300, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("B1-710")) {
            return "Iconia Tab B1-710" + batCap(2640, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("B1-711")) {
            return "Iconia Tab B1-711" + batCap(2640, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("B1-720")) {
            return "Iconia B1-720" + batCap(2955, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("B1-721")) {
            return "Iconia B1-721" + batCap(2955, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("B1-730")) {
            return "Iconia One 7 B1-730" + batCap(3700, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("B1-730HD")) {
            return "Iconia One 7 B1-730HD" + batCap(3700, 4, 1, 1024000, 7.0f);
        }
        if (mdl.equals("B1-750")) {
            return "Iconia One 7 B1-750" + batCap(3420, 4, 1, 1024000, 7.0f);
        }
        if (mdl.equals("B1-A71")) {
            return "Iconia Tab B1-A71" + batCap(2710, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("E39")) {
            return "Liquid E700" + batCap(3500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("E380") || mdl.equals("V380")) {
            return "Liquid E3" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("GT-810")) {
            return "Predator 8" + batCap(0, 4, 6, 2304000, 8.0f, 7);
        }
        if (mdl.equals("S56")) {
            return "Liquid Jade S" + batCap(2300, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("S57")) {
            return "Liquid Jade Z" + batCap(2300, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("S510")) {
            return "Liquid S1" + batCap(2400, 3, 1, 921600, 5.7f, 6);
        }
        if (mdl.equals("V360")) {
            return "Liquid E1" + batCap(1760, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("V370")) {
            return "Liquid E2" + batCap(2000, 1, 6, 518400, 4.5f, 6);
        }
        if (mdl.equals("Z110")) {
            return "Liquid Z1" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("Z120")) {
            return "Liquid Z2" + batCap(1300, 1, 1, 153600, 3.5f, 5);
        }
        if (mdl.equals("Z130")) {
            return "Liquid Z3" + batCap(1500, 1, 1, 153600, 3.5f, 6);
        }
        if (mdl.equals("Z140")) {
            return "Liquid Z4" + batCap(2000, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Z150")) {
            return "Liquid Z5" + batCap(2000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("Z160")) {
            return "Liquid Z4 Duo" + batCap(2000, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Z200")) {
            return "Liquid Z200" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Z205")) {
            return "Liquid Z205" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Z220")) {
            return "Liquid Z220" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Z320")) {
            return "Liquid Z320" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Z330")) {
            return "Liquid Z330" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Z410")) {
            return "Liquid Z410" + batCap(2000, 1, 6, 518400, 4.5f, 7);
        }
        if (mdl.equals("Z500")) {
            return "Liquid Z500" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("Z520")) {
            return "Liquid Z520" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("Z530")) {
            return "Liquid Z530" + batCap(2420, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Z530S")) {
            return "Liquid Z530S" + batCap(2420, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Z630")) {
            return "Liquid Z630" + batCap(4000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("Z630S")) {
            return "Liquid Z630S" + batCap(4000, 3, 6, 921600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_Actions() {
        if (getStrippedBuildModel(DEVMANUF_ACTIONS).equals("86V DEMO")) {
            return "86v Demo" + batCap(0, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Ainol() {
        if (getStrippedBuildModel(DEVMANUF_AINOL).equals("NOVO9-SPARK")) {
            return "Novo9 Spark" + batCap(SOC_TI, 4, 6, 3145728, 9.7f);
        }
        return "";
    }

    private static String getDevModel_Alcatel() {
        String mdl = getStrippedBuildModel(62);
        String dev = Build.DEVICE.trim().toUpperCase();
        String prod = Build.PRODUCT.trim().toUpperCase();
        if (mdl.equals("997D")) {
            return "One Touch 997D" + batCap(1800, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("4009M") || mdl.equals("4009X") || mdl.equals("4022X")) {
            return "Pixi 3 (3.5)" + batCap(1300, 1, 1, 153600, 3.5f, 7);
        }
        if (mdl.equals("4008A") || mdl.equals("4009A") || mdl.equals("4009F") || mdl.equals("4023A") || mdl.equals("4023X")) {
            return "Pixi 3 (3.5)" + batCap(1150, 1, 1, 153600, 3.5f, 7);
        }
        if (mdl.equals("4009D") || mdl.equals("4022D")) {
            return "Pixi 3 (3.5) Dual SIM" + batCap(1300, 1, 1, 153600, 3.5f, 7);
        }
        if (mdl.equals("4009E") || mdl.equals("4023D")) {
            return "Pixi 3 (3.5) Dual SIM" + batCap(1150, 1, 1, 153600, 3.5f, 7);
        }
        if (mdl.equals("4013X") || mdl.equals("4014X")) {
            return "Pixi 3 (4) 3G" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4003A") || mdl.equals("4013M")) {
            return "Pixi 3 (4) 3G" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4013D")) {
            return "Pixi 3 (4) 3G Dual SIM" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4013E") || mdl.equals("4013J") || mdl.equals("4013K")) {
            return "Pixi 3 (4) 3G Dual SIM" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4050A") || mdl.equals("4050X")) {
            return "Pixi 3 (4) 4G" + batCap(1650, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4050D") || mdl.equals("4050J") || mdl.equals("4050JM")) {
            return "Pixi 3 (4) 4G Dual SIM" + batCap(1650, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4027A") || mdl.equals("4027X") || mdl.equals("4028A")) {
            return "Pixi 3 (4.5) 3G" + batCap(1400, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("4027D") || mdl.equals("4027N") || mdl.equals("4028E") || mdl.equals("4028J")) {
            return "Pixi 3 (4.5) 3G Dual SIM" + batCap(1400, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("4015A") || mdl.equals("4015X") || mdl.equals("4016A")) {
            return "Pop C1" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4015D") || mdl.equals("4015N") || mdl.equals("4016D")) {
            return "Pop C1 Dual SIM" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4030A") || mdl.equals("4030X")) {
            return "S'Pop" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4030D") || mdl.equals("4030E")) {
            return "S'Pop Dual SIM" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4032A") || mdl.equals("4032X")) {
            return "Pop C2" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4032D") || mdl.equals("4032E")) {
            return "Pop C2 Dual SIM" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4033A") || mdl.equals("4033X")) {
            return "Pop C3" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4033D") || mdl.equals("4033E")) {
            return "Pop C3 Dual SIM" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("5015A") || mdl.equals("5015X") || mdl.equals("5016A")) {
            return "Pixi 3 (5) 3G" + batCap(1800, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("5015D") || mdl.equals("5015E")) {
            return "Pixi 3 (5) 3G Dual SIM" + batCap(1800, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("5017A") || mdl.equals("5017X")) {
            return "Pixi 3 (4.5) 4G" + batCap(1780, 1, 1, 409920, 4.5f, 7);
        }
        if (mdl.equals("5017D") || mdl.equals("5017E")) {
            return "Pixi 3 (4.5) 4G Dual SIM" + batCap(1780, 1, 1, 409920, 4.5f, 7);
        }
        if (mdl.equals("5036A") || mdl.equals("5036X") || mdl.equals("5037A") || mdl.equals("5037X")) {
            return "Pop C5" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("5036D") || mdl.equals("5037E")) {
            return "Pop C5 Dual SIM" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("5065A") || mdl.equals("5065W") || mdl.equals("5065X")) {
            return "Pixi 3 (5) 4G" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("5065D") || mdl.equals("5065J")) {
            return "Pixi 3 (5) 4G Dual SIM" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("6012A") || mdl.equals("6012W") || mdl.equals("6012X")) {
            return "Idol Mini" + batCap(1700, 1, 6, 409920, 4.3f);
        }
        if (mdl.equals("6012D") || mdl.equals("6012E")) {
            return "Idol Mini Dual SIM" + batCap(1700, 1, 6, 409920, 4.3f);
        }
        if (mdl.equals("6016A") || mdl.equals("6016X")) {
            return "Idol 2 Mini" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("6016D") || mdl.equals("6016E")) {
            return "Idol 2 Mini Dual SIM" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("6030") || mdl.equals("6030A") || mdl.equals("6030D") || mdl.equals("6030X")) {
            return "Idol" + batCap(1500, 1, 1, 518400, 4.7f);
        }
        if (mdl.equals("6032") || mdl.equals("6032A") || mdl.equals("6032X")) {
            return "Idol Alpha" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("6033") || mdl.equals("6033A") || mdl.equals("6033M") || mdl.equals("6033Q")) {
            return "Idol Ultra" + batCap(1800, 1, 23, 921600, 4.7f, 6);
        }
        if (mdl.equals("6034M") || mdl.equals("6034R") || mdl.equals("6034Y")) {
            return "Idol S" + batCap(2000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("6036A") || mdl.equals("6036X") || mdl.equals("6036Y")) {
            return "Idol 2 Mini S" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("6037B") || mdl.equals("6037Y")) {
            return "Idol 2" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("6037I") || mdl.equals("6037K")) {
            return "Idol 2 Dual SIM" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("6039A") || mdl.equals("6039H") || mdl.equals("6039J") || mdl.equals("6039K") || mdl.equals("6039S") || mdl.equals("6039Y")) {
            return "Idol 3 (4.7)" + batCap(2000, 1, 6, 921600, 4.7f, 7);
        }
        if (mdl.equals("6040") || mdl.equals("6040A") || mdl.equals("6040X")) {
            return "Idol X" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("6040D") || mdl.equals("6040E")) {
            return "Idol X Dual SIM" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("6042D")) {
            return "Flash" + batCap(3200, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("6043") || mdl.equals("6043A") || mdl.equals("6043X")) {
            return "Idol X+" + batCap(2500, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("6045B") || mdl.equals("6045I") || mdl.equals("6045K") || mdl.equals("6045Y")) {
            return "Idol 3 (5.5)" + batCap(2910, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("6050F") || mdl.equals("6050Y")) {
            return "Idol 2 S" + batCap(2150, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("7040A") || mdl.equals("7040F") || mdl.equals("7041X")) {
            return "Pop C7" + batCap(0, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("7040D") || mdl.equals("7040E") || mdl.equals("7041D")) {
            return "Pop C7 Dual SIM" + batCap(0, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("7040N")) {
            return "Fierce 2" + batCap(0, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("7045Y")) {
            return "Pop S7" + batCap(3000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("7049D")) {
            return "Flash 2" + batCap(3000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("7050Y")) {
            return "Pop S9" + batCap(3400, 3, 6, 921600, 5.9f);
        }
        if (mdl.equals("4045A") || mdl.equals("4045X")) {
            return "Pop 2 (4)" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4045D") || mdl.equals("4045E")) {
            return "Pop 2 (4) Dual SIM" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("5042A") || mdl.equals("5042F") || mdl.equals("5042G") || mdl.equals("5042W") || mdl.equals("5042X")) {
            return "Pop 2 (4.5)" + batCap(2000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("5042D") || mdl.equals("5042E")) {
            return "Pop 2 (4.5) Dual SIM" + batCap(2000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("7043A") || mdl.equals("7043Y")) {
            return "Pop 2 (5)" + batCap(2500, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("7043K")) {
            return "Pop 2 (5) NFC" + batCap(2500, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("4018A") || mdl.equals("4018M") || mdl.equals("4018X")) {
            return "Pop D1" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4018D") || mdl.equals("4018E")) {
            return "Pop D1 Dual SIM" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("4035X") || mdl.equals("4035Y") || mdl.equals("4037A") || mdl.equals("4037X")) {
            return "Pop D3" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4035D") || mdl.equals("4036E")) {
            return "Pop D3 Dual SIM" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("4037N") || mdl.equals("4037T")) {
            return "Evolve 2" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("5020W")) {
            return "Evolve" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("5038A") || mdl.equals("5038X")) {
            return "Pop D5" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("5038D") || mdl.equals("5038E")) {
            return "Pop D5 Dual SIM" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("5050Y")) {
            return "Pop S3" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("7044A") || mdl.equals("7044Y")) {
            return "Pop 2 (5) Premium" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("7055A")) {
            return "Hero 2C" + batCap(3400, 3, 6, 921600, 6.0f);
        }
        if (mdl.equals("8020A") || mdl.equals("8020Y")) {
            return "Hero" + batCap(3400, 3, 6, 2073600, 6.0f, 6);
        }
        if (mdl.equals("8020D") || mdl.equals("8020E")) {
            return "Hero Dual SIM" + batCap(3400, 3, 6, 2073600, 6.0f, 6);
        }
        if (mdl.equals("8030B") || mdl.equals("8030Y")) {
            return "Hero 2" + batCap(3100, 3, 6, 2073600, 6.0f, 7);
        }
        if (mdl.equals("A564C")) {
            return "Pop Icon" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("EVO7HD")) {
            return "Evo 7HD" + batCap(4160, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("FIERCE")) {
            return "Fierce" + batCap(1800, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("FIERCE 2")) {
            return "Fierce 2" + batCap(0, 1, 1, 518400, 5.0f);
        }
        if (dev.startsWith("ONE_TOUCH_990_") || prod.startsWith("ONE_TOUCH_990_")) {
            return "One Touch 990" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        return "";
    }

    private static String getDevModel_Allview() {
        String mdl = getStrippedBuildModel(6);
        if (mdl.equals("2_SPEED_QUAD")) {
            return "2 Speed Quad" + batCap(4400, 4, 1, 786432, 8.0f, 7);
        }
        if (mdl.equals("3_SPEED_QUAD_HD")) {
            return "3 Speed Quad HD" + batCap(8000, 4, 1, 786432, 9.7f, 7);
        }
        /*if (mdl.equals("A4_DUO")) {
            return "A4 Duo" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        if (mdl.equals("A5_DUO")) {
            return "A5 Duo" + batCap(1700, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A5_EASY")) {
            return "A5 Easy" + batCap(1400, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A5_QUAD")) {
            return "A5 Quad" + batCap(1700, 1, 1, 384000, 4.3f, 6);
        }
        if (mdl.equals("A5_QUAD_PLUS")) {
            return "A5 Quad Plus" + batCap(1800, 1, 6, 409920, 4.5f, 7);
        }
        if (mdl.equals("A6_QUAD")) {
            return "A6 Quad" + batCap(1500, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("AX3_PARTY") || mdl.equals("AX3PARTY")) {
            return "AX3 Party" + batCap(3000, 4, 1, 384000, 7.0f, 6);
        }
        if (mdl.equals("AX4_NANO") || mdl.equals("AX4NANO")) {
            return "AX4 Nano" + batCap(2500, 4, 1, 384000, 7.0f, 7);
        }
        if (mdl.equals("AX4_NANO_PLUS") || mdl.equals("AX4NANO_PLUS")) {
            return "AX4 Nano Plus" + batCap(2700, 4, 6, 614400, 7.0f, 7);
        }
        if (mdl.equals("AX5_NANO_Q") || mdl.equals("AX5NANO_Q")) {
            return "AX5 Nano Q" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("C5_SMILEY")) {
            return "C5 Smiley" + batCap(1400, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("C6_QUAD_4G")) {
            return "C6 Quad 4G" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("CITY+")) {
            return "City+" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("CITY_LIFE")) {
            return "City Life" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("E2_JUMP")) {
            return "E2 Jump" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("E2_LIVING")) {
            return "E2 Living" + batCap(1350, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("E3_LIVING")) {
            return "E3 Living" + batCap(1850, 1, 6, 409920, 4.5f, 7);
        }
        if (mdl.equals("E3_SIGN")) {
            return "E3 Sign" + batCap(2800, 3, 6, 921600, 5.5f);
        }
        /*if (mdl.equals("E4")) {
            return "E4" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 7);
        }*/
       /* if (mdl.equals("E4_LITE")) {
            return "E4 Lite" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 7);
        }*/
        if (mdl.equals("H2_QUBO")) {
            return "H2 Qubo" + batCap(1800, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.startsWith("P")) {
            if (mdl.equals("P4_LIFE")) {
                return "P4 Life" + batCap(1600, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("P5_ENERGY")) {
                return "P5 Energy" + batCap(4000, 1, 6, 409920, 4.5f, 7);
            }
            if (mdl.equals("P5_LIFE")) {
                return "P5 Life" + batCap(1850, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("P5_SYMBOL")) {
                return "P5 Symbol" + batCap(1700, 1, 1, 409920, 4.63f, 6);
            }
            if (mdl.equals("P6_ENERGY")) {
                return "P6 Energy" + batCap(5000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("P6_LIFE")) {
                return "P6 Life" + batCap(1750, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("P6_QMAX")) {
                return "P6 QMax" + batCap(3000, 3, 6, 2073600, 5.95f);
            }
            /*if (mdl.equals("P6_QUAD_PLUS")) {
                return "P6 Quad Plus" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 921600, 4.65f);
            }*/
            if (mdl.equals("P7_SEON")) {
                return "P7 Seon" + batCap(2400, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("P7_XTREME")) {
                return "P7 Xtreme" + batCap(2200, 1, 5, 921600, 4.7f);
            }
            if (mdl.equals("P8_ENERGY")) {
                return "P8 Energy" + batCap(6000, 3, 23, 921600, 5.5f, 7);
            }
        }
        if (mdl.startsWith("V1")) {
            if (mdl.equals("V1_VIPER")) {
                return "V1 Viper" + batCap(1800, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("V1_VIPER_E")) {
                return "V1 Viper e" + batCap(1800, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("V1_VIPER_I")) {
                return "V1 Viper i" + batCap(1800, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("V1_VIPER_I4G")) {
                return "V1 Viper i4G" + batCap(1800, 1, 1, 409920, 4.7f);
            }
            if (mdl.equals("V1_VIPER_L")) {
                return "V1 Viper L" + batCap(1950, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("V1_VIPER_S")) {
                return "V1 Viper S" + batCap(2500, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("V1_VIPER_S4G")) {
                return "V1 Viper S4G" + batCap(2000, 1, 6, 921600, 5.0f);
            }
        }
        if (mdl.startsWith("VIVA")) {
            if (mdl.equals("VIVA_C7")) {
                return "Viva C7" + batCap(2700, 4, 1, 518400, 7.0f, 7);
            }
            if (mdl.equals("VIVA_C701")) {
                return "Viva C701" + batCap(2700, 4, 1, 614400, 7.0f, 7);
            }
            if (mdl.equals("VIVA_D8")) {
                return "Viva D8" + batCap(4000, 4, 6, 786432, 7.9f, 7);
            }
            if (mdl.equals("VIVA_H7")) {
                return "Viva H7" + batCap(2000, 4, 6, 1024000, 7.0f, 7);
            }
            if (mdl.equals("VIVA_H7_EXTREME")) {
                return "Viva H7 Extreme" + batCap(3500, 4, 6, 2304000, 7.0f);
            }
            if (mdl.equals("VIVA_H7_LIFE")) {
                return "Viva H7 Life" + batCap(2800, 4, 6, 614400, 7.0f, 7);
            }
            if (mdl.equals("VIVA_H7_LTE")) {
                return "Viva H7 LTE" + batCap(2500, 4, 6, 614400, 7.0f, 7);
            }
            if (mdl.equals("VIVA_H7S")) {
                return "Viva H7S" + batCap(3000, 4, 6, 1024000, 7.0f, 7);
            }
            if (mdl.equals("VIVA_H7_XTREME")) {
                return "Viva H7 Xtreme" + batCap(3500, 4, 6, 2304000, 7.0f);
            }
            if (mdl.equals("VIVA_H8")) {
                return "Viva H8" + batCap(4000, 4, 6, 786432, 7.9f, 7);
            }
            if (mdl.equals("VIVA_H8+")) {
                return "Viva H8+" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("VIVA_H8_LIFE")) {
                return "Viva H8 Life" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("VIVA_H8_LTE")) {
                return "Viva H8 LTE" + batCap(4000, 4, 6, 1024000, 8.0f, 7);
            }
            if (mdl.equals("VIVA_H8_PLUS")) {
                return "Viva H8 Plus" + batCap(4000, 4, 6, 1024000, 8.0f, 7);
            }
            /*if (mdl.equals("VIVA_H10")) {
                return "Viva H10" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 1024000, 10.1f, 7);
            }*/
            if (mdl.equals("VIVA_H10HD")) {
                return "Viva H10HD" + batCap(8000, 4, 6, 1024000, 10.1f);
            }
            /*if (mdl.equals("VIVA_H10_LTE")) {
                return "Viva H10 LTE" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 1024000, 10.1f, 7);
            }*/
            if (mdl.equals("VIVA_I7")) {
                return "Viva i7" + batCap(2500, 4, 6, 614400, 7.0f, 6);
            }
            if (mdl.equals("VIVA_I8")) {
                return "Viva i8" + batCap(4600, 4, 6, 786432, 7.9f, 6);
            }
            if (mdl.equals("VIVA_I10G")) {
                return "Viva i10G" + batCap(8000, 4, 6, 3145728, 9.7f, 4);
            }
            if (mdl.equals("VIVA_Q7_LIFE")) {
                return "Viva Q7 Life" + batCap(3000, 4, 1, 614400, 7.0f, 7);
            }
            if (mdl.equals("VIVA_Q7_SATELLITE")) {
                return "Viva Q7 Satellite" + batCap(2500, 4, 1, 384000, 7.0f, 7);
            }
            if (mdl.equals("VIVA_Q8")) {
                return "Viva Q8" + batCap(4000, 4, 1, 786432, 7.9f, 7);
            }
            if (mdl.equals("VIVA_Q8_PRO")) {
                return "Viva Q8 Pro" + batCap(3800, 4, 6, 1024000, 8.0f, 7);
            }
        }
        if (mdl.equals("WI7_ANDROID")) {
            return "WI7 Android" + batCap(2400, 4, 1, 614400, 7.0f, 3);
        }
        if (mdl.startsWith("X")) {
            if (mdl.equals("X1_SOUL")) {
                return "X1 Soul" + batCap(2000, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("X1_MINI_SOUL") || mdl.equals("X1_SOUL_MINI")) {
                return "X1 Soul Mini" + batCap(3000, 1, 6, 921600, 4.5f);
            }
            if (mdl.equals("X1_XTREME")) {
                return "X1 Xtreme" + batCap(2500, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("X1_XTREME_MINI")) {
                return "X1 Xtreme mini" + batCap(2200, 1, 6, 2073600, 4.7f, 7);
            }
            if (mdl.equals("X2_MINI_SOUL") || mdl.equals("X2_SOUL_MINI")) {
                return "X2 Soul Mini" + batCap(2050, 1, 23, 921600, 4.8f);
            }
            if (mdl.equals("X2_SOUL")) {
                return "X2 Soul" + batCap(2300, 1, 24, 2073600, 5.0f);
            }
            if (mdl.equals("X2_SOUL_PRO")) {
                return "X2 Soul Pro" + batCap(2700, 1, 24, 2073600, 5.2f, 7);
            }
            if (mdl.equals("X2_SOUL_XTREME")) {
                return "X2 Soul Xtreme" + batCap(3500, 3, 23, 3686400, 6.0f, 7);
            }
            if (mdl.equals("X2_TWIN")) {
                return "X2 Twin" + batCap(1920, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("X2_XTREME")) {
                return "X2 Xtreme" + batCap(3500, 3, 23, 3686400, 6.0f, 7);
            }
        }
        return "";
    }

    private static String getDevModel_Allwinner() {
        String mdl = getStrippedBuildModel(90);
        if (mdl.equals("QUAD-CORE A33 Y3")) {
            return "Quad-Core A33 y3" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("Q8H")) {
            return "Q8H" + batCap(0, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("MID-756")) {
            return "MID-756" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Amazon() {
        String mdl = getStrippedBuildModel(68);
        if (mdl.equals("AFTB")) {
            return "Fire TV" + batCap(0, 9);
        }
        if (mdl.equals("AFTM")) {
            return "Fire TV Stick" + batCap(0, 10);
        }
        if (mdl.equals("KFAPWA")) {
            return "Kindle Fire HDX 8.9 WAN (3rd Gen)" + batCap(0, 4, 1, 4096000, 8.9f);
        }
        if (mdl.equals("KFAPWI")) {
            return "Kindle Fire HDX 8.9 WiFi (3rd Gen)" + batCap(0, 4, 1, 4096000, 8.9f);
        }
        if (mdl.equals("KFARWI")) {
            return "Fire HD 6 (4th Gen)" + batCap(0, 4, 1, 1024000, 6.0f);
        }
        if (mdl.equals("KFASWI")) {
            return "Fire HD 7 (4th Gen)" + batCap(0, 4, 1, 1024000, 7.0f);
        }
        if (mdl.equals("KFFOWI")) {
            return "Fire (5th Gen)" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("KFJWA")) {
            return "Kindle Fire HD 8.9 WAN (2nd Gen)" + batCap(0, 4, 1, 2304000, 8.9f);
        }
        if (mdl.equals("KFJWI")) {
            return "Kindle Fire HD 8.9 WiFi (2nd Gen)" + batCap(0, 4, 1, 2304000, 8.9f);
        }
        if (mdl.equals("KFMEWI")) {
            return "Fire HD 8 (5th Gen)" + batCap(0, 4, 1, 1024000, 8.0f);
        }
        if (mdl.equals("KFOT")) {
            return "Kindle Fire (2nd Gen)" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("KFSAWA")) {
            return "Fire HDX 8.9 WAN (4th Gen)" + batCap(0, 4, 1, 4096000, 8.9f);
        }
        if (mdl.equals("KFSAWI")) {
            return "Fire HDX 8.9 WiFi (4th Gen)" + batCap(0, 4, 1, 4096000, 8.9f);
        }
        if (mdl.equals("KFSOWI")) {
            return "Kindle Fire HD 7 (3rd Gen)" + batCap(0, 4, 1, 1024000, 7.0f);
        }
        if (mdl.equals("KFTBWI")) {
            return "Fire HD 10 (5th Gen)" + batCap(0, 4, 1, 1024000, 10.1f);
        }
        if (mdl.equals("KFTHWA")) {
            return "Kindle Fire HDX 7 WAN (3rd Gen)" + batCap(0, 4, 1, 2304000, 7.0f);
        }
        if (mdl.equals("KFTHWI")) {
            return "Kindle Fire HDX 7 WiFi (3rd Gen)" + batCap(0, 4, 1, 2304000, 7.0f);
        }
        if (mdl.equals("KFTT")) {
            return "Kindle Fire HD 7 (2nd Gen)" + batCap(0, 4, 1, 1024000, 7.0f);
        }
        if (mdl.equals("KINDLE FIRE")) {
            return "Kindle Fire (1st Gen)" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("SD4930UR")) {
            return "Fire Phone" + batCap(2400, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_Ampe() {
        String mdl = getStrippedBuildModel(108);
        if (mdl.equals("A10")) {
            return "A10" + batCap(8600, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("A62")) {
            return "A62" + batCap(2200, 3, 6, 409920, 6.2f);
        }
        if (mdl.equals("A76")) {
            return "A76" + batCap(2600, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("A77")) {
            return "A77" + batCap(3700, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("A78")) {
            return "A78" + batCap(3200, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("A79")) {
            return "A79" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("A86")) {
            return "A86" + batCap(4200, 4, 6, 786432, 8.0f);
        }
        return "";
    }

    private static String getDevModel_Anycool() {
        if (getStrippedBuildModel(105).equals("W502")) {
            return "W502" + batCap(0, 1, 1, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Archos() {
        String mdl = getStrippedBuildModel(130);
        if (mdl.equals("40 TITANIUM")) {
            return "40 Titanium" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("40B TITANIUM")) {
            return "40b Titanium" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("40C TITANIUM")) {
            return "40c Titanium" + batCap(1450, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("45 HELIUM 4G")) {
            return "45 Helium 4G" + batCap(1850, 1, 6, 384000, 4.5f);
        }
        if (mdl.equals("45 NEON")) {
            return "45 Neon" + batCap(3000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("45 PLATINUM")) {
            return "45 Platinum" + batCap(1600, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("45 TITANIUM")) {
            return "45 Titanium" + batCap(1680, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("45C PLATINUM")) {
            return "45c Platinum" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("50 DIAMOND")) {
            return "50 Diamond" + batCap(2700, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("50 HELIUM+")) {
            return "50 Helium+" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("50 HELIUM 4G")) {
            return "50 Helium 4G" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("50 OXYGEN")) {
            return "50 Oxygen" + batCap(2300, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("50 PLATINUM")) {
            return "50 Platinum" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        /*if (mdl.equals("50 TITANIUM")) {
            return "50 Titanium" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 5.0f);
        }*/
        if (mdl.equals("50B HELIUM 4G")) {
            return "50b Helium 4G" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("50B PLATINUM")) {
            return "50b Platinum" + batCap(1900, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("50C NEON")) {
            return "50c Neon" + batCap(1850, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("50C OXYGEN")) {
            return "50c Oxygen" + batCap(2000, 1, 6, 921600, 5.0f);
        }
       /* if (mdl.equals("50D HELIUM 4G")) {
            return "50d Helium 4G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("50E HELIUM")) {
            return "50e Helium" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }*/
        if (mdl.equals("52 PLATINUM")) {
            return "52 Platinum" + batCap(1750, 1, 6, 921600, 5.25f);
        }
        if (mdl.equals("53 PLATINUM")) {
            return "53 Platinum" + batCap(2800, 3, 6, 518400, 5.3f);
        }
        if (mdl.equals("53 TITANIUM")) {
            return "53 Titanium" + batCap(2500, 3, 1, 409920, 5.3f);
        }
        if (mdl.equals("55 HELIUM+")) {
            return "55 Helium+" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("59 XENON")) {
            return "59 Xenon" + batCap(2500, 3, 6, 921600, 5.94f);
        }
        if (mdl.equals("62 XENON")) {
            return "62 Xenon" + batCap(2300, 3, 6, 921600, 6.27f);
        }
        if (mdl.equals("64 XENON")) {
            return "64 Xenon" + batCap(2800, 3, 6, 921600, 6.4f);
        }
        if (mdl.equals("70 HELIUM 4G")) {
            return "70 Helium 4G" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("70 PLATINUM")) {
            return "70 Platinum" + batCap(2600, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("70B COPPER")) {
            return "70b Copper" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("70C TITANIUM")) {
            return "70c Titanium" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("70C XENON")) {
            return "70c Xenon" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("80 HELIUM 4G")) {
            return "80 Helium 4G" + batCap(3500, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("80C XENON")) {
            return "80c Xenon" + batCap(4200, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("90B NEON")) {
            return "90b Neon" + batCap(4000, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("101 COPPER")) {
            return "101 Copper" + batCap(4200, 4, 1, 614400, 10.1f);
        }
        /*if (mdl.equals("101 HELIUM 4G")) {
            return "101 Helium 4G" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 1024000, 10.1f);
        }*/
        if (mdl.equals("101 MAGNUS")) {
            return "101 Magnus" + batCap(4000, 4, 31, 614400, 10.1f);
        }
        if (mdl.equals("101 MAGNUS PLUS")) {
            return "101 Magnus Plus" + batCap(7000, 4, 6, 2304000, 10.1f);
        }
        if (mdl.equals("101 OXYGEN")) {
            return "101 Oxygen" + batCap(7000, 4, 6, 2304000, 10.1f);
        }
        if (mdl.equals("101 XENON LITE")) {
            return "101 Xenon Lite" + batCap(4000, 4, 31, 614400, 10.1f);
        }
        if (mdl.equals("101B COPPER")) {
            return "101b Copper" + batCap(4000, 4, 31, 614400, 10.1f);
        }
        if (mdl.equals("101C PLATINUM")) {
            return "101c Platinum" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("101D NEON")) {
            return "101d Neon" + batCap(4000, 4, 31, 614400, 10.1f);
        }
        if (mdl.equals("DIAMOND PLUS")) {
            return "Diamond Plus" + batCap(0, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("DIAMOND S")) {
            return "Diamond S" + batCap(0, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("DIAMOND TAB")) {
            return "Diamond Tab" + batCap(0, 4, 6, 3145728, 7.9f);
        }
        return "";
    }

    private static String getDevModel_Assistant() {
        String mdl = getStrippedBuildModel(DEVMANUF_ASSISTANT);
        if (mdl.equals("AP-100")) {
            return "AP-100" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("AP-101")) {
            return "AP-101" + batCap(3000, 4, 1, 614400, 10.0f);
        }
        if (mdl.equals("AP-102")) {
            return "AP-102" + batCap(7800, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("AP-103")) {
            return "AP-103" + batCap(6600, 4, 6, 1024000, 10.0f);
        }
        if (mdl.equals("AP-104")) {
            return "AP-104" + batCap(6000, 4, 6, 1024000, 10.0f);
        }
        if (mdl.equals("AP-105")) {
            return "AP-105" + batCap(5000, 4, 1, 786432, 9.7f);
        }
        if (mdl.equals("AP-106")) {
            return "AP-106" + batCap(7400, 4, 1, 3145728, 9.7f);
        }
        if (mdl.equals("AP-107G")) {
            return "AP-107G" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("AP-109")) {
            return "AP-109" + batCap(6000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("AP-110")) {
            return "AP-110" + batCap(5000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("AP-115G")) {
            return "AP-115G" + batCap(4200, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("AP-700")) {
            return "AP-700" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-701")) {
            return "AP-701" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-702")) {
            return "AP-702" + batCap(3200, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-703")) {
            return "AP-703" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-704")) {
            return "AP-704" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-705")) {
            return "AP-705" + batCap(3600, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AP-708")) {
            return "AP-708" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("AP-710")) {
            return "AP-710" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-711")) {
            return "AP-711" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-712")) {
            return "AP-712" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-713")) {
            return "AP-713" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-714")) {
            return "AP-714" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AP-715")) {
            return "AP-715" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-717")) {
            return "AP-717" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("AP-719")) {
            return "AP-719" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-720")) {
            return "AP-720" + batCap(2000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-721")) {
            return "AP-721" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AP-722")) {
            return "AP-722" + batCap(0, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("AP-723")) {
            return "AP-723" + batCap(2800, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("AP-725")) {
            return "AP-725" + batCap(2800, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("AP-727")) {
            return "AP-727" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AP-777G")) {
            return "AP-777G" + batCap(2400, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AP-785")) {
            return "AP-785" + batCap(4000, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("AP-801")) {
            return "AP-801" + batCap(5000, 4, 1, 480000, 8.0f);
        }
        if (mdl.equals("AP-802")) {
            return "AP-802" + batCap(4200, 4, 1, 786432, 8.0f);
        }
        if (mdl.equals("AP-803")) {
            return "AP-803" + batCap(4000, 4, 1, 786432, 8.0f);
        }
        if (mdl.equals("AP-804")) {
            return "AP-804" + batCap(4000, 4, 1, 786432, 8.0f);
        }
        if (mdl.equals("AP-807")) {
            return "AP-807" + batCap(3800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("AP-875")) {
            return "AP-875" + batCap(3800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("AP-901")) {
            return "AP-901" + batCap(5200, 4, 1, 384000, 9.0f);
        }
        if (mdl.equals("AP-941")) {
            return "AP-941" + batCap(6400, 4, 6, 1024000, 9.4f);
        }
        return "";
    }

    private static String getDevModel_Asus() {
        String mdl = getStrippedBuildModel(7);
        if (mdl.startsWith("K")) {
            if (mdl.equals("K001")) {
                return "MeMO Pad Smart 10 (ME301T)" + batCap(5070, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("K002")) {
                return "Fonepad 7 Dual SIM" + batCap(0, 4);
            }
            if (mdl.equals("K003")) {
                return "Fonepad 7" + batCap(0, 4);
            }
            if (mdl.equals("K004")) {
                return "Fonepad" + batCap(0, 4);
            }
            if (mdl.equals("K005")) {
                return "MeMO Pad FHD 10 (ME302KL)" + batCap(6760, 4, 6, 2304000, 10.1f);
            }
            if (mdl.equals("K006")) {
                return "Fonepad 7" + batCap(0, 4);
            }
            if (mdl.equals("K007")) {
                return "MeMO Pad 7 (ME572C)" + batCap(3950, 4, 6, 2304000, 7.0f, 7);
            }
            if (mdl.equals("K008")) {
                return "Nexus 7 WiFi" + batCap(4325, 4, 6, 1024000, 7.0f, 1);
            }
            if (mdl.equals("K009")) {
                return "Nexus 7 LTE" + batCap(4325, 4, 6, 1024000, 7.0f, 1);
            }
            if (mdl.equals("K00A")) {
                return "MeMO Pad FHD 10 (ME302C)" + batCap(6760, 4, 1, 2304000, 10.1f, 6);
            }
            if (mdl.equals("K00B")) {
                return "MeMO Pad HD 7 (ME173X)" + batCap(0, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("K00C")) {
                return "Transformer Pad (TF701T)" + batCap(0, 4, 6, 4096000, 10.1f, 7);
            }
            if (mdl.equals("K00E")) {
                return "Fonepad 7 (ME372CG)" + batCap(3950, 4, 6, 1024000, 7.0f, 6);
            }
            if (mdl.equals("K00F")) {
                return "MeMO Pad 10 (ME102A)" + batCap(5070, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("K00G")) {
                return "Fonepad Note 6 (ME560CG)" + batCap(3200, 3, 10, 2073600, 6.0f, 6);
            }
            if (mdl.equals("K00L")) {
                return "MeMO Pad HD 8 (ME180A)" + batCap(3950, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("K00R")) {
                return "MeMO Pad 7 (ME572CL)" + batCap(3950, 4, 6, 2304000, 7.0f, 9);
            }
            if (mdl.equals("K00U")) {
                return "MeMO Pad HD7" + batCap(0, 4);
            }
            if (mdl.equals("K00W")) {
                return "MeMO Pad" + batCap(0, 4);
            }
            if (mdl.equals("K00X")) {
                return "Fonepad 7" + batCap(0, 4);
            }
            if (mdl.equals("K00Y")) {
                return "Fonepad 7 LTE (ME372CL)" + batCap(3950, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("K00Z")) {
                return "Fonepad 7 Dual SIM (ME175CG)" + batCap(3950, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("K010")) {
                return "Transformer Pad (TF103C)" + batCap(5000, 4, 6, 1024000, 10.1f, 8);
            }
            if (mdl.equals("K011")) {
                return "MeMO Pad 8 (ME181C)" + batCap(4000, 4, 6, 1024000, 8.0f, 8);
            }
            if (mdl.equals("K012")) {
                return "Fonepad 7 (FE170CG)" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("K013")) {
                return "MeMO Pad 7 (ME176C/CX)" + batCap(0, 4, 6, 1024000, 7.0f, 8);
            }
            if (mdl.equals("K014")) {
                return "Transformer Pad (TF303CL)" + batCap(6600, 4, 6, 2304000, 10.1f, 8);
            }
            if (mdl.equals("K015")) {
                return "MeMO Pad 8 (ME581CL)" + batCap(4000, 4, 6, 2304000, 8.0f, 9);
            }
            if (mdl.equals("K016")) {
                return "Fonepad 8 (FE380CG)" + batCap(3950, 4, 6, 1024000, 8.0f, 9);
            }
            if (mdl.equals("K017")) {
                return "MeMO Pad 7 (ME170C)" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("K018")) {
                return "Transformer Pad (TF103CG)" + batCap(0, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("K019")) {
                return "Fonepad 7 (FE375CG)" + batCap(0, 4, 6, 1024000, 7.0f, 9);
            }
            if (mdl.equals("K01A")) {
                return "MeMO Pad 7 (ME70C)" + batCap(3220, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("K01B")) {
                return "Transformer Pad (TF303K)" + batCap(0, 4, 6, 2304000, 10.1f);
            }
            if (mdl.equals("K01E")) {
                return "MeMO Pad 10 (ME103K)" + batCap(5070, 4, 6, 1024000, 10.1f, 6);
            }
            if (mdl.equals("K01F")) {
                return "Fonepad 7" + batCap(0, 4);
            }
            if (mdl.equals("K01G")) {
                return "VivoTab 8 (M81C)" + batCap(0, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("K01H")) {
                return "MeMO Pad 8 (ME581C)" + batCap(4000, 4, 6, 2304000, 8.0f, 9);
            }
            if (mdl.equals("K01N")) {
                return "Fonepad 7 (FE171CG)" + batCap(3950, 4, 6, 614400, 7.0f, 6);
            }
            if (mdl.equals("K01Q")) {
                return "Fonepad 7 (FE375CL)" + batCap(3950, 4, 6, 1024000, 7.0f, 9);
            }
        }
        if (mdl.startsWith("M")) {
            if (mdl.equals("ME173X")) {
                return "MeMO Pad HD 7 (ME173X)" + batCap(0, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("ME301T")) {
                return "MeMO Pad Smart 10 (ME301T)" + batCap(5070, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("ME302C")) {
                return "MeMO Pad FHD 10 (ME302C)" + batCap(6760, 4, 1, 2304000, 10.1f, 6);
            }
            if (mdl.equals("ME302KL")) {
                return "MeMO Pad FHD 10 (ME302KL)" + batCap(6760, 4, 6, 2304000, 10.1f);
            }
        }
        if (mdl.equals("NEXUS 7")) {
            SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
            String prod = Build.PRODUCT.trim().toUpperCase();
            if (prod.startsWith("NAKASI") || sysinfo.CPUInfo_ARM_CPUInfo.impl == 65) {
                if (prod.equals("NAKASI")) {
                    return "Nexus 7 2012 WiFi" + batCap(4325, 4, 6, 1024000, 7.0f, 1);
                }
                if (prod.equals("NAKASIG")) {
                    return "Nexus 7 2012 3G" + batCap(4325, 4, 6, 1024000, 7.0f, 1);
                }
                return "Nexus 7 2012" + batCap(4325, 4, 6, 1024000, 7.0f, 1);
            } else if (!prod.startsWith("RAZOR") && sysinfo.CPUInfo_ARM_CPUInfo.impl != 81) {
                return "Nexus 7" + batCap(0, 4);
            } else {
                if (prod.equals("RAZOR")) {
                    return "Nexus 7 2013 WiFi" + batCap(3950, 4, 6, 2304000, 7.0f, 1);
                }
                if (prod.equals("RAZORG")) {
                    return "Nexus 7 2013 3G" + batCap(3950, 4, 6, 2304000, 7.0f, 1);
                }
                return "Nexus 7 2013" + batCap(3950, 4, 6, 2304000, 7.0f, 1);
            }
        } else if (mdl.equals("NEXUS PLAYER")) {
            return "Nexus Player" + batCap(0, 9);
        } else {
            if (mdl.startsWith("P")) {
                if (mdl.equals("P001")) {
                    return "ZenPad C 7.0 (Z170MG)" + batCap(0, 4, 1, 614400, 7.0f);
                }
                if (mdl.equals("P01M")) {
                    return "ZenPad S 8.0 (Z580C)" + batCap(0, 4, 6, 3145728, 8.0f, 9);
                }
                if (mdl.equals("P01MA")) {
                    return "ZenPad S 8.0 (Z580CA)" + batCap(0, 4, 6, 3145728, 8.0f, 9);
                }
                if (mdl.equals("P01T")) {
                    return "ZenPad 10 LTE (Z300CL)" + batCap(0, 4, 6, 1024000, 10.1f, 9);
                }
                if (mdl.equals("P01V")) {
                    return "ZenPad 7.0 3G (Z370CG)" + batCap(0, 4, 6, 1024000, 7.0f);
                }
                if (mdl.equals("P01W")) {
                    return "ZenPad 7.0 (Z370C)" + batCap(0, 4, 6, 1024000, 7.0f);
                }
                if (mdl.equals("P01Y")) {
                    return "ZenPad C 7.0 3G (Z170CG)" + batCap(0, 4, 1, 614400, 7.0f);
                }
                if (mdl.equals("P01Z")) {
                    return "ZenPad C 7.0 (Z170C)" + batCap(0, 4, 1, 614400, 7.0f);
                }
                if (mdl.equals("P021")) {
                    return "ZenPad 10 3G (Z300CG)" + batCap(0, 4, 6, 1024000, 10.1f, 7);
                }
                if (mdl.equals("P022")) {
                    return "ZenPad 8.0 (Z380C)" + batCap(0, 4, 6, 1024000, 8.0f);
                }
                if (mdl.equals("P023")) {
                    return "ZenPad 10 (Z300C)" + batCap(0, 4, 6, 1024000, 10.1f);
                }
                if (mdl.equals("P024")) {
                    return "ZenPad 8.0 LTE (Z380KL)" + batCap(0, 4, 6, 1024000, 8.0f, 7);
                }
                if (mdl.equals("PADFONE 2")) {
                    return "PadFone 2 (A68)" + batCap(2140, 2, 10, 921600, 4.7f, 6);
                }
                if (mdl.equals("PADFONE INFINITY")) {
                    String dev = Build.DEVICE.trim().toUpperCase();
                    if (dev.equals("ASUS-A80")) {
                        return "PadFone Infinity (A80)" + batCap(2400, 2, 10, 2073600, 5.0f, 6);
                    }
                    if (dev.equals("ASUS-A86")) {
                        return "PadFone Infinity (A86)" + batCap(2400, 2, 6, 2073600, 5.0f, 7);
                    }
                }
            }
            if (mdl.startsWith("T")) {
                if (mdl.equals("T001")) {
                    return "ZenFone 4" + batCap(0, 1);
                }
                if (mdl.equals("T003")) {
                    return "PadFone Infinity (A80)" + batCap(2400, 2, 10, 2073600, 5.0f, 6);
                }
                if (mdl.equals("T004")) {
                    return "PadFone Infinity (A86)" + batCap(2400, 2, 6, 2073600, 5.0f, 7);
                }
                if (mdl.equals("T006")) {
                    return "ZenFone 6" + batCap(3300, 3);
                }
                if (mdl.equals("T008")) {
                    return "PadFone E (A68M)" + batCap(1820, 2, 9, 921600, 4.7f, 6);
                }
                if (mdl.equals("T00C")) {
                    return "PadFone mini 4.3 (A11)" + batCap(1500, 2, 6, 518400, 4.3f, 6);
                }
                if (mdl.equals("T00D")) {
                    return "PadFone X" + batCap(2300, 2);
                }
                /*if (mdl.equals("T00E")) {
                    return "PadFone mini (PF400CG)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 2, 6, 384000, 4.0f, 6);
                }*/
                if (mdl.equals("T00F")) {
                    return "ZenFone 5 (A500CG)" + batCap(2110, 1, 6, 921600, 5.0f, 6);
                }
                if (mdl.equals("T00G")) {
                    return "ZenFone 6 (A600CG)" + batCap(3300, 3, 6, 921600, 6.0f, 6);
                }
                /*if (mdl.equals("T00I")) {
                    return "ZenFone 4 (A400CG/CXG)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 384000, 4.0f, 6);
                }*/
                if (mdl.equals("T00J") || mdl.equals("T00J1")) {
                    return "ZenFone 5 (A501CG)" + batCap(2110, 1, 6, 921600, 5.0f, 6);
                }
                if (mdl.equals("T00K")) {
                    return "ZenFone 5 (A502CG)" + batCap(2500, 1, 6, 518400, 5.0f, 6);
                }
                if (mdl.equals("T00N")) {
                    return "PadFone S (PF500KL)" + batCap(2300, 2, 10, 2073600, 5.0f, 7);
                }
                if (mdl.equals("T00P")) {
                    return "ZenFone 5 LTE (A500KL)" + batCap(2110, 1, 6, 921600, 5.0f, 7);
                }
                if (mdl.equals("T00Q")) {
                    return "ZenFone 4 (A450CG)" + batCap(1750, 1, 6, 409920, 4.5f, 6);
                }
                if (mdl.equals("T00S")) {
                    return "PadFone mini (PF451CL)" + batCap(2060, 2, 1, 409920, 4.5f, 6);
                }
                if (mdl.equals("TRANSFORMER TF101")) {
                    return "Transformer TF101" + batCap(0, 4, 6, 1024000, 10.1f);
                }
                if (mdl.equals("TRANSFORMER PAD TF300TG")) {
                    return "Transformer Pad TF300TG" + batCap(0, 4, 6, 1024000, 10.1f);
                }
            }
            if (mdl.startsWith("X")) {
                if (mdl.equals("X002")) {
                    return "Pegasus" + batCap(2500, 1, 6, 921600, 5.0f, 7);
                }
                if (mdl.equals("X003")) {
                    return "Pegasus" + batCap(2500, 1, 6, 921600, 5.0f, 7);
                }
            }
            /*if (mdl.startsWith("Z")) {
                if (mdl.equals("Z002")) {
                    return "ZenFone 6 (A601CG)" + batCap(3230, 3, 6, 921600, 6.0f, 6);
                }
                if (mdl.equals("Z007")) {
                    return "ZenFone C (ZC451CG)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.5f, 6);
                }
                if (mdl.equals("Z008") || mdl.equals("Z008D")) {
                    return "ZenFone 2 (ZE550ML)" + batCap(3000, 3, 6, 921600, 5.5f, 9);
                }
                if (mdl.equals("Z00A") || mdl.equals("Z00AD")) {
                    return "ZenFone 2 (ZE551ML)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
                }
                if (mdl.equals("Z00D")) {
                    return "ZenFone 2 (ZE500CL)" + batCap(2500, 1, 6, 921600, 5.0f, 6);
                }
                if (mdl.equals("Z00E")) {
                    return "ZenFone 2 Laser (ZE500KL)" + batCap(0, 1, 1, 921600, 5.0f, 7);
                }
                if (mdl.equals("Z00L")) {
                    return "ZenFone 2 Laser (ZE550KL)" + batCap(3000, 3, 6, 921600, 5.5f, 7);
                }
                if (mdl.equals("Z00RD")) {
                    return "ZenFone 2 Laser (ZE500KG)" + batCap(2070, 1, 1, 921600, 5.0f);
                }
                if (mdl.equals("Z00T")) {
                    return "ZenFone Selfie (ZD551KL)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
                }
                if (mdl.equals("Z00VD")) {
                    return "ZenFone Go (ZC500TG)" + batCap(2070, 1, 6, 921600, 5.0f);
                }
                if (mdl.equals("Z010D")) {
                    return "ZenFone Max (ZC550KL)" + batCap(5000, 3, 6, 921600, 5.5f, 7);
                }
            }*/
            if (mdl.equals("ZENWATCH")) {
                return "ZenWatch (WI500Q)" + batCap(360, 6, 23, 102400, 1.63f);
            }
            return "";
        }
    }

    private static String getDevModel_Atongm() {
        if (getStrippedBuildModel(DEVMANUF_ATONGM).equals("H8")) {
            return "H8" + batCap(2300, 1, 6, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Axgio() {
        if (getStrippedBuildModel(DEVMANUF_AXGIO).equals("NEON N3")) {
            return "Neon N3" + batCap(2500, 1, 1, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Beeline() {
        if (getStrippedBuildModel(DEVMANUF_BEELINE).equals("SMART 4")) {
            return "Smart 4" + batCap(1600, 1, 6, 409920, 4.5f);
        }
        return "";
    }

    private static String getDevModel_BL() {
        if (getStrippedBuildModel(DEVMANUF_BL).equals("100C")) {
            return "100C" + batCap(0, 1, 1, 2073600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_BlackBerry() {
        String brd = Build.BOARD.trim().toUpperCase();
        if (brd.startsWith("BBSIM-")) {
            return "Simulator";
        }
        /*if (brd.startsWith("SQK100-")) {
            return "Porsche Design P9983" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 3.1f, 6);
        }*/
        if (brd.startsWith("SQC100-")) {
            return "Classic" + batCap(2515, 1, 1, 518400, 3.5f, 6);
        }
        /*if (brd.startsWith("SQN100-")) {
            return "Q10" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 518400, 3.1f, 6);
        }*/
        if (brd.startsWith("SQR100-")) {
            return "Q5" + batCap(2180, 1, 6, 518400, 3.1f, 6);
        }
        if (brd.startsWith("SQW100-")) {
            return "Passport" + batCap(3450, 1, 6, 2073600, 4.5f, 7);
        }
        if (brd.startsWith("STA100-")) {
            return "Z30" + batCap(2880, 1, 24, 921600, 5.0f, 6);
        }
        if (brd.startsWith("STJ100-")) {
            return "Z3" + batCap(2500, 1, 1, 518400, 5.0f, 6);
        }
        if (brd.startsWith("STK100-")) {
            return "Porsche Design P9982" + batCap(1800, 1, 1, 983040, 4.2f, 6);
        }
        if (brd.startsWith("STL100-")) {
            return "Z10" + batCap(1800, 1, 1, 983040, 4.2f, 6);
        }
        if (brd.startsWith("STR100-")) {
            return "Leap" + batCap(2800, 1, 1, 921600, 5.0f, 6);
        }
        return "";
    }

    private static String getDevModel_Blackview() {
        String mdl = getStrippedBuildModel(9);
        if (mdl.equals("ACME")) {
            return "Acme" + batCap(2200, 1, 1, 2073600, 5.0f);
        }
        if (mdl.equals("ALIFE P1 PRO")) {
            return "Alife P1 Pro" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("ALIFE S1")) {
            return "Alife S1" + batCap(2000, 1, 13, 921600, 5.0f, 7);
        }
        /*if (mdl.equals("ARROW")) {
            return "Arrow" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 2073600, 5.0f);
        }*/
        if (mdl.equals("BREEZE")) {
            return "Breeze" + batCap(2000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("BV5000")) {
            return "BV5000" + batCap(4780, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("CROWN")) {
            return "Crown" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("DM550")) {
            return "DM550" + batCap(2600, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("HEATWAVE")) {
            return "Heatwave" + batCap(2500, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("JK450")) {
            return "JK450" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("JK600")) {
            return "JK600" + batCap(3400, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("JK606")) {
            return "JK606" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("JK808")) {
            return "JK808" + batCap(2200, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("JK890")) {
            return "JK890" + batCap(2200, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("JK900")) {
            return "JK900" + batCap(2200, 1, 6, 921600, 5.0f);
        }
       /* if (mdl.equals("OMEGA")) {
            return "Omega" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 2073600, 5.0f);
        }*/
        if (mdl.equals("OMEGA PRO")) {
            return "Omega Pro" + batCap(2400, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("ULTRA")) {
            return "Ultra" + batCap(2200, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("V3")) {
            return "V3" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("ZETA")) {
            return "Zeta" + batCap(2050, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Blaupunkt() {
        if (getStrippedBuildModel(DEVMANUF_BLAUPUNKT).equals("ENDEAVOUR_101M")) {
            return "Endeavour 101M" + batCap(5000, 4, 1, 614400, 10.1f);
        }
        return "";
    }

    private static String getDevModel_BLU() {
        String mdl = getStrippedBuildModel(10);
        if (mdl.equals("ADVANCE 4.0")) {
            return "Advance 4.0" + batCap(1600, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("ADVANCE 4.0 L")) {
            return "Advance 4.0 L" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("AMOUR")) {
            return "Amour" + batCap(1600, 1, 1, 384000, 4.0f);
        }
        if (mdl.startsWith("DASH")) {
            if (mdl.equals("DASH")) {
                return "Dash" + batCap(1110, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("DASH 3.2")) {
                return "Dash 3.2" + batCap(1280, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("DASH 3.5")) {
                return "Dash 3.5" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DASH 4.0")) {
                return "Dash 4.0" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DASH 4.5")) {
                return "Dash 4.5" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DASH 5.0")) {
                return "Dash 5.0" + batCap(2000, 1, 1, 409920, 5.0f, 6);
            }
            if (mdl.equals("DASH 5.5")) {
                return "Dash 5.5" + batCap(2600, 3, 6, 409920, 5.5f);
            }
            if (mdl.equals("DASH C MUSIC")) {
                return "Dash C Music" + batCap(1450, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DASH JR")) {
                return "Dash JR" + batCap(1000, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DASH JR 4.0 K")) {
                return "Dash JR 4.0 K" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DASH JR K")) {
                return "Dash JR K" + batCap(1400, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("DASH L")) {
                return "Dash L" + batCap(1450, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("DASH MUSIC")) {
                return "Dash Music" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DASH MUSIC 4.0")) {
                return "Dash Music 4.0" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("DASH MUSIC JR") || mdl.equals("DASHMUSICJR")) {
                return "Dash Music JR" + batCap(1450, 1, 1, 384000, 4.0f);
            }
        }
        if (mdl.equals("ELITE 3.8")) {
            return "Elite 3.8" + batCap(1600, 1, 6, 384000, 3.8f);
        }
        if (mdl.equals("ENERGY X PLUS")) {
            return "Energy X Plus" + batCap(4000, 3, 6, 921600, 5.5f);
        }
        if (mdl.startsWith("LIFE")) {
            if (mdl.equals("LIFE 8")) {
                return "Life 8" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("LIFE 8 XL")) {
                return "Life 8 XL" + batCap(2920, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("LIFE ONE")) {
                return "Life One" + batCap(2000, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("LIFE ONE M")) {
                return "Life One M" + batCap(2000, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("LIFE ONE X")) {
                return "Life One X" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("LIFE ONE XL")) {
                return "Life One XL" + batCap(2820, 3, 6, 921600, 5.5f, 7);
            }
            if (mdl.equals("LIFE PLAY")) {
                return "Life Play" + batCap(1800, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("LIFE PLAY 2")) {
                return "Life Play 2" + batCap(1800, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("LIFE PLAY MINI")) {
                return "Life Play Mini" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LIFE PLAY S")) {
                return "Life Play S" + batCap(1800, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("LIFE PLAY X")) {
                return "Life Play X" + batCap(1800, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("LIFE PRO")) {
                return "Life Pro" + batCap(2500, 1, 6, 921600, 5.0f, 6);
            }
            /*if (mdl.equals("LIFE PURE")) {
                return "Life Pure" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 6, 2073600, 5.0f, 6);
            }*/
            if (mdl.equals("LIFE PURE MINI")) {
                return "Life Pure Mini" + batCap(3000, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("LIFE PURE XL")) {
                return "Life Pure XL" + batCap(2500, 3, 8, 2073600, 5.5f, 7);
            }
            if (mdl.equals("LIFE VIEW")) {
                return "Life View" + batCap(2600, 3, 6, 921600, 5.7f, 6);
            }
            if (mdl.equals("LIFE VIEW 8.0")) {
                return "Life View 8.0" + batCap(3800, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("LIFE VIEW TAB")) {
                return "Life View Tab" + batCap(4500, 4, 6, 786432, 8.0f, 6);
            }
            if (mdl.equals("LIFE X8")) {
                return "Life X8" + batCap(2500, 1, 6, 921600, 5.0f);
            }
        }
        if (mdl.equals("MAGIC")) {
            return "Magic" + batCap(1450, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("NEO 3.5")) {
            return "Neo 3.5" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("NEO 4.5")) {
            return "Neo 4.5" + batCap(1800, 1, 6, 409920, 4.5f, 6);
        }
        if (mdl.equals("PURE XL")) {
            return "Pure XL" + batCap(3500, 3, 24, 3686400, 6.0f, 7);
        }
        if (mdl.equals("QUATTRO 4.5")) {
            return "Quattro 4.5" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("QUATTRO 4.5 HD")) {
            return "Quattro 4.5 HD" + batCap(1800, 1, 9, 921600, 4.5f);
        }
        if (mdl.equals("QUATTRO 5.7 HD")) {
            return "Quattro 5.7 HD" + batCap(2800, 3, 6, 921600, 5.7f);
        }
        if (mdl.equals("SELFIE")) {
            return "Selfie" + batCap(2300, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("SPORT 4.5")) {
            return "Sport 4.5" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.startsWith("STUDIO")) {
            if (mdl.equals("STUDIO 5.0")) {
                return "Studio 5.0" + batCap(2000, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("STUDIO 5.0 C")) {
                return "Studio 5.0 C" + batCap(1800, 1, 1, 409920, 5.0f, 6);
            }
            if (mdl.equals("STUDIO 5.0 CE")) {
                return "Studio 5.0 CE" + batCap(1800, 1, 1, 409920, 5.0f, 6);
            }
            if (mdl.equals("STUDIO 5.0 C HD")) {
                return "Studio 5.0 C HD" + batCap(2000, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("STUDIO 5.0 C MINI")) {
                return "Studio 5.0 C mini" + batCap(2000, 1, 6, 384000, 4.7f, 6);
            }
            /*if (mdl.equals("STUDIO 5.0 E")) {
                return "Studio 5.0 E" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 5.0f, 6);
            }*/
            if (mdl.equals("STUDIO 5.0 HD LTE")) {
                return "Studio 5.0 HD LTE" + batCap(2200, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("STUDIO 5.0 II")) {
                return "Studio 5.0 II" + batCap(2000, 1, 6, 409920, 5.0f, 6);
            }
           /* if (mdl.equals("STUDIO 5.0 K")) {
                return "Studio 5.0 K" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 5.0f);
            }*/
            if (mdl.equals("STUDIO 5.0 LTE")) {
                return "Studio 5.0 LTE" + batCap(2200, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("STUDIO 5.0 S")) {
                return "Studio 5.0 S" + batCap(2000, 1, 6, 518400, 5.0f, 6);
            }
            if (mdl.equals("STUDIO 5.0 S II")) {
                return "Studio 5.0 S II" + batCap(2000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("STUDIO 5.3")) {
                return "Studio 5.3" + batCap(2500, 3, 1, 384000, 5.3f);
            }
            if (mdl.equals("STUDIO 5.3 II")) {
                return "Studio 5.3 II" + batCap(2200, 3, 6, 518400, 5.3f);
            }
            if (mdl.equals("STUDIO 5.3 S")) {
                return "Studio 5.3 S" + batCap(2800, 3, 6, 518400, 5.3f, 6);
            }
            if (mdl.equals("STUDIO 5.5")) {
                return "Studio 5.5" + batCap(2250, 3, 1, 409920, 5.5f);
            }
            if (mdl.equals("STUDIO 5.5 C")) {
                return "Studio 5.5 C" + batCap(2820, 3, 1, 409920, 5.5f);
            }
            if (mdl.equals("STUDIO 5.5 S")) {
                return "Studio 5.5 S" + batCap(2350, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("STUDIO 6.0 HD")) {
                return "Studio 6.0 HD" + batCap(3000, 3, 6, 921600, 6.0f, 6);
            }
            if (mdl.equals("STUDIO 6.0 LTE")) {
                return "Studio 6.0 LTE" + batCap(3200, 3, 6, 2073600, 6.0f);
            }
            if (mdl.equals("STUDIO 7.0")) {
                return "Studio 7.0" + batCap(3000, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("STUDIO 7.0 II")) {
                return "Studio 7.0 II" + batCap(3450, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("STUDIO C")) {
                return "Studio C" + batCap(3000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("STUDIO C 5 + 5")) {
                return "Studio C 5 + 5" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("STUDIO C 5 + 5 LTE")) {
                return "Studio C 5 + 5 LTE" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("STUDIO C MINI")) {
                return "Studio C Mini" + batCap(2000, 1, 6, 384000, 4.7f);
            }
            if (mdl.equals("STUDIO C SUPER CAMERA")) {
                return "Studio C Super Camera" + batCap(2800, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("STUDIO ENERGY")) {
                return "Studio Energy" + batCap(5000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("STUDIO G")) {
                return "Studio G" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("STUDIO MINI LTE")) {
                return "Studio Mini LTE" + batCap(1850, 1, 6, 409920, 4.5f);
            }
            /*if (mdl.equals("STUDIO X")) {
                return "Studio X" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
            }*/
            if (mdl.equals("STUDIO XL")) {
                return "Studio XL" + batCap(3000, 3, 6, 518400, 6.0f);
            }
            if (mdl.equals("STUDIO X PLUS")) {
                return "Studio X Plus" + batCap(2600, 3, 6, 921600, 5.5f);
            }
        }
        /*if (mdl.equals("TANGO")) {
            return "Tango" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
        }*/
        if (mdl.equals("TANK 4.5")) {
            return "Tank 4.5" + batCap(1760, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("TOUCH BOOK 7.0")) {
            return "Touch Book 7.0" + batCap(4250, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("TOUCH BOOK 7.0 LITE")) {
            return "Touch Book 7.0 Lite" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("TOUCH BOOK 7 PLUS")) {
            return "Touch Book 7 Plus" + batCap(3500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("TOUCH BOOK 9.7")) {
            return "Touch Book 9.7" + batCap(6000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("TOUCH BOOK G7")) {
            return "Touch Book G7" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("VIEW TAB")) {
            return "View Tab" + batCap(4500, 4, 6, 786432, 8.0f);
        }
        /*if (mdl.startsWith("VIVO")) {
            if (mdl.equals("VIVO 4.3")) {
                return "Vivo 4.3" + batCap(1600, 1, 23, 384000, 4.3f);
            }
            if (mdl.equals("VIVO 4.65 HD")) {
                return "Vivo 4.65 HD" + batCap(1600, 1, 24, 921600, 4.65f);
            }
            if (mdl.equals("VIVO 4.8 HD")) {
                return "Vivo 4.8 HD" + batCap(2000, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("VIVO AIR")) {
                return "Vivo Air" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 23, 921600, 4.8f);
            }
            if (mdl.equals("VIVO AIR LTE")) {
                return "Vivo Air LTE" + batCap(2050, 1, 23, 921600, 4.8f, 7);
            }
            if (mdl.equals("VIVO IV")) {
                return "Vivo IV" + batCap(2300, 1, 24, 2073600, 5.0f);
            }
            if (mdl.equals("VIVO SELFIE")) {
                return "Vivo Selfie" + batCap(2300, 1, 23, 921600, 4.8f);
            }
        }*/
        return "";
    }

    private static String getDevModel_Bluego() {
        if (getStrippedBuildModel(DEVMANUF_BLUEGO).equals("G559T")) {
            return "G-559T" + batCap(2050, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_BN() {
        String mdl = getStrippedBuildModel(DEVMANUF_BN);
        if (mdl.equals("BNTV400")) {
            return "Nook HD" + batCap(0, 4, 1, 1296000, 7.0f);
        }
        if (mdl.equals("BNTV600")) {
            return "Nook HD+" + batCap(0, 4, 1, 2457600, 9.0f);
        }
        return "";
    }

    private static String getDevModel_bq() {
        String mdl = getStrippedBuildModel(102);
        /*if (mdl.equals("AQUARIS 3.5")) {
            return "Aquaris 3.5" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 6, 153600, 3.5f, 6);
        }*/
        /*if (mdl.equals("AQUARIS 4")) {
            return "Aquaris 4" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 6, 384000, 4.0f);
        }*/
        if (mdl.equals("AQUARIS 5")) {
            return "Aquaris 5" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        /*if (mdl.equals("AQUARIS 5 HD")) {
            return "Aquaris 5 HD" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 6);
        }*/
        if (mdl.equals("AQUARIS 5.7")) {
            return "Aquaris 5.7" + batCap(4000, 3, 6, 2073600, 5.7f, 6);
        }
        if (mdl.equals("AQUARIS A4.5")) {
            return "Aquaris A4.5" + batCap(2470, 1, 6, 518400, 4.5f, 7);
        }
        if (mdl.equals("AQUARIS E4")) {
            return "Aquaris E4" + batCap(1700, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("AQUARIS E4.5")) {
            return "Aquaris E4.5" + batCap(2150, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("AQUARIS E5")) {
            return "Aquaris E5" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("AQUARIS E5 4G")) {
            return "Aquaris E5 4G" + batCap(2850, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("AQUARIS E5 FHD")) {
            return "Aquaris E5 FHD" + batCap(2500, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("AQUARIS E5 HD")) {
            return "Aquaris E5 HD" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("AQUARIS E6")) {
            return "Aquaris E6" + batCap(4000, 3, 6, 2073600, 6.0f);
        }
        if (mdl.equals("AQUARIS E10")) {
            return "Aquaris E10" + batCap(8680, 4, 6, 2304000, 10.1f);
        }
        if (mdl.equals("AQUARIS E10 3G")) {
            return "Aquaris E10 3G" + batCap(8680, 4, 6, 2304000, 10.1f);
        }
        if (mdl.equals("AQUARIS M4.5")) {
            return "Aquaris M4.5" + batCap(2470, 1, 6, 518400, 4.5f, 7);
        }
        if (mdl.equals("AQUARIS M5")) {
            return "Aquaris M5" + batCap(3120, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("AQUARIS M5.5")) {
            return "Aquaris M5.5" + batCap(3620, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("CURIE 2")) {
            return "Curie 2" + batCap(5000, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("EDISON 2")) {
            return "Edison 2" + batCap(8600, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("EDISON 3")) {
            return "Edison 3" + batCap(7000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("EDISON 3 MINI")) {
            return "Edison 3 mini" + batCap(4500, 4, 6, 1024000, 8.0f, 3);
        }
        if (mdl.equals("ELCANO")) {
            return "Elcano" + batCap(4300, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("ELCANO 2")) {
            return "Elcano 2" + batCap(4000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("MAXWELL 2")) {
            return "Maxwell 2" + batCap(4300, 4, 6, 1024000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Casio() {
        if (getStrippedBuildModel(DEVMANUF_CASIO).equals("C811 4G")) {
            return "G'zOne Commando 4G LTE" + batCap(1800, 1, 1, 384000, 4.0f);
        }
        return "";
    }

    private static String getDevModel_CAT() {
        String mdl = getStrippedBuildModel(60);
        if (mdl.equals("B15")) {
            return "B15" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("B15Q")) {
            return "B15Q" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("S30")) {
            return "S30" + batCap(3000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("S40")) {
            return "S40" + batCap(3000, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("S50")) {
            return "S50" + batCap(2630, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_Celkon() {
        String mdl = getStrippedBuildModel(DEVMANUF_CELKON);
        if (mdl.equals("A43")) {
            return "Campus Evoke (A43)" + batCap(1400, 1, 6, 384000, 4.0f, 6);
        }
        /*if (mdl.equals("A119Q")) {
            return "Signature HD (A119Q)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }*/
        if (mdl.equals("A350")) {
            return "Campus Mini (A350)" + batCap(1500, 1, 1, 153600, 3.5f, 6);
        }
        /*if (mdl.equals("A359")) {
            return "Campus (A359)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        if (mdl.equals("A401")) {
            return "Campus Colt (A401)" + batCap(1400, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A403")) {
            return "Campus (A403)" + batCap(1400, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A404")) {
            return "Campus Buddy (A404)" + batCap(1500, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("A500")) {
            return "Signature Two (A500)" + batCap(2000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("CT695")) {
            return "Xion S (CT695)" + batCap(2500, 4, 6, 614400, 6.95f);
        }
        if (mdl.equals("Q5")) {
            return "Millenium Glory (Q5)" + batCap(1800, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("Q40")) {
            return "Campus Crown (Q40)" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("Q42")) {
            return "Campus Whizz (Q42)" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("Q44")) {
            return "Millenium Dazzle (Q44)" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("Q54")) {
            return "Millenia ME (Q54)" + batCap(2000, 1, 6, 384000, 5.0f);
        }
        if (mdl.equals("Q54+")) {
            return "Millenia ME (Q54+)" + batCap(2000, 1, 6, 384000, 5.0f);
        }
        if (mdl.equals("Q58")) {
            return "Xplore (Q58)" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("Q452")) {
            return "Millenia (Q452)" + batCap(1500, 1, 6, 384000, 4.5f);
        }
        if (mdl.equals("Q455")) {
            return "Millenium Vogue (Q455)" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("Q455L")) {
            return "Millenia (Q455L)" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("Q500")) {
            return "Millenium Ultra (Q500)" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("Q550")) {
            return "Millenia Epic (Q550)" + batCap(3500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("Q3000")) {
            return "Millenium Power (Q3000)" + batCap(2500, 1, 1, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Cherry() {
        String mdl = getStrippedBuildModel(11);
        if (mdl.equals("A140")) {
            return "Fusion Aura" + batCap(2600, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("AMBER W380")) {
            return "Amber W380" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("FLARE2X")) {
            return "Flare 2X" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("FLARE S3")) {
            return "Flare S3" + batCap(4000, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("H340")) {
            return "Ultra" + batCap(2000, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("H500")) {
            return "Cosmos Z2" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("H860")) {
            return "Flare 3" + batCap(1980, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("H940")) {
            return "One" + batCap(1780, 1, 6, 409920, 4.5f);
        }
        /*if (mdl.equals("I100")) {
            return "i100" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        if (mdl.equals("OMEGA XL")) {
            return "Omega XL" + batCap(2500, 3, 1, 518400, 6.0f);
        }
        if (mdl.equals("PC1038")) {
            return "PC1038" + batCap(6000, 4, 1, 1024000, 10.1f);
        }
        if (mdl.equals("RAZOR")) {
            return "Razor" + batCap(1750, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("SONIC 2.0")) {
            return "Sonic 2.0" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("X160")) {
            return "Cosmos One" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("X210")) {
            return "Infinix Pure XL" + batCap(2600, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("X220")) {
            return "Cosmos One Plus" + batCap(2700, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("X330")) {
            return "Flare S3 Octa" + batCap(1800, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X360")) {
            return "Flare X" + batCap(3000, 3, 6, 2073600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Chuwi() {
        String mdl = getStrippedBuildModel(DEVMANUF_CHUWI);
        if (mdl.equals("CW-VI7")) {
            return "Vi7" + batCap(2500, 4, 1, 614400, 7.0f, 7);
        }
        if (mdl.equals("CW-VI10")) {
            return "Vi10" + batCap(8000, 4, 6, 1049088, 10.6f, 4);
        }
        return "";
    }

    private static String getDevModel_CKK() {
        if (getStrippedBuildModel(127).equals("S21")) {
            return "S21" + batCap(0, 1, 1, 384000, 4.0f);
        }
        return "";
    }

    private static String getDevModel_CloudFone() {
        String mdl = getStrippedBuildModel(12);
        if (mdl.startsWith("CLOUDPAD")) {
            if (mdl.equals("CLOUDPAD 10.1QTV")) {
                return "CloudPad 10.1qTV" + batCap(0, 4);
            }
            if (mdl.equals("CLOUDPAD 700D")) {
                return "CloudPad 700d" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("CLOUDPAD 700FHD")) {
                return "CloudPad 700FHD" + batCap(0, 4, 6, 2073600, 7.0f);
            }
            if (mdl.equals("CLOUDPAD 700QTV")) {
                return "CloudPad 700qTV" + batCap(0, 4);
            }
            if (mdl.equals("CLOUDPAD 701E")) {
                return "CloudPad 701e" + batCap(2500, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("CLOUDPAD 701Q")) {
                return "CloudPad 701q" + batCap(3000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("CLOUDPAD 701TV")) {
                return "CloudPad 701TV" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("CLOUDPAD 707QW")) {
                return "CloudPad 707qw" + batCap(0, 4);
            }
            if (mdl.equals("CLOUDPAD 800QW")) {
                return "CloudPad 800qw" + batCap(0, 4, 1, 786432, 8.0f);
            }
            if (mdl.equals("CLOUDPAD 800W")) {
                return "CloudPad 800w" + batCap(4600, 4, 1, 786432, 7.85f);
            }
            if (mdl.equals("CLOUDPAD 801TV")) {
                return "CloudPad 801TV" + batCap(4000, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("CLOUDPAD 900TV")) {
                return "CloudPad 900TV" + batCap(0, 4);
            }
        }
        if (mdl.equals("EPIC 6.95")) {
            return "Epic 6.95" + batCap(0, 4);
        }
        if (mdl.startsWith("EXCITE")) {
            if (mdl.equals("EXCITE 355G")) {
                return "Excite 355g" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("EXCITE 356G")) {
                return "Excite 356g" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("EXCITE 400DX")) {
                return "Excite 400dx" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("EXCITE 401DX")) {
                return "Excite 401dx" + batCap(3000, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("EXCITE 401DX+")) {
                return "Excite 401dx+" + batCap(3000, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("EXCITE 451Q")) {
                return "Excite 451q" + batCap(1700, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("EXCITE 452Q")) {
                return "Excite 452q" + batCap(0, 1);
            }
            if (mdl.equals("EXCITE 501D")) {
                return "Excite 501d" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("EXCITE 501O")) {
                return "Excite 501o" + batCap(2250, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("EXCITE 502Q")) {
                return "Excite 502q" + batCap(1800, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("EXCITE 504D")) {
                return "Excite 504d" + batCap(2000, 1, 1, 409920, 5.0f);
            }
        }
        if (mdl.equals("GEO 402Q")) {
            return "Geo 402q" + batCap(0, 1, 6, 409920, 4.0f);
        }
        if (mdl.equals("ICE 350E")) {
            return "Ice 350e" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("ICE 352E")) {
            return "Ice 352e" + batCap(0, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("ICE 353E")) {
            return "Ice 353e" + batCap(0, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("ICE 401E")) {
            return "Ice 401e" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("ICE 402E")) {
            return "Ice 402e" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("ONE 7.0")) {
            return "One 7.0" + batCap(0, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("THRILL 400QX")) {
            return "Thrill 400qx" + batCap(0, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("THRILL 501Q")) {
            return "Thrill 501q" + batCap(1700, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("THRILL 530QX")) {
            return "Thrill 530qx" + batCap(4500, 3, 6, 518400, 5.3f);
        }
        if (mdl.equals("THRILL 550Q")) {
            return "Thrill 550q" + batCap(2400, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("THRILL 600FHD")) {
            return "Thrill 600FHD" + batCap(3000, 3, 6, 2073600, 6.0f);
        }
        return "";
    }

    private static String getDevModel_Colorfly() {
        String mdl = getStrippedBuildModel(103);
        if (mdl.equals("G708")) {
            return "G708" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("G708 OC")) {
            return "G708 Oc" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("G808")) {
            return "G808" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        return "";
    }

    private static String getDevModel_ConCorde() {
        String mdl = getStrippedBuildModel(61);
        if (mdl.equals("5500")) {
            return "Smartphone 5500" + batCap(2500, 3, 6, 518400, 5.5f, 7);
        }
        if (mdl.equals("BLACKBIRD")) {
            return "BlackBird" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RAPTOR Z10")) {
            return "Raptor Z10" + batCap(2500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("RAPTOR Z20")) {
            return "Raptor Z20" + batCap(3600, 1, 6, 384000, 3.5f);
        }
        if (mdl.equals("RAPTOR Z40")) {
            return "Raptor Z40" + batCap(4000, 1, 6, 921600, 4.7f, 7);
        }
        if (mdl.equals("READMAN 6")) {
            return "ReadMan 6" + batCap(1800, 4, 30, 776192, 6.0f);
        }
        if (mdl.startsWith("SMARTPHONE ")) {
            if (mdl.equals("SMARTPHONE 4000")) {
                return "Smartphone 4000" + batCap(1600, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SMARTPHONE 4300")) {
                return "Smartphone 4300" + batCap(2200, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("SMARTPHONE 4500")) {
                return "Smartphone 4500" + batCap(1600, 1, 1, 518400, 4.5f, 7);
            }
            if (mdl.equals("SMARTPHONE 5000")) {
                return "Smartphone 5000" + batCap(2800, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("SMARTPHONE 5001")) {
                return "Smartphone 5001" + batCap(2800, 1, 6, 518400, 5.0f, 7);
            }
            if (mdl.equals("SMARTPHONE 5005 NFC")) {
                return "Smartphone 5005 NFC" + batCap(1830, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("SMARTPHONE 5500")) {
                return "Smartphone 5500" + batCap(2500, 3, 6, 518400, 5.5f, 7);
            }
            if (mdl.equals("SMARTPHONE 5580 GRAND")) {
                return "Smartphone 5580 Grand" + batCap(2000, 3, 1, 518400, 5.5f, 7);
            }
            if (mdl.equals("SMARTPHONE 5700")) {
                return "Smartphone 5700" + batCap(3600, 3, 6, 921600, 5.7f, 7);
            }
            if (mdl.equals("SMARTPHONE6500") || mdl.equals("SMARTPHONE 6500")) {
                return "Smartphone 6500" + batCap(3500, 3, 6, 2073600, 6.44f, 7);
            }
            if (mdl.equals("SMARTPHONE 6500 PLUS")) {
                return "Smartphone 6500 Plus" + batCap(3600, 3, 6, 2073600, 6.44f, 7);
            }
            if (mdl.equals("SMARTPHONE ARC")) {
                return "Smartphone Arc" + batCap(2300, 1, 6, 518400, 5.0f, 7);
            }
            if (mdl.equals("SMARTPHONE MUSE")) {
                return "Smartphone Muse" + batCap(1600, 1, 1, 384000, 4.0f);
            }
        }
        if (mdl.startsWith("TAB ")) {
            if (mdl.equals("TAB 7.1")) {
                return "Tab 7.1" + batCap(3500, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB 9.7 IPS")) {
                return "Tab 9.7 IPS" + batCap(3750, 4, 6, 786432, 9.7f);
            }
            if (mdl.equals("TAB 9.7 IPS PLUS")) {
                return "Tab 9.7 IPS Plus" + batCap(7200, 4, 6, 786432, 9.7f);
            }
            if (mdl.equals("TAB 10.1")) {
                return "Tab 10.1" + batCap(4000, 4, 1, 614400, 10.0f);
            }
            if (mdl.equals("TAB 7015")) {
                return "Tab 7015" + batCap(3200, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB 7020")) {
                return "Tab 7020" + batCap(3500, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB 7030")) {
                return "Tab 7030" + batCap(4600, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB AMAZON")) {
                return "Tab Amazon" + batCap(4000, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("TAB DRACO")) {
                return "Tab Draco" + batCap(3400, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB KRONOS")) {
                return "Tab Kronos" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB KRONOS IPS")) {
                return "Tab Kronos IPS" + batCap(3200, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB NOVUM")) {
                return "Tab Novum" + batCap(7600, 4, 6, 786432, 9.7f);
            }
            if (mdl.equals("TAB ONE")) {
                return "Tab One" + batCap(3000, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB ONE 16GB")) {
                return "Tab One 16GB" + batCap(3000, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB PLAY 16GB")) {
                return "Tab Play 16GB" + batCap(4000, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("TAB Q10")) {
                return "Tab Q10" + batCap(6200, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("TAB RAY")) {
                return "Tab Ray" + batCap(2500, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB ROKEE")) {
                return "Tab Rokee" + batCap(3400, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB ROKEE C")) {
                return "Tab Rokee C" + batCap(3400, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB SLIM 8GB")) {
                return "Tab Slim 8GB" + batCap(4000, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("TAB SLIM 16GB")) {
                return "Tab Slim 16GB" + batCap(4000, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("TAB SPEED")) {
                return "Tab Speed" + batCap(3200, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("TAB T10")) {
                return "Tab T10" + batCap(8000, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("TAB VIVO")) {
                return "Tab Vivo" + batCap(3500, 4, 1, 786432, 7.85f);
            }
        }
        return "";
    }

    private static String getDevModel_Coolpad() {
        String mdl = getStrippedBuildModel(81);
        if (mdl.equals("801E")) {
            return "Quattro II 4G" + batCap(1800, 1, 1, 518400, 4.5f, 6);
        }
        if (mdl.equals("5560S")) {
            return "Arise" + batCap(1600, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("8297-T01")) {
            return "Dashen F1 Plus" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("8676-A01")) {
            return "Dazen Note 3" + batCap(3000, 3, 1, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Cube() {
        String mdl = getStrippedBuildModel(107);
        if (mdl.equals("T8-PLUS")) {
            return "T8 Plus" + batCap(4000, 4, 6, 2304000, 8.0f);
        }
        if (mdl.equals("U7GT")) {
            return "T7 4G" + batCap(3500, 4, 6, 2304000, 7.0f, 1);
        }
        if (mdl.equals("U27GT")) {
            return "Talk 8" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("U27GT-3G")) {
            return "Talk 8H" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("U27GT-C8")) {
            return "Talk 8X" + batCap(4900, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("U31GT")) {
            return "Talk10" + batCap(7500, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("U39GT")) {
            return "U39GT" + batCap(5200, 4, 2, 2457600, 9.0f);
        }
        if (mdl.equals("U51GT-C4")) {
            return "Talk 7X C4" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("U51GT-C8")) {
            return "Talk 7X C8" + batCap(2700, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("U55GT-C8")) {
            return "Talk79" + batCap(4900, 4, 1, 3145728, 7.85f);
        }
        if (mdl.equals("U65GT")) {
            return "Talk 9X" + batCap(SOC_TI, 4, 6, 3145728, 9.7f, 7);
        }
        return "";
    }

    private static String getDevModel_Cubieboard() {
        if (getStrippedBuildModel(DEVMANUF_CUBIEBOARD).equals("SOFTCUBIE")) {
            String dev = Build.DEVICE.trim().toUpperCase();
            if (dev.equals("SUGAR-CUBIEBOARD2")) {
                return "Cubieboard 2" + batCap(0, 12);
            }
            if (dev.equals("SUGAR-CUBIETRUCK")) {
                return "Cubietruck" + batCap(0, 12);
            }
        }
        return "";
    }

    private static String getDevModel_Cubot() {
        String mdl = getStrippedBuildModel(13);
        if (mdl.equals("A880")) {
            return "A880" + batCap(0, 1);
        }
        if (mdl.equals("A890")) {
            return "A890" + batCap(2500, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("A6589S")) {
            return "A6589S" + batCap(3600, 3, 6, 921600, 5.8f);
        }
        if (mdl.equals("BOBBY")) {
            return "Bobby" + batCap(3400, 1, 6, 518400, 5.0f);
        }
        /*if (mdl.equals("C6")) {
            return "C6" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 6, 384000, 4.3f);
        }*/
        if (mdl.equals("C7+")) {
            return "C7+" + batCap(1100, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("C9+")) {
            return "C9+" + batCap(1650, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("C9W")) {
            return "C9W" + batCap(1650, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("C10+")) {
            return "C10+" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("C11")) {
            return "C11" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("GT72")) {
            return "GT72" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GT88")) {
            return "GT88" + batCap(2200, 3, 1, 518400, 5.5f, 6);
        }
        if (mdl.equals("GT90")) {
            return "GT90" + batCap(1550, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GT95")) {
            return "GT95" + batCap(1350, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("GT99")) {
            return "GT99" + batCap(2200, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("H1")) {
            return "H1" + batCap(5200, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("ONE")) {
            return "One" + batCap(2200, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("P5")) {
            return "P5" + batCap(2200, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("P6")) {
            return "P6" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("P7")) {
            return "P7" + batCap(1600, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("P9")) {
            return "P9" + batCap(2200, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("P10")) {
            return "P10" + batCap(1800, 1, 1, 518400, 5.0f, 6);
        }
        if (mdl.equals("P11")) {
            return "P11" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("S108")) {
            return "S108" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("S168")) {
            return "S168" + batCap(1900, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("S200")) {
            return "S200" + batCap(3300, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("S208")) {
            return "S208" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("S222")) {
            return "S222" + batCap(2350, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("S308")) {
            return "S308" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("S350")) {
            return "S350" + batCap(2350, 3, 6, 921600, 5.5f);
        }
        /*if (mdl.equals("T9")) {
            return "T9" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 2073600, 5.0f);
        }*/
        if (mdl.equals("X6")) {
            return "X6" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X9")) {
            return "X9" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X10")) {
            return "X10" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("X11")) {
            return "X11" + batCap(2850, 3, 13, 921600, 5.5f);
        }
        if (mdl.equals("X12")) {
            return "X12" + batCap(2200, 1, 6, 518400, 5.0f, 7);
        }
        if (mdl.equals("X15")) {
            return "X15" + batCap(2750, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("ZORRO 001")) {
            return "Zorro 001" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        return "";
    }

    private static String getDevModel_Dell() {
        String mdl = getStrippedBuildModel(72);
        if (mdl.equals("VENUE 7 HSPA+")) {
            return "Venue 7 HSPA+" + batCap(4100, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("VENUE 8 3830")) {
            return "Venue 8 3830" + batCap(4100, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("VENUE8 3840")) {
            return "Venue 8 3840" + batCap(4550, 4, 6, 2304000, 8.0f, 8);
        }
        if (mdl.equals("VENUE 8 7840")) {
            return "Venue 8 7840" + batCap(5900, 4, 22, 4096000, 8.4f, 9);
        }
        if (mdl.equals("VENUE 8 WIFI")) {
            return "Venue 8 WiFi" + batCap(0, 4);
        }
        return "";
    }

    private static String getDevModel_Dexp() {
        String mdl = getStrippedBuildModel(76);
        if (mdl.equals("IXION EL150 CHARGER")) {
            return "Ixion EL150 Charger" + batCap(4500, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("IXION ENERGY")) {
            return "Ixion Energy" + batCap(5000, 1, 9, 2073600, 5.0f);
        }
        if (mdl.equals("IXION ES 4")) {
            return "Ixion ES 4" + batCap(1500, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("IXION M 5")) {
            return "Ixion M 5" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("IXION ML4.5\"")) {
            return "Ixion ML 4.5" + batCap(4000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("IXION ML 5")) {
            return "Ixion ML 5" + batCap(4400, 1, 9, 921600, 5.0f);
        }
        if (mdl.equals("IXION M LTE 5")) {
            return "Ixion M LTE 5" + batCap(2300, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("IXION P 4")) {
            return "Ixion P 4" + batCap(3200, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("IXION X 4.7")) {
            return "Ixion X 4.7" + batCap(2000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("IXION X 5")) {
            return "Ixion X 5" + batCap(4000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("IXION X250 OCTAVA")) {
            return "Ixion X250 OctaVa" + batCap(3000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("IXION XL 5")) {
            return "Ixion XL 5" + batCap(5000, 1, 9, 2073600, 5.0f);
        }
        if (mdl.equals("IXION XL145 SNATCH")) {
            return "Ixion XL145 Snatch" + batCap(4000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("IXION XL240 TRIFORCE")) {
            return "Ixion XL240 Triforce" + batCap(3000, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("IXION XL 5")) {
            return "Ixion XL 5" + batCap(5000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("IXION X LTE 4.5")) {
            return "Ixion X LTE 4.5" + batCap(1800, 1, 6, 518400, 4.5f, 7);
        }
        if (mdl.equals("IXION Y 5")) {
            return "Ixion Y 5" + batCap(2500, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("URSUS 8X 3G")) {
            return "Ursus 8X 3G" + batCap(5100, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("URSUS 9X 3G")) {
            return "Ursus 9X 3G" + batCap(SOC_TI, 4, 6, 3145728, 9.7f, 7);
        }
        if (mdl.equals("URSUS NS110")) {
            return "Ursus NS110" + batCap(8000, 4, 6, 1024000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_Digma() {
        String mdl = getStrippedBuildModel(DEVMANUF_DIGMA);
        if (mdl.equals("HIT 4G HT7074ML")) {
            return "Hit 4G HT7074ML" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("HIT HT7070MG")) {
            return "Hit HT7070MG" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("IDXQ5")) {
            return "iDxQ5" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_DNS() {
        String mdl = getStrippedBuildModel(DEVMANUF_DNS);
        if (mdl.equals("AIRTAB MA7001")) {
            return "AirTab MA7001" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("S4010")) {
            return "S4010" + batCap(1450, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("S5008")) {
            return "S5008" + batCap(2700, 1, 6, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Doogee() {
        String mdl = getStrippedBuildModel(14);
        if (mdl.startsWith("DG")) {
            if (mdl.equals("DG100")) {
                return "CoLLo DG100" + batCap(2000, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("DG110")) {
                return "CoLLo3 DG110" + batCap(1500, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("DG120")) {
                return "CoLLo2 DG120" + batCap(3000, 1, 6, 153600, 3.5f);
            }
            if (mdl.equals("DG130")) {
                return "Moon DG130" + batCap(1250, 1, 6, 384000, 4.3f, 6);
            }
            if (mdl.equals("DG150")) {
                return "Titans DG150" + batCap(1500, 1, 6, 153600, 3.5f, 6);
            }
            if (mdl.equals("DG200")) {
                return "Hotwind DG200" + batCap(2200, 1, 6, 409920, 4.7f);
            }
            if (mdl.equals("DG210")) {
                return "Rainbow DG210" + batCap(1600, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("DG280")) {
                return "Leo DG280" + batCap(1800, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DG300")) {
                return "Voyager DG300" + batCap(2500, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("DG310")) {
                return "Voyager2 DG310" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("DG330")) {
                return "Mint DG330" + batCap(1700, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("DG350")) {
                return "Pixels DG350" + batCap(2200, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("DG450")) {
                return "Latte DG450" + batCap(2300, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("DG500")) {
                return "Discovery DG500" + batCap(2800, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("DG500C")) {
                return "Discovery DG500C" + batCap(2800, 1, 6, 518400, 5.0f, 6);
            }
            if (mdl.equals("DG510")) {
                return "Find DG510" + batCap(2500, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("DG550")) {
                return "Dagger DG550" + batCap(2600, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("DG580")) {
                return "KissMe DG580" + batCap(2500, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("DG600")) {
                return "BigBoy DG600" + batCap(3800, 3, 1, 518400, 6.0f, 6);
            }
            if (mdl.equals("DG650")) {
                return "Max DG650" + batCap(3500, 3, 6, 2073600, 6.5f);
            }
            if (mdl.equals("DG650S")) {
                return "Max DG650S" + batCap(3500, 3, 8, 2073600, 6.5f);
            }
            if (mdl.equals("DG685")) {
                return "DG-Phablet DG685" + batCap(3600, 3, 6, 518400, 6.85f, 6);
            }
            if (mdl.equals("DG700")) {
                return "Titans2 DG700" + batCap(4000, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("DG750")) {
                return "Iron Bone DG750" + batCap(2000, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("DG800")) {
                return "Valencia DG800" + batCap(2000, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("DG850")) {
                return "Hitman DG850" + batCap(2500, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("DG900")) {
                return "Turbo2 DG900" + batCap(2500, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("DG2014")) {
                return "Turbo DG2014" + batCap(1750, 1, 6, 921600, 5.0f);
            }
        }
        if (mdl.equals("F1")) {
            return "Turbo-mini F1" + batCap(1700, 1, 6, 518400, 4.5f, 7);
        }
        if (mdl.equals("F2")) {
            return "Ibiza F2" + batCap(2500, 1, 6, 518400, 5.0f, 7);
        }
        if (mdl.equals("F3")) {
            return "F3" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("F3 PRO")) {
            return "F3 Pro" + batCap(2200, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("F5")) {
            return "F5" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X5")) {
            return "Galicia X5" + batCap(2400, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X5PRO")) {
            return "Galicia X5 Pro" + batCap(2400, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("S6000")) {
            return "S6000" + batCap(6000, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("Y100")) {
            return "Valencia 2 Y100" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("Y100 PLUS")) {
            return "Valencia 2 Y100 Plus" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("Y100 PRO") || mdl.equals("VALENCIA2_Y100PRO")) {
            return "Valencia 2 Y100 Pro" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Y100X")) {
            return "Nova Y100X" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Y200")) {
            return "Y200" + batCap(2200, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_DPS() {
        if (getStrippedBuildModel(DEVMANUF_DPS).equals("DREAM 7")) {
            return "Dream 7" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_DTC() {
        String mdl = getStrippedBuildModel(63);
        if (mdl.equals("GT5S")) {
            return "GT5S Junior" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("GT6")) {
            return "GT6 Jack" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GT6B")) {
            return "GT6B Black Jack" + batCap(0, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GT6C")) {
            return "GT6C Jack Plus" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GT6S")) {
            return "GT6S Speed Plus" + batCap(0, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GT6X")) {
            return "GT6X Speed 2G" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GT7")) {
            return "GT7 Max" + batCap(2500, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("GT8")) {
            return "GT8 Bit" + batCap(2500, 1, 1, 409920, 4.6f);
        }
        if (mdl.equals("GT9")) {
            return "GT9 Pump" + batCap(2500, 1, 1, 384000, 5.0f);
        }
        if (mdl.equals("GT10")) {
            return "GT10 Bullet" + batCap(3000, 3, 1, 384000, 6.0f);
        }
        if (mdl.equals("GT12")) {
            return "GT12 Nick Plus" + batCap(0, 3, 1, 518400, 5.3f);
        }
        if (mdl.equals("GT15")) {
            return "GT15 Fiesta" + batCap(2700, 3, 1, 518400, 6.0f);
        }
        if (mdl.equals("GT17")) {
            return "GT17 Jupiter" + batCap(2200, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("GT17A")) {
            return "GT17A Jupiter Plus" + batCap(2200, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("GT18")) {
            return "GT18 Sparkle" + batCap(0, 1, 1, 518400, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Eachine() {
        if (getStrippedBuildModel(98).equals("M1")) {
            return "M1" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Ecoo() {
        String mdl = getStrippedBuildModel(DEVMANUF_ECOO);
        if (mdl.equals("E01")) {
            return "E01" + batCap(2450, 1, 1, 2073600, 5.2f);
        }
        if (mdl.equals("E02")) {
            return "E02" + batCap(2650, 3, 1, 518400, 5.5f);
        }
        if (mdl.equals("E02 PRO")) {
            return "E02 Pro" + batCap(2650, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("E04")) {
            return "E04" + batCap(3000, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("E04 3GB")) {
            return "E04 3GB" + batCap(3000, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("E04 PLUS")) {
            return "E04 Plus" + batCap(3000, 3, 6, 2073600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_ECS() {
        if (getStrippedBuildModel(DEVMANUF_ECS).equals("TA80TA1")) {
            return "TA80TA1" + batCap(4150, 4, 1, 1024000, 8.0f);
        }
        return "";
    }

    private static String getDevModel_Elephone() {
        String mdl = getStrippedBuildModel(83);
        if (mdl.equals("G1")) {
            return "G1" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("G2")) {
            return "G2" + batCap(2300, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("G4")) {
            return "G4" + batCap(2050, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("G7")) {
            return "G7" + batCap(2650, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("P8")) {
            return "P8" + batCap(2800, 3, 6, 2073600, 5.7f);
        }
        if (mdl.equals("P2000")) {
            return "P2000" + batCap(2650, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("P3000")) {
            return "P3000" + batCap(3150, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("P3000S")) {
            return "P3000S" + batCap(3150, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("P3000S-64BIT")) {
            return "P3000S-64bit" + batCap(3150, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("P5000")) {
            return "P5000" + batCap(5350, 1, 1, 2073600, 5.0f);
        }
        if (mdl.equals("P6000")) {
            return "P6000" + batCap(2700, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("P7000")) {
            return "P7000" + batCap(3450, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("P8000")) {
            return "P8000" + batCap(4200, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("VOWNEY")) {
            return "Vowney" + batCap(4000, 3, 1, 3686400, 5.5f);
        }
        if (mdl.equals("VOWNEY LITE")) {
            return "Vowney Lite" + batCap(4000, 3, 1, 2073600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_EnergySistem() {
        String mdl = getStrippedBuildModel(95);
        if (mdl.equals("ENERGY EREADER PRO")) {
            return "Energy eReader Pro" + batCap(2800, 4, 30, 776192, 6.0f);
        }
        if (mdl.equals("ENERGY PHONE COLORS")) {
            return "Energy Phone Colors" + batCap(1450, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("ENERGY PHONE MAX")) {
            return "Energy Phone Max" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("ENERGY PHONE NEO")) {
            return "Energy Phone Neo" + batCap(1400, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("ENERGY PHONE PRO")) {
            return "Energy Phone Pro" + batCap(2300, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("ENERGY PHONE PRO HD")) {
            return "Energy Phone Pro HD" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("ENERGY PHONE PRO QI")) {
            return "Energy Phone Pro QI" + batCap(2300, 1, 6, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Escort() {
        if (getStrippedBuildModel(DEVMANUF_ESCORT).equals("ES702")) {
            return "Joye ES702" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Explay() {
        String mdl = getStrippedBuildModel(100);
        if (mdl.equals("FRESH")) {
            return "Fresh" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GOLF")) {
            return "Golf" + batCap(1600, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("INDIGO")) {
            return "Indigo" + batCap(2500, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_Faea() {
        if (getStrippedBuildModel(93).equals("HY508")) {
            return "HY508" + batCap(2000, 1, 1, 921600, 4.5f);
        }
        return "";
    }

    private static String getDevModel_Fly() {
        String mdl = getStrippedBuildModel(15);
        if (mdl.equals("E158")) {
            return "E158" + batCap(950, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ238")) {
            return "Jazz (IQ238)" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ239")) {
            return "Era Nano 2 (IQ239)" + batCap(1100, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ431")) {
            return "Glory (IQ431)" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ432")) {
            return "Era Nano 1 (IQ432)" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ434")) {
            return "Era Nano 5 (IQ434)" + batCap(1000, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ436I")) {
            return "Era Nano 9 (IQ436i)" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IQ442 QUAD")) {
            return "Miracle 2 (IQ442 Quad)" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("IQ445")) {
            return "Genius (IQ445)" + batCap(1600, 1, 1, 384000, 4.0f);
        }
        /*if (mdl.equals("IQ446") || mdl.equals("IQ446 MAGIC")) {
            return "Magic (IQ446)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.5f);
        }*/
        if (mdl.equals("IQ447")) {
            return "Era Life 1 (IQ447)" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ449")) {
            return "Pronto (IQ449)" + batCap(1350, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ451")) {
            return "Vista (IQ451)" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        /*if (mdl.equals("IQ453 QUAD")) {
            return "Luminor FHD (IQ453 Quad)" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 6, 2073600, 5.0f);
        }*/
        if (mdl.equals("IQ454")) {
            return "Evo Tech 1 (IQ454)" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("IQ457 QUAD")) {
            return "Universe 5.7 (IQ457 Quad)" + batCap(3200, 3, 6, 921600, 5.7f);
        }
        if (mdl.equals("IQ459 QUAD")) {
            return "Evo Chic 2 (IQ459 Quad)" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("IQ4400")) {
            return "Era Nano 8 (IQ4400)" + batCap(1250, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ4401")) {
            return "Era Energy 2 (IQ4401)" + batCap(2500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ4403")) {
            return "Energy 3 (IQ4403)" + batCap(4000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("IQ4404")) {
            return "Spark (IQ4404)" + batCap(1750, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("IQ4406")) {
            return "Era Nano 6 (IQ4406)" + batCap(1600, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("IQ4409 QUAD")) {
            return "Era Life 4 (IQ4409 Quad)" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("IQ4411")) {
            return "Energy 2 (IQ4411 Quad)" + batCap(3000, 1, 1, 409920, 4.65f);
        }
        if (mdl.equals("IQ4414 QUAD")) {
            return "Evo Tech 3 (IQ4414 Quad)" + batCap(1700, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("IQ4415 QUAD")) {
            return "Era Style 3 (IQ4415 Quad)" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("IQ4416")) {
            return "Era Life 5 (IQ4416)" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("IQ4417 QUAD")) {
            return "Era Energy 3 (IQ4417 Quad)" + batCap(3000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("IQ4418")) {
            return "Era Style 4 (IQ4418)" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ4490I")) {
            return "Era Nano 10 (IQ4490i)" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IQ4502 QUAD")) {
            return "Era Energy 1 (IQ4502 Quad)" + batCap(4000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("IQ4503 QUAD")) {
            return "Era Life 6 (IQ4503 Quad)" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("IQ4504 QUAD")) {
            return "Evo Energy 5 (IQ4504 Quad)" + batCap(4000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("IQ4505 QUAD")) {
            return "Era Life 7 (IQ4505 Quad)" + batCap(1800, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("IQ4511 OCTA")) {
            return "Tornado One (IQ4511 Octa)" + batCap(1920, 1, 6, 921600, 5.0f);
        }
        /*if (mdl.equals("IQ4512 QUAD")) {
            return "Evo Chic 4 (IQ4512 Quad)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }*/
        if (mdl.equals("IQ4514 QUAD")) {
            return "Evo Tech 4 (IQ4514 Quad)" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("IQ4516 OCTA")) {
            return "Tornado Slim (IQ4516 Octa)" + batCap(2050, 1, 24, 921600, 4.8f);
        }
        return "";
    }

    private static String getDevModel_Freelander() {
        String mdl = getStrippedBuildModel(82);
        if (mdl.equals("I30")) {
            return "I30" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("I50")) {
            return "I50" + batCap(2000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("PD10")) {
            return "PD10" + batCap(2800, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("PD10C")) {
            return "PD10C" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("PD20")) {
            return "PD20" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("PD60")) {
            return "PD60" + batCap(5000, 4, 1, 384000, 9.0f);
        }
        if (mdl.equals("PD80")) {
            return "PD80" + batCap(6000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("PD90")) {
            return "PD90" + batCap(7000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("PD100")) {
            return "PD100" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("PD200")) {
            return "PD200" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("PD300")) {
            return "PD300" + batCap(3500, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("PD500C")) {
            return "PD500C" + batCap(4500, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("PD800")) {
            return "PD800" + batCap(8000, 4, 1, 3145728, 9.7f);
        }
        if (mdl.equals("PD900")) {
            return "PD900" + batCap(7000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("PX1")) {
            return "PX1" + batCap(3200, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("PX1C")) {
            return "PX1C" + batCap(3200, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("PX2")) {
            return "PX2" + batCap(3200, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("PX2C")) {
            return "PX2C" + batCap(3200, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("PX3")) {
            return "PX3" + batCap(4000, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("PX4")) {
            return "PX4" + batCap(3200, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Gigabyte() {
        String mdl = getStrippedBuildModel(16);
        if (mdl.equals("GSMART AKTA A4")) {
            return "GSmart Akta A4" + batCap(1800, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("GSMART AKU A1")) {
            return "GSmart Aku A1" + batCap(2000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("GSMART ALTO A2")) {
            return "GSmart Alto A2" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("GSMART ARTY A3")) {
            return "GSmart Arty A3" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("GSMART CLASSIC")) {
            return "GSmart Classic" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        /*if (mdl.equals("GSMART CLASSIC LITE")) {
            return "GSmart Classic Lite" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 409920, 5.0f);
        }*/
        if (mdl.equals("GSMART ESSENCE")) {
            return "GSmart Essence" + batCap(1600, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("GSMART ESSENCE 4")) {
            return "GSmart Essence 4" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("GSMART G1305")) {
            return "GSmart Boston G1305" + batCap(1230, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("GSMART G1310")) {
            return "GSmart Ray G1310" + batCap(1260, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("GSMART G1315")) {
            return "GSmart Skate G1315" + batCap(1260, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("GSMART G1317")) {
            return "GSmart Rola G1317" + batCap(1260, 1, 1, 96000, 3.2f);
        }
        if (mdl.equals("GSMART G1317D")) {
            return "GSmart Rola G1317D" + batCap(1260, 1, 1, 96000, 3.2f);
        }
        if (mdl.equals("GSMART G1342")) {
            return "GSmart Houston G1342" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("GSMART G1345")) {
            return "GSmart G1345" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("GSMART G1355")) {
            return "GSmart G1355" + batCap(1500, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("GSMART G1362")) {
            return "GSmart G1362" + batCap(1550, 1, 1, 409920, 4.3f);
        }
        if (mdl.equals("GSMART GS202")) {
            return "GSmart GS202" + batCap(1500, 1, 6, 384000, 4.3f);
        }
        if (mdl.equals("GSMART GURU")) {
            return "GSmart Guru" + batCap(2500, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("GSMART GURU GX")) {
            return "GSmart Guru GX" + batCap(2300, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("GSMART GX2")) {
            return "GSmart GX2" + batCap(2200, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("GSMART MAYA M1")) {
            return "GSmart Maya M1" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("GSMART MAYA M1 V2")) {
            return "GSmart Maya M1 v2" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("GSMART MIKA M2")) {
            return "GSmart Mika M2" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GSMART MIKA M3")) {
            return "GSmart Mika M3" + batCap(1900, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GSMART MIKA MX")) {
            return "GSmart Mika MX" + batCap(3000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("GSMART REY R3")) {
            return "GSmart Rey R3" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("GSMART RIO R1")) {
            return "GSmart Rio R1" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GSMART ROMA R2")) {
            return "GSmart Roma R2" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GSMART ROMA RX")) {
            return "GSmart Roma RX" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("GSMART SAGA S3")) {
            return "GSmart Saga S3" + batCap(3000, 3, 6, 921600, 6.0f);
        }
        if (mdl.equals("GSMART SIERRA S1")) {
            return "GSmart Sierra S1" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GSMART SIMBA SX1")) {
            return "GSmart Simba SX1" + batCap(1900, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GSMART T4")) {
            return "GSmart T4" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GSMART TUKU T2")) {
            return "GSmart Tuku T2" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("J660")) {
            return "GSmart Guru G1" + batCap(2500, 1, 6, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Gigaset() {
        String mdl = getStrippedBuildModel(DEVMANUF_GIGASET);
        if (mdl.equals("QV830")) {
            return "QV830" + batCap(3260, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("QV1030")) {
            return "QV1030" + batCap(SOC_QCOM, 4, 6, 4096000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_Gionee() {
        String mdl = getStrippedBuildModel(17);
        /*if (mdl.equals("D1")) {
            return "Dream D1" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 25, 921600, 4.65f);
        }*/
        if (mdl.equals("F103")) {
            return "F103" + batCap(2400, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("F103L")) {
            return "F103L" + batCap(2400, 1, 6, 921600, 5.0f);
        }
        /*if (mdl.equals("G1")) {
            return "Gpad G1" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.0f);
        }*/
        if (mdl.equals("G2")) {
            return "Gpad G2" + batCap(3000, 3, 6, 518400, 5.3f);
        }
        if (mdl.equals("G3")) {
            return "Gpad G3" + batCap(2250, 3, 1, 409920, 5.5f);
        }
        if (mdl.equals("G4")) {
            return "Gpad G4" + batCap(3200, 3, 6, 921600, 5.7f);
        }
        if (mdl.equals("G5")) {
            return "Gpad G5" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("E3")) {
            return "Elife E3" + batCap(1800, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("E5")) {
            return "Elife E5" + batCap(2000, 1, 24, 921600, 4.8f, 6);
        }
        if (mdl.equals("E6")) {
            return "Elife E6" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("E7")) {
            return "Elife E7" + batCap(2500, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("E7 MINI")) {
            return "Elife E7 Mini" + batCap(2200, 1, 5, 921600, 4.7f, 7);
        }
        if (mdl.equals("E8")) {
            return "Elife E8" + batCap(3500, 3, 23, 3686400, 6.0f, 7);
        }
        if (mdl.equals("M2")) {
            return "M2" + batCap(4200, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("M3")) {
            return "Marathon M3" + batCap(5000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("M4")) {
            return "Marathon M4" + batCap(5000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("M5")) {
            return "Marathon M5" + batCap(SOC_EXYNOS_8890, 3, 23, 921600, 5.5f, 7);
        }
        if (mdl.equals("P1")) {
            return "Pioneer P1" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("P2")) {
            return "Pioneer P2" + batCap(1700, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("P2M")) {
            return "Pioneer P2M" + batCap(3000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("P3")) {
            return "Pioneer P3" + batCap(1700, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("P3S")) {
            return "Pioneer P3S" + batCap(2000, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("P4")) {
            return "Pioneer P4" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("P4S")) {
            return "Pioneer P4S" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("P6")) {
            return "Pioneer P6" + batCap(1950, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("S5.1")) {
            return "Elife S5.1" + batCap(2050, 1, 23, 921600, 4.8f);
        }
        if (mdl.equals("S5.1 PRO")) {
            return "Elife S5.1 Pro" + batCap(2400, 1, 23, 921600, 5.0f, 7);
        }
        if (mdl.equals("S5.5")) {
            return "Elife S5.5" + batCap(2300, 1, 24, 2073600, 5.0f, 6);
        }
        if (mdl.equals("S5.5L")) {
            return "Elife S5.5L" + batCap(2450, 1, 24, 2073600, 5.0f, 6);
        }
        if (mdl.equals("S6")) {
            return "Elife S6" + batCap(3150, 3, 23, 921600, 5.5f, 7);
        }
        if (mdl.equals("S7")) {
            return "Elife S7" + batCap(2750, 1, 24, 2073600, 5.2f, 7);
        }
        if (mdl.equals("V1")) {
            return "Ctrl V1" + batCap(1700, 1, 1, 153600, 3.9f);
        }
        if (mdl.equals("V2")) {
            return "Ctrl V2" + batCap(1500, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("V3")) {
            return "Ctrl V3" + batCap(1800, 1, 6, 384000, 4.3f);
        }
        if (mdl.equals("V4")) {
            return "Ctrl V4" + batCap(1800, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("V4S")) {
            return "Ctrl V4S" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("V5")) {
            return "Ctrl V5" + batCap(1800, 1, 6, 518400, 4.7f, 6);
        }
        if (mdl.equals("V6L")) {
            return "Ctrl V6L" + batCap(1950, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Goclever() {
        if (getStrippedBuildModel(DEVMANUF_GOCLEVER).equals("TAB M723G")) {
            return "Elipso 72 (Tab M723G)" + batCap(3300, 4, 1, 614400, 7.0f, 7);
        }
        return "";
    }

    private static String getDevModel_G() {
        if (getStrippedBuildModel(DEVMANUF_G).equals("5SC")) {
            return "5sc";
        }
        return "";
    }

    private static String getDevModel_GPlus() {
        if (getStrippedBuildModel(DEVMANUF_GPLUS).equals("5S")) {
            return "5s" + batCap(0, 1, 6, 518400, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Haier() {
        String mdl = getStrippedBuildModel(DEVMANUF_HAIER);
        if (mdl.equals("G700")) {
            return "G700" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("PAD D71")) {
            return "Pad D71" + batCap(0, 4, 1, 614400, 7.0f, 7);
        }
        if (mdl.equals("W826")) {
            return "W826" + batCap(0, 1, 1, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Haipai() {
        String mdl = getStrippedBuildModel(73);
        if (mdl.equals("I6")) {
            return "I6" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("P6S")) {
            return "P6S" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("S5")) {
            return "S5" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("S5 QUAD CORE")) {
            return "S5 Quad Core" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("X3S")) {
            return "X3S" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X3SW")) {
            return "X3sW" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        return "";
    }

    private static String getDevModel_HardKernel() {
        String mdl = getStrippedBuildModel(18);
        if (mdl.equals("ODROID-C1")) {
            return "Odroid-C1";
        }
        if (mdl.equals("ODROID-U3")) {
            return "Odroid-U3";
        }
        if (mdl.equals("ODROID-XU3")) {
            return "Odroid-XU3";
        }
        if (mdl.equals("ODROID-XU3 LITE")) {
            return "Odroid-XU3 Lite";
        }
        return "";
    }

    private static String getDevModel_Highscreen() {
        String mdl = getStrippedBuildModel(DEVMANUF_HIGHSCREEN);
        if (mdl.equals("PURE F")) {
            return "Pure F" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("THOR")) {
            return "Thor" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("ZERA F") || mdl.equals("ZERA_F")) {
            return "Zera F" + batCap(1600, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("ZERA S")) {
            return "Zera S" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        return "";
    }

    private static String getDevModel_Himax() {
        if (getStrippedBuildModel(DEVMANUF_HIMAX).equals("POLYMER")) {
            return "Polymer" + batCap(2500, 1, 1, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Hisense() {
        String mdl = getStrippedBuildModel(19);
        if (mdl.equals("E260T+")) {
            return "Nana" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("E270BSA")) {
            return "Sero 7 LT" + batCap(3400, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("E602T")) {
            return "E602T" + batCap(1900, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("E625T")) {
            return "E625T" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("E2281")) {
            return "Sero 8" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("G610M")) {
            return "G610M" + batCap(3000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("H910")) {
            return "H910" + batCap(2700, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("HS-L691")) {
            return "Sero 5" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("I632M")) {
            return "I632M" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("I639T")) {
            return "I639T" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("L681")) {
            return "L681" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("M470BSA")) {
            return "Sero 7 Pro" + batCap(4000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("X1")) {
            return "X1" + batCap(3900, 3, 6, 2073600, 6.8f);
        }
        if (mdl.equals("X5T")) {
            return "X5T" + batCap(2500, 3, 6, 518400, 5.5f);
        }
        return "";
    }

    private static String getDevModel_HP() {
        if (getStrippedBuildModel(DEVMANUF_HP).equals("SLATEBOOK 14 PC")) {
            return "SlateBook 14" + batCap(0, 4, 1, 2073600, 14.0f);
        }
        return "";
    }

    private static String getDevModel_HTC() {
        String mdl = getStrippedBuildModel(20);
        if (mdl.startsWith("0P6B")) {
            return "One M8" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
        }
        if (mdl.startsWith("0P8B") || mdl.startsWith("0PBM")) {
            return "One mini 2" + batCap(2110, 1, 18, 921600, 4.5f);
        }
        if (mdl.startsWith("0PA2")) {
            return "Desire 310" + batCap(2000, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.startsWith("0PAJ")) {
            return "One E8" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
        }
        /*if (mdl.startsWith("0PCV")) {
            return "Desire 510" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.7f, 7);
        }
        if (mdl.startsWith("0PFJ")) {
            return "Desire 820" + batCap(2600, 3, 1, 921600, 5.5f, 7);
        }
        if (mdl.equals("331ZLVWPP")) {
            return "Desire 612 (Verizon)" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 18, 518400, 4.7f);
        }
        if (mdl.equals("6500LVW")) {
            return "One (Verizon)" + batCap(2300, 1, 19, 2073600, 4.7f, 6);
        }
        if (mdl.equals("6515LVW")) {
            return "One Remix (Verizon)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 18, 921600, 4.5f, 7);
        }
        if (mdl.equals("6525LVW")) {
            return "One M8 (Verizon)" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
        }
        if (mdl.equals("6535LVW")) {
            return "One M9 (Verizon)" + batCap(2840, 1, 19, 2073600, 5.0f, 10);
        }
        if (mdl.equals("B810X")) {
            return "Butterfly 2" + batCap(2700, 1, 19, 2073600, 5.0f, 7);
        }
        if (mdl.startsWith("BUTTERFLY")) {
            if (mdl.equals("BUTTERFLY")) {
                return "Butterfly" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 19, 2073600, 5.0f, 6);
            }
            if (mdl.equals("BUTTERFLY 2")) {
                return "Butterfly 2" + batCap(2700, 1, 19, 2073600, 5.0f, 7);
            }
            if (mdl.equals("BUTTERFLY 3")) {
                return "Butterfly 3" + batCap(2700, 1, 19, 3686400, 5.2f, 10);
            }
            if (mdl.equals("BUTTERFLY S")) {
                return "Butterfly S" + batCap(3200, 1, 19, 2073600, 5.0f, 7);
            }
        }
        if (mdl.equals("D200X")) {
            return "Desire 200" + batCap(1230, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("D300X")) {
            return "Desire 300" + batCap(1650, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("D310H") || mdl.equals("D310W") || mdl.equals("D310X")) {
            return "Desire 310" + batCap(2000, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("D320T") || mdl.equals("D320W") || mdl.equals("D320X")) {
            return "Desire 320" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("D400X")) {
            return "Desire 400" + batCap(1800, 1, 18, 384000, 4.3f);
        }
        if (mdl.equals("D500X")) {
            return "Desire 500" + batCap(1800, 1, 1, 384000, 4.3f, 6);
        }
        if (mdl.equals("D501X")) {
            return "Desire 501" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("D510X")) {
            return "Desire 510" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.7f, 7);
        }
        if (mdl.equals("D516D") || mdl.equals("D516T") || mdl.equals("D516W") || mdl.equals("D516X")) {
            return "Desire 516" + batCap(1950, 1, 1, 518400, 5.0f, 6);
        }
        if (mdl.equals("D600X")) {
            return "Desire 600" + batCap(1860, 1, 18, 518400, 4.5f, 6);
        }
        if (mdl.equals("D601X")) {
            return "Desire 601" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f, 6);
        }
        if (mdl.equals("D610N") || mdl.equals("D610T") || mdl.equals("D610X")) {
            return "Desire 610" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 1, 518400, 4.7f);
        }
        if (mdl.equals("D612X")) {
            return "Desire 612" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 18, 518400, 4.7f);
        }
        if (mdl.equals("D620H") || mdl.equals("D620T") || mdl.equals("D620U") || mdl.equals("D620W") || mdl.equals("D620X")) {
            return "Desire 620" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 17, 921600, 5.0f, 7);
        }
        if (mdl.equals("D626T") || mdl.equals("D626U") || mdl.equals("D626W") || mdl.equals("D626X")) {
            return "Desire 626" + batCap(2000, 1, 1, 921600, 5.0f, 7);
        }
        if (mdl.equals("D700W") || mdl.equals("D700X")) {
            return "Desire 700" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 5.0f, 6);
        }
        if (mdl.equals("D816D") || mdl.equals("D816T") || mdl.equals("D816W") || mdl.equals("D816X")) {
            return "Desire 816" + batCap(2600, 3, 18, 921600, 5.5f, 6);
        }
        if (mdl.equals("D820H") || mdl.equals("D820T") || mdl.equals("D820U") || mdl.equals("D820W") || mdl.equals("D820X")) {
            return "Desire 820" + batCap(2600, 3, 1, 921600, 5.5f, 7);
        }
        if (mdl.equals("D826T") || mdl.equals("D826U") || mdl.equals("D826W") || mdl.equals("D826X")) {
            return "Desire 826" + batCap(2600, 3, 19, 2073600, 5.5f, 7);
        }
        if (mdl.startsWith("DESIRE")) {
            if (mdl.equals("DESIRE")) {
                return "Desire" + batCap(1400, 1, 1, 384000, 3.7f);
            }
            if (mdl.equals("DESIRE 200")) {
                return "Desire 200" + batCap(1230, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DESIRE 210")) {
                return "Desire 210" + batCap(1300, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("DESIRE 300")) {
                return "Desire 300" + batCap(1650, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE 310")) {
                return "Desire 310" + batCap(2000, 1, 1, 409920, 4.5f, 6);
            }
            if (mdl.equals("DESIRE 320")) {
                return "Desire 320" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DESIRE 400")) {
                return "Desire 400" + batCap(1800, 1, 18, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE 400 DUAL SIM")) {
                return "Desire 400 Dual SIM" + batCap(1800, 1, 18, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE 500")) {
                return "Desire 500" + batCap(1800, 1, 1, 384000, 4.3f, 6);
            }
            if (mdl.equals("DESIRE 500 DUAL SIM")) {
                return "Desire 500 Dual SIM" + batCap(1800, 1, 1, 384000, 4.3f, 6);
            }
            if (mdl.equals("DESIRE 501")) {
                return "Desire 501" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE 510")) {
                return "Desire 510" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.7f, 7);
            }
            if (mdl.equals("DESIRE 516")) {
                return "Desire 516" + batCap(1950, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("DESIRE 516T")) {
                return "Desire 516t" + batCap(1950, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("DESIRE 520")) {
                return "Desire 520" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DESIRE 526")) {
                return "Desire 526" + batCap(2000, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("DESIRE 526G")) {
                return "Desire 526G" + batCap(2000, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("DESIRE 526G+")) {
                return "Desire 526G+" + batCap(2000, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("DESIRE 600")) {
                return "Desire 600" + batCap(1860, 1, 18, 518400, 4.5f, 6);
            }
            if (mdl.equals("DESIRE 601")) {
                return "Desire 601" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f, 6);
            }
            if (mdl.equals("DESIRE 610")) {
                return "Desire 610" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("DESIRE 612")) {
                return "Desire 612" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 18, 518400, 4.7f);
            }
            if (mdl.equals("DESIRE 616")) {
                return "Desire 616" + batCap(2000, 1, 1, 921600, 5.0f);
            }
            if (mdl.equals("DESIRE 620")) {
                return "Desire 620" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 17, 921600, 5.0f, 7);
            }
            if (mdl.equals("DESIRE 620G")) {
                return "Desire 620G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 17, 921600, 5.0f);
            }
            if (mdl.equals("DESIRE 626")) {
                return "Desire 626" + batCap(2000, 1, 1, 921600, 5.0f, 7);
            }
            if (mdl.equals("DESIRE 626G")) {
                return "Desire 626G" + batCap(2000, 1, 1, 921600, 5.0f);
            }
            if (mdl.equals("DESIRE 700")) {
                return "Desire 700" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("DESIRE 700 DUAL SIM")) {
                return "Desire 700 Dual SIM" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("DESIRE 816")) {
                return "Desire 816" + batCap(2600, 3, 18, 921600, 5.5f, 6);
            }
            if (mdl.equals("DESIRE 816G")) {
                return "Desire 816G" + batCap(2600, 3, 18, 921600, 5.5f);
            }
            if (mdl.equals("DESIRE 820")) {
                return "Desire 820" + batCap(2600, 3, 1, 921600, 5.5f, 7);
            }
            if (mdl.equals("DESIRE 820G+")) {
                return "Desire 820G+" + batCap(2600, 3, 1, 921600, 5.5f);
            }
            if (mdl.equals("DESIRE 820Q")) {
                return "Desire 820q" + batCap(2600, 3, 1, 921600, 5.5f, 6);
            }
            if (mdl.equals("DESIRE 820S")) {
                return "Desire 820s" + batCap(2600, 3, 1, 921600, 5.5f, 7);
            }
            if (mdl.equals("DESIRE 826")) {
                return "Desire 826" + batCap(2600, 3, 19, 2073600, 5.5f, 7);
            }
            if (mdl.equals("DESIRE C")) {
                return "Desire C" + batCap(1230, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DESIRE EYE")) {
                return "Desire Eye" + batCap(2400, 1, 1, 2073600, 5.2f);
            }
            if (mdl.equals("DESIRE HD")) {
                return "Desire HD" + batCap(1230, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE HD2")) {
                return "Desire HD2" + batCap(1230, 1, 17, 518400, 4.3f);
            }
            if (mdl.equals("DESIRE L")) {
                return "Desire L" + batCap(1800, 1, 18, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE P")) {
                return "Desire P" + batCap(1620, 1, 18, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE Q")) {
                return "Desire Q" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE S")) {
                return "Desire S" + batCap(1450, 1, 17, 384000, 3.7f);
            }
            if (mdl.equals("DESIRE SV")) {
                return "Desire SV" + batCap(1620, 1, 18, 384000, 4.3f);
            }
            if (mdl.equals("DESIRE U")) {
                return "Desire U" + batCap(1650, 1, 17, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE V")) {
                return "Desire V" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE VC")) {
                return "Desire VC" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE VT")) {
                return "Desire VT" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE X")) {
                return "Desire X" + batCap(1650, 1, 17, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE XC")) {
                return "Desire XC" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DESIRE Z")) {
                return "Desire Z" + batCap(1300, 1, 17, 384000, 3.7f);
            }
        }
        if (mdl.equals("EVO 3D X515M") || mdl.equals("PG36100")) {
            return "Evo 3D" + batCap(1730, 1, 20, 518400, 4.3f, 6);
        }
        if (mdl.equals("INSPIRE")) {
            return "Inspire" + batCap(1230, 1, 17, 384000, 4.3f, 6);
        }
        if (mdl.equals("INSPIRE 4G")) {
            return "Inspire 4G" + batCap(1230, 1, 17, 384000, 4.3f, 6);
        }
        if (mdl.equals("M9ET") || mdl.equals("M9EW")) {
            return "One ME" + batCap(2840, 1, 19, 3686400, 5.2f, 7);
        }
        if (mdl.equals("M9PW")) {
            return "One M9+" + batCap(2840, 1, 19, 3686400, 5.2f, 7);
        }
        if (mdl.equals("M9U") || mdl.equals("M9W")) {
            return "One M9" + batCap(2840, 1, 19, 2073600, 5.0f, 10);
        }
        if (mdl.equals("NEXUS 9")) {
            String prod = Build.PRODUCT.trim().toUpperCase();
            if (prod.equals("VOLANTIS")) {
                return "Nexus 9 WiFi" + batCap(6700, 4, 6, 3145728, 8.9f, 9);
            }
            if (prod.equals("VOLANTISG")) {
                return "Nexus 9 LTE" + batCap(6700, 4, 6, 3145728, 8.9f, 9);
            }
            return "Nexus 9" + batCap(6700, 4, 6, 3145728, 8.9f, 9);
        }
        if (mdl.startsWith("ONE")) {
            if (mdl.equals("ONE")) {
                return "One" + batCap(2300, 1, 19, 2073600, 4.7f, 6);
            }
            if (mdl.equals("ONE_A9") || mdl.equals("ONE A9")) {
                return "One A9" + batCap(2150, 1, 23, 2073600, 5.0f, 7);
            }
            if (mdl.equals("ONE DUAL SIM")) {
                return "One Dual SIM" + batCap(2300, 1, 19, 2073600, 4.68f, 6);
            }
            if (mdl.equals("ONE_E8") || mdl.equals("ONE E8")) {
                return "One E8" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
            }
            if (mdl.equals("ONE_E9") || mdl.equals("ONE E9")) {
                return "One E9" + batCap(2800, 3, 1, 2073600, 5.5f, 7);
            }
            if (mdl.equals("ONE_E9+") || mdl.equals("ONE E9+")) {
                return "One E9+" + batCap(2800, 3, 1, 3686400, 5.5f, 7);
            }
            if (mdl.equals("ONE_E9S") || mdl.equals("ONE E9S")) {
                return "One E9s" + batCap(2600, 3, 1, 921600, 5.5f, 7);
            }
            if (mdl.equals("ONE_M8") || mdl.equals("ONE M8")) {
                return "One M8" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
            }
            if (mdl.equals("ONE_M8 DUAL SIM")) {
                return "One M8 Dual SIM" + batCap(2600, 1, 19, 2073600, 5.0f, 7);
            }
            if (mdl.equals("ONE_M8S") || mdl.equals("ONE M8S")) {
                return "One M8s" + batCap(2840, 1, 19, 2073600, 5.0f, 7);
            }
            if (mdl.equals("ONE_M9") || mdl.equals("ONE M9")) {
                return "One M9" + batCap(2840, 1, 19, 2073600, 5.0f, 10);
            }
            if (mdl.equals("ONE_M9+") || mdl.equals("ONE M9+") || mdl.equals("ONE M9PLUS")) {
                return "One M9+" + batCap(2840, 1, 19, 3686400, 5.2f, 7);
            }
            if (mdl.equals("ONE MAX")) {
                return "One Max" + batCap(3300, 3, 19, 2073600, 5.9f, 7);
            }
            if (mdl.equals("ONE_ME") || mdl.equals("ONE ME")) {
                return "One ME" + batCap(2840, 1, 19, 3686400, 5.2f, 7);
            }
            if (mdl.equals("ONE MINI")) {
                return "One mini" + batCap(1800, 1, 18, 921600, 4.3f, 6);
            }
            if (mdl.equals("ONE MINI 2")) {
                return "One mini 2" + batCap(2110, 1, 18, 921600, 4.5f);
            }
            if (mdl.equals("ONE REMIX")) {
                return "One Remix" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 18, 921600, 4.5f, 7);
            }
            if (mdl.equals("ONE V")) {
                return "One V" + batCap(1500, 1, 18, 384000, 3.7f, 6);
            }
            if (mdl.equals("ONE X")) {
                return "One X" + batCap(1800, 1, 18, 921600, 4.7f, 6);
            }
            if (mdl.equals("ONE X+")) {
                return "One X+" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 18, 921600, 4.7f);
            }
            if (mdl.equals("ONE XL")) {
                return "One XL" + batCap(1800, 1, 18, 921600, 4.7f);
            }
            if (mdl.equals("ONE XT")) {
                return "One XT" + batCap(1800, 1, 18, 921600, 4.7f);
            }
        }
        if (mdl.equals("PG32100")) {
            return "Incredible 2" + batCap(1450, 1, 17, 384000, 4.0f, 6);
        }
        if (mdl.equals("PG32130")) {
            return "Incredible S" + batCap(1450, 1, 17, 384000, 4.0f);
        }
        if (mdl.equals("PG41200")) {
            return "Evo View 4G" + batCap(4000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("PG58100")) {
            return "Sensation 4G" + batCap(1520, 1, 17, 518400, 4.3f, 6);
        }
        if (mdl.equals("PG58120") || mdl.equals("PG58130")) {
            return "Sensation" + batCap(1520, 1, 17, 518400, 4.3f);
        }
        if (mdl.equals("PG76100") || mdl.equals("PG76110") || mdl.equals("PG76120") || mdl.equals("PG76200") || mdl.equals("PG76240")) {
            return "Wildfire S" + batCap(1230, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("SENSATION")) {
            return "Sensation" + batCap(1520, 1, 17, 518400, 4.3f);
        }
        if (mdl.equals("SENSATION XE") || mdl.startsWith("SENSATION XE WITH ")) {
            return "Sensation XE" + batCap(1730, 1, 17, 518400, 4.3f, 6);
        }
        if (mdl.equals("SENSATION XL")) {
            return "Sensation XL" + batCap(1600, 1, 17, 384000, 4.7f, 6);
        }
        if (mdl.equals("T329T")) {
            return "T329t" + batCap(1650, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("WILDFIRE")) {
            return "Wildfire" + batCap(1300, 1, 1, 76800, 3.2f);
        }
        if (mdl.equals("WILDFIRE S")) {
            return "Wildfire S" + batCap(1230, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("X920D") || mdl.equals("X920E")) {
            return "Butterfly" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 19, 2073600, 5.0f, 6);
        }*/
        return "";
    }

    private static String getDevModel_HTM() {
        if (getStrippedBuildModel(101).equals("H100")) {
            return "H100" + batCap(2000, 3, 6, 2073600, 5.7f);
        }
        return "";
    }

    private static String getDevModel_Huawei() {
        String mdl = getStrippedBuildModel(21);
        if (mdl.equals("7D-501L") || mdl.equals("7D-502L") || mdl.equals("7D-503L") || mdl.equals("7D-503LT") || mdl.equals("7D-504L")) {
            return "MediaPad X1 7.0 LTE" + batCap(5000, 4, 8, 2304000, 7.0f, 7);
        }
        if (mdl.equals("7D-501U") || mdl.equals("7D-502U") || mdl.equals("7D-503U") || mdl.equals("7D-504U")) {
            return "MediaPad X1 7.0 3G" + batCap(5000, 4, 8, 2304000, 7.0f, 7);
        }
        if (mdl.equals("7D-501W") || mdl.equals("7D-502W")) {
            return "MediaPad X1 7.0 WiFi" + batCap(5000, 4, 8, 2304000, 7.0f, 7);
        }
        if (mdl.equals("ALE-L02") || mdl.equals("ALE-L04") || mdl.equals("ALE-L21") || mdl.equals("ALE-L23") || mdl.equals("ALE-TL00")) {
            return "P8 Lite" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("ATH-AL00") || mdl.equals("ATH-CL00") || mdl.equals("ATH-TL00") || mdl.equals("ATH-UL00")) {
            return "Honor 7i" + batCap(3090, 1, 6, 2073600, 5.2f, 7);
        }
        if (mdl.equals("C8812")) {
            return "Ascend C8812" + batCap(1350, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("CHC-U01") || mdl.equals("CHC-U03") || mdl.equals("CHC-U23")) {
            return "G Play mini" + batCap(2550, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("CHE1-CL10")) {
            return "Honor 4X TD-LTE" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("CHE1-CL20")) {
            return "Honor 4X TD-LTE Dual SIM" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("CHE1-L04") || mdl.equals("CHE2-L11") || mdl.equals("CHE2-TL00") || mdl.equals("CHE2-UL00")) {
            return "Honor 4X" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("CHE2-L23")) {
            return "Honor 4X Dual SIM LTE" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("CHM-CL00") || mdl.equals("CHM-TL00") || mdl.equals("CHM-TL00H") || mdl.equals("CHM-U01") || mdl.equals("CHM-UL00")) {
            return "Honor 4C" + batCap(2550, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("CRR-CL00") || mdl.equals("CRR-L09") || mdl.equals("CRR-TL00") || mdl.equals("CRR-UL00")) {
            return "Mate S" + batCap(2700, 3, 23, 2073600, 5.5f, 7);
        }
        if (mdl.equals("G510-0100")) {
            return "Ascend G510" + batCap(1700, 1, 6, 409920, 4.5f, 6);
        }
        if (mdl.equals("G525-U00")) {
            return "Ascend G525" + batCap(1700, 1, 6, 518400, 4.5f, 6);
        }
        if (mdl.equals("G526-L11")) {
            return "Ascend G526" + batCap(1950, 1, 6, 518400, 4.5f, 6);
        }
        if (mdl.equals("G6-L01") || mdl.equals("G6-L11")) {
            return "Ascend G6 4G" + batCap(2000, 1, 6, 518400, 4.5f, 6);
        }
        if (mdl.equals("G6-L22") || mdl.equals("G6-L33") || mdl.equals("G6-U01") || mdl.equals("G6-U10")) {
            return "Ascend G6" + batCap(2000, 1, 6, 518400, 4.5f, 6);
        }
        if (mdl.equals("G610-U15") || mdl.equals("G610-U20") || mdl.equals("G610-U251")) {
            return "Ascend G610" + batCap(2150, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("G610S-U00")) {
            return "Ascend G610S" + batCap(2150, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("G620-UL01")) {
            return "Ascend G620" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("G620S-L01") || mdl.equals("G620S-L02") || mdl.equals("G620S-UL00")) {
            return "Ascend G620S" + batCap(2000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("G630-U20")) {
            return "Ascend G630" + batCap(2000, 1, 1, 921600, 5.0f, 6);
        }
        if (mdl.equals("G7-L01") || mdl.equals("G7-L02") || mdl.equals("G7-L03") || mdl.equals("G7-TL00") || mdl.equals("G7-TL01") || mdl.equals("G7-TL03")) {
            return "Ascend G7" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("G700-U00") || mdl.equals("G700-U10") || mdl.equals("G700-U20")) {
            return "Ascend G700" + batCap(2150, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("G730-U00") || mdl.equals("G730-U10")) {
            return "Ascend G730" + batCap(2300, 3, 6, 518400, 5.5f, 6);
        }
        if (mdl.equals("G740-L00")) {
            return "Ascend G740" + batCap(2400, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("G750-T00") || mdl.equals("G750-U10")) {
            return "Honor 3X" + batCap(3000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("G750-T01")) {
            return "Honor 3X Lite" + batCap(3000, 3, 1, 518400, 5.5f, 7);
        }
        if (mdl.equals("G750-T20")) {
            return "Honor 3X Pro" + batCap(3000, 3, 8, 2073600, 5.5f, 7);
        }
        if (mdl.equals("GEM-701L") || mdl.equals("GEM-702L") || mdl.equals("GEM-703L")) {
            return "MediaPad X2" + batCap(5000, 4, 8, 2304000, 7.0f, 7);
        }
        if (mdl.equals("GRA-CL00") || mdl.equals("GRA-CL10") || mdl.equals("GRA-L03") || mdl.equals("GRA-L09") || mdl.equals("GRA-L13") || mdl.equals("GRA-TL00") || mdl.equals("GRA-TL10") || mdl.equals("GRA-UL00") || mdl.equals("GRA-UL10")) {
            return "P8" + batCap(2680, 1, 6, 2073600, 5.2f, 7);
        }
        if (mdl.equals("H30-C00") || mdl.equals("H30-T00") || mdl.equals("H30-T10") || mdl.equals("H30-U10")) {
            return "Honor 3C" + batCap(2300, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("H30-L01") || mdl.equals("H30-L02")) {
            return "Honor 3C 4G" + batCap(2300, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("H60-L01") || mdl.equals("H60-L03") || mdl.equals("H60-L04") || mdl.equals("H60-L11")) {
            return "Honor 6" + batCap(3100, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("H60-L02") || mdl.equals("H60-L12")) {
            return "Honor 6 Dual SIM" + batCap(3100, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("H1511") || mdl.equals("H1512")) {
            return "Nexus 6P" + batCap(3450, 3, 23, 3686400, 5.7f, 10);
        }
        if (mdl.equals("HN3-U00") || mdl.equals("HN3-U01")) {
            return "Honor 3" + batCap(2150, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("HOL-U19")) {
            return "Honor Holly" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("IDEOS S7 SLIM")) {
            return "Ideos S7 Slim" + batCap(3250, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("KIW-AL10") || mdl.equals("KIW-CL00") || mdl.equals("KIW-TL00") || mdl.equals("KIW-TL00H") || mdl.equals("KIW-UL00")) {
            return "Honor 5X" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("MEDIAPAD 10 FHD")) {
            return "MediaPad 10 FHD" + batCap(6600, 4, 6, 2304000, 10.0f);
        }
        if (mdl.equals("MEDIAPAD M1 8.0")) {
            return "MediaPad M1 8.0" + batCap(4800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("MEDIAPAD M2 8.0")) {
            return "MediaPad M2 8.0" + batCap(4800, 4, 6, 2304000, 8.0f, 7);
        }
        if (mdl.equals("MEDIAPAD T1 8.0")) {
            return "MediaPad T1 8.0" + batCap(4800, 4, 6, 1024000, 8.0f, 6);
        }
        if (mdl.equals("MEDIAPAD T1 10")) {
            return "MediaPad T1 10" + batCap(4800, 4, 1, 1024000, 9.6f, 7);
        }
        if (mdl.equals("MEDIAPAD X2")) {
            return "MediaPad X2" + batCap(5000, 4, 8, 2304000, 7.0f, 7);
        }
        if (mdl.equals("MT1-U01") || mdl.equals("MT1-U02") || mdl.equals("MT1-U06")) {
            return "Ascend Mate" + batCap(4050, 3, 7, 921600, 6.1f, 6);
        }
        if (mdl.equals("MT7-CL00") || mdl.equals("MT7-J1") || mdl.equals("MT7-L09") || mdl.equals("MT7-TL00") || mdl.equals("MT7-TL10") || mdl.equals("MT7-UL00")) {
            return "Ascend Mate7" + batCap(4100, 3, 6, 2073600, 6.0f, 7);
        }
        if (mdl.equals("NEXUS 6P")) {
            return "Nexus 6P" + batCap(3450, 3, 23, 3686400, 5.7f, 10);
        }
        if (mdl.equals("P2-6001") || mdl.equals("P2-6011")) {
            return "Ascend P2" + batCap(2420, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("P6-U02") || mdl.equals("P6-U06")) {
            return "Ascend P6" + batCap(2000, 1, 7, 921600, 4.7f, 7);
        }
        if (mdl.equals("P6S-L04") || mdl.equals("P6S-U00") || mdl.equals("P6S-U02") || mdl.equals("P6S-U04") || mdl.equals("P6S-U06")) {
            return "Ascend P6 S" + batCap(2000, 1, 7, 921600, 4.7f, 7);
        }
        if (mdl.equals("P7-L00") || mdl.equals("P7-L01") || mdl.equals("P7-L05") || mdl.equals("P7-L10") || mdl.equals("P7-L12")) {
            return "Ascend P7" + batCap(2500, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("PE-TL10")) {
            return "Honor 6 Plus 4G" + batCap(3600, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("PE-UL00")) {
            return "Honor 6 Plus Dual SIM" + batCap(3600, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("PLK-AL10") || mdl.equals("PLK-CL00") || mdl.equals("PLK-L01") || mdl.equals("PLK-TL00") || mdl.equals("PLK-TL01H") || mdl.equals("PLK-UL00")) {
            return "Honor 7" + batCap(3100, 1, 6, 2073600, 5.2f, 7);
        }
        if (mdl.equals("RIO-AL00") || mdl.equals("RIO-CL00") || mdl.equals("RIO-L02") || mdl.equals("RIO-TL00") || mdl.equals("RIO-UL00")) {
            return "G8" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("S10-101L")) {
            return "MediaPad 10 FHD LTE" + batCap(6600, 4, 6, 2304000, 10.0f);
        }
        if (mdl.equals("S10-101U")) {
            return "MediaPad 10 FHD 3G" + batCap(6600, 4, 6, 2304000, 10.0f);
        }
        if (mdl.equals("S10-101W")) {
            return "MediaPad 10 FHD WiFi" + batCap(6600, 4, 6, 2304000, 10.0f);
        }
        if (mdl.equals("S10-201L")) {
            return "MediaPad 10 Link LTE" + batCap(6600, 4, 6, 1024000, 10.1f, 6);
        }
        if (mdl.equals("S10-201U")) {
            return "MediaPad 10 Link 3G" + batCap(6600, 4, 6, 1024000, 10.1f, 6);
        }
        if (mdl.equals("S10-201W") || mdl.equals("S10-201WA")) {
            return "MediaPad 10 Link WiFi" + batCap(6600, 4, 6, 1024000, 10.1f, 6);
        }
        if (mdl.equals("S10-231L") || mdl.equals("S10-232L")) {
            return "MediaPad 10 Link+ LTE" + batCap(6600, 4, 6, 1024000, 10.1f, 7);
        }
        if (mdl.equals("S10-231U") || mdl.equals("S10-232U") || mdl.equals("S10-232UA")) {
            return "MediaPad 10 Link+ 3G" + batCap(6600, 4, 6, 1024000, 10.1f, 7);
        }
        if (mdl.equals("S10-231W") || mdl.equals("S10-232W")) {
            return "MediaPad 10 Link+ WiFi" + batCap(6600, 4, 6, 1024000, 10.1f, 7);
        }
        if (mdl.equals("S7-601C") || mdl.equals("S7-601U") || mdl.equals("S7-602U")) {
            return "MediaPad 7 Vogue" + batCap(4100, 4, 6, 614400, 7.0f, 6);
        }
        if (mdl.equals("S7-721G") || mdl.equals("S7-721U") || mdl.equals("S7-721W") || mdl.equals("S7-722U")) {
            return "MediaPad 7 Youth 2" + batCap(4100, 4, 1, 614400, 7.0f, 6);
        }
        if (mdl.equals("S8-301L")) {
            return "MediaPad M1 8.0 LTE" + batCap(4800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("S8-301U")) {
            return "MediaPad M1 8.0 3G" + batCap(4800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("S8-301W")) {
            return "MediaPad M1 8.0 WiFi" + batCap(4800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("S8-701L")) {
            return "MediaPad T1 8.0 LTE" + batCap(4800, 4, 6, 1024000, 8.0f, 6);
        }
        if (mdl.equals("S8-701U")) {
            return "MediaPad T1 8.0 3G" + batCap(4800, 4, 6, 1024000, 8.0f, 6);
        }
        if (mdl.equals("S8-701W")) {
            return "MediaPad T1 8.0 WiFi" + batCap(4800, 4, 6, 1024000, 8.0f, 6);
        }
        if (mdl.equals("SC-CL00")) {
            return "Ascend GX1" + batCap(3500, 3, 6, 921600, 6.0f, 7);
        }
        if (mdl.equals("SCC-U21")) {
            return "Honor Y6" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("SCL-AL00") || mdl.equals("SCL-CL00") || mdl.equals("SCL-L04") || mdl.equals("SCL-TL00H") || mdl.equals("SCL-UL00")) {
            return "Honor 4A" + batCap(2200, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("T1-A21W")) {
            return "Honor Play Note" + batCap(4800, 4, 6, 1024000, 9.6f, 7);
        }
        /*if (mdl.equals("T8300")) {
            return "T8300" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("TIT-AL00") || mdl.equals("TIT-TL00") || mdl.equals("TIT-UL00")) {
            return "Enjoy 5" + batCap(4000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("U8100")) {
            return "U8100" + batCap(1150, 1, 1, 76800, 2.8f);
        }
        if (mdl.equals("U8110")) {
            return "U8110" + batCap(1150, 1, 1, 76800, 2.8f);
        }
        if (mdl.equals("U8150")) {
            return "Ideos" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
        }
        if (mdl.equals("U8180")) {
            return "Ideos X1" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
        }
        if (mdl.equals("U8220")) {
            return "U8220" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("U8230")) {
            return "U8230" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("U8300")) {
            return "U8300" + batCap(930, 1, 1, 76800, 2.6f);
        }
        if (mdl.equals("U8350")) {
            return "Boulder" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.6f);
        }
        if (mdl.equals("U8500")) {
            return "Ideos X2" + batCap(1150, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("U8510")) {
            return "Ideos X3" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.2f);
        }*/
        if (mdl.equals("U8520")) {
            return "Duplex" + batCap(1500, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("U8650")) {
            return "Sonic" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("U8652")) {
            return "Fusion" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("U8655-1") || mdl.equals("U8655-1")) {
            return "Ascend Y200" + batCap(1250, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("U8665")) {
            return "Fusion 2" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("U8800")) {
            return "Ideos X5" + batCap(1500, 1, 1, 384000, 3.8f);
        }
        if (mdl.equals("U8815")) {
            return "Ascend G300" + batCap(0, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("U8825D")) {
            return "Ascend G330D" + batCap(1550, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("U8833")) {
            return "Ascend Y300" + batCap(1730, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("U8836D")) {
            return "Ascend G500" + batCap(1930, 1, 6, 518400, 4.3f);
        }
        if (mdl.equals("U8850")) {
            return "Vision" + batCap(1400, 1, 1, 384000, 3.7f);
        }
        if (mdl.equals("U8860")) {
            return "Honor" + batCap(1930, 1, 1, 409920, 4.0f);
        }
        if (mdl.equals("U8950-1") || mdl.equals("U8950N") || mdl.equals("U8950N-1")) {
            return "Ascend G600" + batCap(1930, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("U8951")) {
            return "Ascend G510" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("U9000")) {
            return "Ideos X6" + batCap(1400, 1, 1, 384000, 4.1f);
        }
        if (mdl.equals("U9200")) {
            return "Ascend P1" + batCap(1670, 1, 23, 518400, 4.3f, 6);
        }
        if (mdl.equals("U9500")) {
            return "Ascend D1" + batCap(1800, 1, 7, 921600, 4.5f);
        }
        if (mdl.equals("U9508")) {
            return "Honor 2" + batCap(2230, 1, 6, 921600, 4.5f, 6);
        }
        if (mdl.equals("U9500E")) {
            return "Ascend D1 XL" + batCap(2600, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("U9510E")) {
            return "Ascend D1 Quad XL" + batCap(2500, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("Y220-U00") || mdl.equals("Y220-U05") || mdl.equals("Y220-U10") || mdl.equals("Y220-U17")) {
            return "Ascend Y220" + batCap(1350, 1, 1, 153600, 3.5f, 6);
        }
        if (mdl.equals("Y221-U03") || mdl.equals("Y221-U12") || mdl.equals("Y221-U22") || mdl.equals("Y221-U33")) {
            return "Ascend Y221" + batCap(1350, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("Y300-0100") || mdl.equals("Y300-0151") || mdl.equals("Y300-U00") || mdl.equals("Y300-U01")) {
            return "Ascend Y300" + batCap(1730, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("Y320-U01") || mdl.equals("Y320-U10") || mdl.equals("Y320-U151") || mdl.equals("Y320-U30")) {
            return "Ascend Y320" + batCap(1350, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Y321-U051")) {
            return "Ascend Y321" + batCap(1700, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Y330-U01") || mdl.equals("Y330-U05") || mdl.equals("Y330-U07") || mdl.equals("Y330-U08") || mdl.equals("Y330-U11") || mdl.equals("Y330-U15") || mdl.equals("Y330-U17")) {
            return "Ascend Y330" + batCap(1500, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("Y511-U00") || mdl.equals("Y511-U10") || mdl.equals("Y511-U251") || mdl.equals("Y511-U30")) {
            return "Ascend Y511" + batCap(1730, 1, 6, 409920, 4.5f, 6);
        }
        if (mdl.equals("Y520-U03") || mdl.equals("Y520-U12") || mdl.equals("Y520-U22") || mdl.equals("Y520-U33")) {
            return "Ascend Y520" + batCap(1750, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("Y530-U00") || mdl.equals("Y530-U051")) {
            return "Ascend Y530" + batCap(1750, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("Y540-U00")) {
            return "Ascend Y540" + batCap(1950, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("Y541-U00")) {
            return "Ascend Y541" + batCap(1730, 1, 1, 384000, 4.5f);
        }
        if (mdl.equals("Y550-L01") || mdl.equals("Y550-L02")) {
            return "Ascend Y550" + batCap(2000, 1, 6, 409920, 4.5f, 7);
        }
        if (mdl.equals("Y560-CL00") || mdl.equals("Y560-L01") || mdl.equals("Y560-L23") || mdl.equals("Y560-TL00") || mdl.equals("Y560-U00") || mdl.equals("Y560-U02")) {
            return "Y5" + batCap(2000, 1, 1, 409920, 4.5f);
        }
       /* if (mdl.equals("Y600-U00") || mdl.equals("Y600-U151") || mdl.equals("Y600-U20") || mdl.equals("Y600-U351") || mdl.equals("Y600-U40")) {
            return "Ascend Y600" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 5.0f, 6);
        }*/
        if (mdl.equals("Y625-TL00") || mdl.equals("Y625-U21")) {
            return "Y625" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("Y635-CL00") || mdl.equals("Y635-L01") || mdl.equals("Y635-L02") || mdl.equals("Y635-L03") || mdl.equals("Y635-L21") || mdl.equals("Y635-TL00")) {
            return "Y635" + batCap(2000, 1, 1, 409920, 5.0f, 7);
        }
        return "";
    }

    private static String getDevModel_iJoy() {
        if (getStrippedBuildModel(109).equals("ECCOOQTIUM")) {
            return "Eccooqtium" + batCap(1800, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_iMobile() {
        if (getStrippedBuildModel(DEVMANUF_IMOBILE).equals("IQ6.3")) {
            return "IQ 6.3" + batCap(3000, 1, 1, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Impression() {
        String mdl = getStrippedBuildModel(104);
        if (mdl.equals("IMPAD 0314")) {
            return "ImPAD 0314" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 1004 V4")) {
            return "ImPAD 1004 v4" + batCap(5600, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("IMPAD 1005")) {
            return "ImPAD 1005" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("IMPAD-1410")) {
            return "ImPAD 1410" + batCap(0, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("IMPAD 2114")) {
            return "ImPAD 2114" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 2214")) {
            return "ImPAD 2214" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 2313")) {
            return "ImPAD 2313" + batCap(3800, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("IMPAD_2413")) {
            return "ImPAD 2413" + batCap(3200, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("IMPAD 3214")) {
            return "ImPAD 3214" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("IMPAD 4214")) {
            return "ImPAD 4214" + batCap(2800, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 5214")) {
            return "ImPAD 5214" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 6115")) {
            return "ImPAD 6115" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("IMPAD 6414")) {
            return "ImPAD 6414" + batCap(2800, 4, 6, 921600, 7.0f);
        }
        if (mdl.equals("IMPAD 8314")) {
            return "ImPAD 8314" + batCap(3800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("IMPAD 9314")) {
            return "ImPAD 9314" + batCap(3800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("IMSMART 1.40")) {
            return "ImSmart 1.40" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("IMSMART 1.45")) {
            return "ImSmart 1.45" + batCap(1600, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("IMSMART 2.50")) {
            return "ImSmart 2.50" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("IMSMART A401")) {
            return "ImSmart A401" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("IMSMART A502")) {
            return "ImSmart A502" + batCap(1600, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("IMSMART C471")) {
            return "ImSmart C471" + batCap(1800, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("IMSMART S471")) {
            return "ImSmart S471" + batCap(1750, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_iNew() {
        String mdl = getStrippedBuildModel(99);
        if (mdl.equals("I8000")) {
            return "I8000" + batCap(2270, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("L1")) {
            return "L1" + batCap(2450, 3, 6, 921600, 5.3f);
        }
        if (mdl.equals("U1")) {
            return "U1" + batCap(1400, 1, 1, 409920, 4.0f);
        }
        /*if (mdl.equals("V1")) {
            return "V1" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("V3-E")) {
            return "V3" + batCap(1830, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("V3 OCTA CORE")) {
            return "V3 Plus" + batCap(1830, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("V7A")) {
            return "V7" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 8, 921600, 5.0f);
        }*/
        if (mdl.equals("V8")) {
            return "V8" + batCap(2400, 3, 1, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_InFocus() {
        String mdl = getStrippedBuildModel(22);
        if (mdl.equals("C2107")) {
            return "C2107" + batCap(3550, 4, 1, 2304000, 7.0f);
        }
        if (mdl.equals("IN260")) {
            return "IN260" + batCap(2450, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("IN310")) {
            return "IN310" + batCap(3000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("IN320")) {
            return "IN320" + batCap(2920, 1, 1, 518400, 4.7f);
        }
        if (mdl.equals("IN610")) {
            return "IN610" + batCap(4050, 3, 6, 921600, 6.1f);
        }
        if (mdl.equals("IN810")) {
            return "IN810" + batCap(2200, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("IN815")) {
            return "IN815" + batCap(2200, 1, 1, 2073600, 5.0f);
        }
        if (mdl.equals("M2")) {
            return "M2" + batCap(2010, 1, 6, 983040, 4.2f);
        }
        if (mdl.equals("M2 3G")) {
            return "M2 3G" + batCap(2010, 1, 6, 983040, 4.2f);
        }
        if (mdl.equals("M210")) {
            return "M210" + batCap(2350, 1, 1, 921600, 4.7f);
        }
        if (mdl.equals("M310")) {
            return "M310" + batCap(2450, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("M320")) {
            return "M320" + batCap(3100, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("M330")) {
            return "M330" + batCap(3100, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("M510")) {
            return "M510" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("M512")) {
            return "M512" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("M518")) {
            return "M518" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("M530")) {
            return "M530" + batCap(3100, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("M810")) {
            return "M810" + batCap(2600, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("NEW TAB F1")) {
            return "New Tab F1" + batCap(7000, 4, 6, 1024000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_Inhon() {
        String mdl = getStrippedBuildModel(69);
        if (mdl.equals("L55")) {
            return "L55" + batCap(2520, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("PAPILIO_G1")) {
            return "Papilio G1" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("PAPILIO_G3")) {
            return "Papilio G3" + batCap(1800, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_Innos() {
        if (getStrippedBuildModel(126).equals("D6000")) {
            return "D6000" + batCap(6000, 1, 1, 2073600, 5.2f);
        }
        return "";
    }

    private static String getDevModel_iOcean() {
        String mdl = getStrippedBuildModel(23);
        if (mdl.equals("G7")) {
            return "G7" + batCap(3500, 3, 6, 2073600, 6.44f);
        }
        if (mdl.equals("M6752")) {
            return "M6752 Rock" + batCap(2300, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X1")) {
            return "X1" + batCap(1600, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("X7 HD")) {
            return "X7 HD" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("X7S ELITE")) {
            return "X7s Elite" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("X7S-T")) {
            return "X7S-T" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X7 TURBO")) {
            return "X7 Turbo" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("X8")) {
            return "X8" + batCap(2650, 3, 6, 2073600, 5.7f);
        }
        if (mdl.equals("X8 MINI")) {
            return "X8 mini" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X8 MINI PRO")) {
            return "X8 mini Pro" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X9")) {
            return "X9" + batCap(2050, 1, 6, 2073600, 5.0f, 7);
        }
        return "";
    }

    private static String getDevModel_ionik() {
        if (getStrippedBuildModel(DEVMANUF_IONIK).equals("I425")) {
            return "i425" + batCap(1600, 1, 1, 409920, 4.5f);
        }
        return "";
    }

    private static String getDevModel_Irbis() {
        String mdl = getStrippedBuildModel(DEVMANUF_IRBIS);
        if (mdl.equals("TX22")) {
            return "TX22" + batCap(2500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("TX77")) {
            return "TX77" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_iRU() {
        if (Build.PRODUCT.trim().toUpperCase().equals("MBT05A_IRU")) {
            return "MBT05A" + batCap(5000, 4, 6, 3145728, 9.7f);
        }
        return "";
    }

    private static String getDevModel_iRULU() {
        String mdl = getStrippedBuildModel(DEVMANUF_IRULU);
        if (mdl.equals("U1 MINI")) {
            return "Universe U1 mini" + batCap(1400, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("U1 PRO")) {
            return "Universe U1 Pro" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("U2")) {
            return "Universe U2" + batCap(2000, 1, 1, 518400, 5.0f);
        }
        /*if (mdl.equals("U2S")) {
            return "Universe U2s" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }*/
        if (mdl.equals("V1")) {
            return "Victory V1" + batCap(2350, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("V1S")) {
            return "Victory V1s" + batCap(1750, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("V3")) {
            return "Victory V3" + batCap(3000, 3, 6, 921600, 6.5f);
        }
        return "";
    }

    private static String getDevModel_JiaYu() {
        String mdl = getStrippedBuildModel(24);
        if (mdl.equals("F1")) {
            return "F1" + batCap(2400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("F2")) {
            return "F2" + batCap(3000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("G2")) {
            return "G2" + batCap(2050, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("G2F")) {
            return "G2F" + batCap(2200, 1, 6, 921600, 4.3f);
        }
        if (mdl.equals("G2S")) {
            return "G2s" + batCap(2200, 1, 6, 518400, 4.0f);
        }
        if (mdl.equals("G3")) {
            return "G3" + batCap(2750, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G3C")) {
            return "G3C" + batCap(3000, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G3S")) {
            return "G3s" + batCap(2750, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G3T")) {
            return "G3T" + batCap(3000, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G4")) {
            return "G4" + batCap(0, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("G4_G5")) {
            return "G4/G5" + batCap(0, 1);
        }
        if (mdl.equals("G4C")) {
            return "G4C" + batCap(3000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("G4S")) {
            return "G4S" + batCap(3000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("G4T")) {
            return "G4T" + batCap(3000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("G5")) {
            return "G5" + batCap(2000, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G5C")) {
            return "G5C" + batCap(2000, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G5S")) {
            return "G5S" + batCap(2000, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("G6")) {
            return "G6" + batCap(3500, 3, 1, 2073600, 5.7f, 7);
        }
        if (mdl.equals("S1")) {
            return "S1" + batCap(2300, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("S2")) {
            return "S2" + batCap(2000, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("S3")) {
            return "S3" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("S3S")) {
            return "S3S" + batCap(3000, 3, 6, 2073600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Jolla() {
        /*if (getStrippedBuildModel(DEVMANUF_JOLLA).equals("JOLLA")) {
            return "Phone" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.5f);
        }*/
        return "";
    }

    private static String getDevModel_Just5() {
        String mdl = getStrippedBuildModel(DEVMANUF_JUST5);
        if (mdl.equals("BLASTER")) {
            return "Blaster" + batCap(2700, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("BLASTER 2")) {
            return "Blaster 2" + batCap(2700, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("BLASTER MINI")) {
            return "Blaster mini" + batCap(2000, 1, 6, 409920, 4.5f, 7);
        }
        if (mdl.equals("SPACER")) {
            return "Spacer" + batCap(1800, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("SPACER 2")) {
            return "Spacer 2" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("SPACER 2S")) {
            return "Spacer 2S" + batCap(2700, 1, 6, 518400, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Karbonn() {
        String mdl = getStrippedBuildModel(25);
        if (mdl.startsWith("A")) {
            if (mdl.equals("A1")) {
                return "A1" + batCap(1100, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("A1+")) {
                return "A1+" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A1 PLUS CHAMP")) {
                return "A1 Plus Champ" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A1 PLUS DUPLE")) {
                return "A1 Plus Duple" + batCap(1300, 1, 6, 153600, 3.5f);
            }
            if (mdl.equals("A1 PLUS SUPER")) {
                return "A1 Plus Super" + batCap(1250, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A1 PRO")) {
                return "A1 Pro" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A2")) {
                return "A2" + batCap(1750, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A3")) {
                return "A3" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A3+")) {
                return "A3+" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A3 STAR")) {
                return "A3 Star" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A4")) {
                return "A4" + batCap(1400, 1, 1, 153600, 4.0f);
            }
            if (mdl.equals("A4+")) {
                return "A4+" + batCap(1250, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A5")) {
                return "A5" + batCap(0, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("A5 TURBO")) {
                return "A5 Turbo" + batCap(1450, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A6")) {
                return "A6" + batCap(1450, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("A6 TURBO")) {
                return "A6 Turbo" + batCap(1500, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A7")) {
                return "A7" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A7+")) {
                return "A7+" + batCap(1420, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A7 STAR")) {
                return "A7 Star" + batCap(1400, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("A8")) {
                return "A8" + batCap(1500, 1, 1, 384000, 3.9f);
            }
            if (mdl.equals("A9")) {
                return "A9" + batCap(1600, 1, 1, 384000, 3.8f);
            }
            if (mdl.equals("A9+")) {
                return "A9+" + batCap(1420, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A9 STAR")) {
                return "A9 Star" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A11")) {
                return "A11" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A11+")) {
                return "A11+" + batCap(1450, 1, 1, 409920, 4.7f);
            }
            if (mdl.equals("A12")) {
                return "A12" + batCap(1800, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A12 PLUS")) {
                return "A12 Plus" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("A14")) {
                return "A14" + batCap(1400, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("A15")) {
                return "A15" + batCap(1420, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A15+")) {
                return "A15+" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A16")) {
                return "A16" + batCap(1350, 1, 1, 384000, 3.9f);
            }
            if (mdl.equals("A18 PLUS")) {
                return "A18 Plus" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A19")) {
                return "A19" + batCap(1600, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A19 PLUS")) {
                return "A19 Plus" + batCap(1600, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A20")) {
                return "A20" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("A21")) {
                return "A21" + batCap(1800, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("A21+")) {
                return "A21+" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A25")) {
                return "A25" + batCap(2000, 1, 6, 384000, 5.0f);
            }
            if (mdl.equals("A25+")) {
                return "A25+" + batCap(1800, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A27 PLUS")) {
                return "A27 Plus" + batCap(2000, 1, 1, 518400, 5.0f);
            }
            /*if (mdl.equals("A27 RETINA")) {
                return "A27 Retina" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.3f);
            }
            if (mdl.equals("A30")) {
                return "A30" + batCap(2500, 3, 1, 384000, 5.9f);
            }
            if (mdl.equals("A35")) {
                return "A35" + batCap(1800, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("A40")) {
                return "A40" + batCap(1700, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A50")) {
                return "A50" + batCap(1300, 1, 1, 153600, 4.0f);
            }
            if (mdl.equals("A50S")) {
                return "A50S" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A51 LITE")) {
                return "A51 Lite" + batCap(1000, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A51Q")) {
                return "A51Q" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A55")) {
                return "A55" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A80")) {
                return "A80" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A90")) {
                return "A90" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("A90S")) {
                return "A90S" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A91")) {
                return "A91" + batCap(1500, 1, 1, 384000, 3.9f);
            }
            if (mdl.equals("A93")) {
                return "A93" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A96")) {
                return "A96" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A99")) {
                return "A99" + batCap(1400, 1, 1, 384000, 3.97f);
            }
            if (mdl.equals("A99I")) {
                return "A99i" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 384000, 3.97f);
            }
            if (mdl.equals("A99 STAR")) {
                return "A99 Star" + batCap(1400, 1, 1, 384000, 3.97f);
            }
            if (mdl.equals("A100")) {
                return "A100" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
            }*/
            if (mdl.equals("A101")) {
                return "A101" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A104")) {
                return "A104" + batCap(1100, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("A108")) {
                return "A108" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A119")) {
                return "A119" + batCap(1600, 1, 1, 518400, 5.0f);
            }
            if (mdl.equals("A120")) {
                return "A120" + batCap(3000, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("A240")) {
                return "A240" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("AURA 9")) {
                return "Aura 9" + batCap(4000, 1, 6, 409920, 5.0f);
            }
        }
        if (mdl.equals("D8988")) {
            return "D8988" + batCap(2500, 3, 6, 921600, 6.0f);
        }
        if (mdl.equals("E8222")) {
            return "E8222" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("KS606+")) {
            return "KS606+" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("KS908")) {
            return "KS908" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("KS8000")) {
            return "KS8000" + batCap(2500, 3, 6, 518400, 5.3f);
        }
        if (mdl.equals("OPIUM N7")) {
            return "Opium N7" + batCap(1600, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("OPIUM N9")) {
            return "Opium N9" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("PLATINUM P9")) {
            return "Platinum P9" + batCap(2500, 3, 1, 518400, 6.0f);
        }
        /*if (mdl.equals("S2 TITANIUM")) {
            return "S2 Titanium" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("S12 DELITE")) {
            return "S12 Delite" + batCap(1600, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("S15")) {
            return "S15" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.startsWith("SMART")) {
            if (mdl.equals("SMART A1 STAR")) {
                return "Smart A1 Star" + batCap(1450, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A5I")) {
                return "Smart A5i" + batCap(1420, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A5S")) {
                return "Smart A5S" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("SMART A5 STAR")) {
                return "Smart A5 Star" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SMART A10")) {
                return "Smart A10" + batCap(1400, 1, 6, 384000, 3.9f);
            }
            if (mdl.equals("SMART A11 STAR")) {
                return "Smart A11 Star" + batCap(1400, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SMART A12 STAR")) {
                return "Smart A12 Star" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SMART A26")) {
                return "Smart A26" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("SMART A29")) {
                return "Smart A29" + batCap(2000, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("SMART A51")) {
                return "Smart A51" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A51 PLUS")) {
                return "Smart A51 Plus" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A52")) {
                return "Smart A52" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A52 PLUS")) {
                return "Smart A52 Plus" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A55I")) {
                return "Smart A55i" + batCap(1100, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SMART A92")) {
                return "Smart A92" + batCap(1600, 1, 1, 384000, 3.97f);
            }
            if (mdl.equals("SMART A92 PLUS")) {
                return "Smart A92 Plus" + batCap(1400, 1, 1, 384000, 3.97f);
            }
            if (mdl.equals("SMART A92 STAR")) {
                return "Smart A92 Star" + batCap(1400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SMART A111")) {
                return "Smart A111" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 5.0f);
            }
            if (mdl.equals("SMART TAB 1")) {
                return "Smart Tab 1" + batCap(3700, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("SMART TAB 2")) {
                return "Smart Tab 2" + batCap(3700, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("SMART TAB 3")) {
                return "Smart Tab 3" + batCap(3700, 4, 1, 786432, 7.0f);
            }
            if (mdl.equals("SMART TAB 7")) {
                return "Smart Tab 7" + batCap(3700, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("SMART TAB 8")) {
                return "Smart Tab 8" + batCap(4500, 4, 1, 786432, 8.0f);
            }
            if (mdl.equals("SMART TAB 9")) {
                return "Smart Tab 9" + batCap(4000, 4, 1, 384000, 9.0f);
            }
            if (mdl.equals("SMART TAB 10")) {
                return "Smart Tab 10" + batCap(6000, 4, 1, 786432, 9.7f);
            }
        }
        if (mdl.equals("SPARKLE V")) {
            return "Sparkle V" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("ST72")) {
            return "ST72" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("TA-FONE A34 HD")) {
            return "Ta-Fone A34 HD" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("TA-FONE A34 HD STAR")) {
            return "Ta-Fone A34 HD Star" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("TA-FONE A37 HD")) {
            return "Ta-Fone A37 HD" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("TA-FONE A39 HD")) {
            return "Ta-Fone A39 HD" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.startsWith("TITANIUM")) {
            if (mdl.equals("TITANIUM DAZZLE")) {
                return "Titanium Dazzle" + batCap(1850, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("TITANIUM DAZZLE3 S204")) {
                return "Titanium Dazzle3 S204" + batCap(1750, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM HEXA")) {
                return "Titanium Hexa" + batCap(2050, 3, 8, 2073600, 5.5f);
            }
            if (mdl.equals("TITANIUM MACH ONE PLUS")) {
                return "Titanium Mach One Plus" + batCap(1800, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("TITANIUM MACH TWO S360")) {
                return "Titanium Mach Two S360" + batCap(1900, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM MACH FIVE")) {
                return "Titanium Mach Five" + batCap(2200, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM OCTANE")) {
                return "Titanium Octane" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM OCTANE PLUS")) {
                return "Titanium Octane Plus" + batCap(2000, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("TITANIUM S1")) {
                return "Titanium S1" + batCap(1600, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("TITANIUM S1 PLUS")) {
                return "Titanium S1 Plus" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("TITANIUM S2 PLUS")) {
                return "Titanium S2 Plus" + batCap(1900, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("TITANIUM S3")) {
                return "Titanium S3" + batCap(1800, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("TITANIUM S4")) {
                return "Titanium S4" + batCap(1800, 1, 23, 921600, 4.7f);
            }
            if (mdl.equals("TITANIUM S4 PLUS")) {
                return "Titanium S4 Plus" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("TITANIUM S5")) {
                return "Titanium S5" + batCap(2000, 1, 1, 518400, 5.0f);
            }
            if (mdl.equals("TITANIUM S5I")) {
                return "Titanium S5i" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("TITANIUM S5 PLUS")) {
                return "Titanium S5 Plus" + batCap(1800, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("TITANIUM S5 ULTRA")) {
                return "Titanium S5 Ultra" + batCap(2000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("TITANIUM S6")) {
                return "Titanium S6" + batCap(2000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("TITANIUM S7")) {
                return "Titanium S7" + batCap(2600, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("TITANIUM S8")) {
                return "Titanium S8" + batCap(1800, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("TITANIUM S9")) {
                return "Titanium S9" + batCap(2600, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("TITANIUM S9 LITE")) {
                return "Titanium S9 Lite" + batCap(RemoteMediaPlayer.STATUS_FAILED, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("TITANIUM S10")) {
                return "Titanium S10" + batCap(1850, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM S11")) {
                return "Titanium S11" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("TITANIUM S19")) {
                return "Titanium S19" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM S20")) {
                return "Titanium S20" + batCap(1600, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("TITANIUM S25 KLICK")) {
                return "Titanium S25 Klick" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM S29 ELITE")) {
                return "Titanium S29 Elite" + batCap(2600, 3, 6, 921600, 5.4f);
            }
            if (mdl.equals("TITANIUM S35")) {
                return "Titanium S35" + batCap(1850, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("TITANIUM S99")) {
                return "Titanium S99" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("TITANIUM S200 HD")) {
                return "Titanium S200 HD" + batCap(2600, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("TITANIUM S310")) {
                return "Titanium S310" + batCap(1800, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("TITANIUM X")) {
                return "Titanium X" + batCap(2300, 1, 6, 2073600, 5.0f);
            }
        }*/
        return "";
    }

    private static String getDevModel_Kata() {
        String mdl = getStrippedBuildModel(27);
        /*if (mdl.equals("B1")) {
            return "B1" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("B1S")) {
            return "B1s" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        if (mdl.equals("F1")) {
            return "F1" + batCap(1550, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("F1S")) {
            return "F1s" + batCap(1550, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("F2")) {
            return "F2" + batCap(1850, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("FISHTAB 3")) {
            return "FishTab 3" + batCap(4400, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("I1")) {
            return "i1" + batCap(0, 1, 1, 518400, 4.5f);
        }
        if (mdl.equals("I2")) {
            return "i2" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("I3")) {
            return "i3" + batCap(2250, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("I3S")) {
            return "i3s" + batCap(2250, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("I4")) {
            return "i4" + batCap(2300, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("IDROID")) {
            return "iDroid" + batCap(1450, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("IDROID S")) {
            return "iDroid S" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("M1")) {
            return "M1" + batCap(4000, 3, 1, 2073600, 5.7f);
        }
        if (mdl.equals("M2")) {
            return "M2" + batCap(2300, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("MINITAB 5")) {
            return "MiniTab 5" + batCap(4000, 4, 1, 384000, 5.0f);
        }
        if (mdl.equals("MINITAB 7")) {
            return "MiniTab 7" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("T MINI")) {
            return "T mini" + batCap(2600, 4, 1, 614400, 6.95f);
        }
        if (mdl.equals("T1")) {
            return "T1" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("T2")) {
            return "T2" + batCap(4100, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("T3")) {
            return "FishTab 3" + batCap(4400, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("VENUS 3")) {
            return "Venus 3" + batCap(1600, 1, 1, 384000, 4.0f);
        }
        return "";
    }

    private static String getDevModel_Kazam() {
        String mdl = getStrippedBuildModel(26);
        if (mdl.equals("THUNDER 345")) {
            return "Thunder 345" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("THUNDER 345L")) {
            return "Thunder 345L" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("THUNDER 347")) {
            return "Thunder 347" + batCap(1700, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("THUNDER 350L")) {
            return "Thunder 350L" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("THUNDER2 4.5L")) {
            return "Thunder2 4.5L" + batCap(1850, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("THUNDER2 5.0")) {
            return "Thunder2 5.0" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("THUNDER Q4.5")) {
            return "Thunder Q4.5" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("TORNADO 348")) {
            return "Tornado 348" + batCap(2050, 1, 23, 921600, 4.8f);
        }
        if (mdl.equals("TORNADO 350")) {
            return "Tornado 350" + batCap(1920, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("TORNADO2 5.0")) {
            return "Tornado2 5.0" + batCap(1800, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("TROOPER2 4.0")) {
            return "Trooper2 4.0" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("TROOPER2 4.5")) {
            return "Trooper2 4.5" + batCap(1600, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("TROOPER2 5.0")) {
            return "Trooper2 5.0" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("TROOPER2 6.0")) {
            return "Trooper2 6.0" + batCap(2500, 3, 1, 409920, 6.0f);
        }
        return "";
    }

    private static String getDevModel_Keneksi() {
        String mdl = getStrippedBuildModel(2);
        if (mdl.equals("AMULET")) {
            return "Amulet" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("APOLLO")) {
            return "Apollo" + batCap(1100, 1, 6, 384000, 3.5f);
        }
        if (mdl.equals("CHANCE")) {
            return "Chance" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("CHOICE")) {
            return "Choice" + batCap(2200, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("CRYSTAL")) {
            return "Crystal" + batCap(2500, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("DELTA")) {
            return "Delta" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("DELTA 2")) {
            return "Delta 2" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("DREAM")) {
            return "Dream" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("ELLIPS")) {
            return "Ellips" + batCap(1550, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("FIRE 2")) {
            return "Fire 2" + batCap(1550, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("FLASH")) {
            return "Flash" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("FLORA")) {
            return "Flora" + batCap(1450, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("GLASS")) {
            return "Glass" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("HEMERA")) {
            return "Hemera" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("LIBERTY")) {
            return "Liberty" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("LIBRA DUAL")) {
            return "Libra Dual" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("MOON")) {
            return "Moon" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("OMEGA")) {
            return "Omega" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("ORION")) {
            return "Orion" + batCap(1550, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("ROCK")) {
            return "Rock" + batCap(2900, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("SIGMA")) {
            return "Sigma" + batCap(2200, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("SMART")) {
            return "Smart" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("SOUL")) {
            return "Soul" + batCap(1800, 1, 6, 384000, 4.5f);
        }
        if (mdl.equals("STEP")) {
            return "Step" + batCap(1450, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("ZETA")) {
            return "Zeta" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("ZETA 2")) {
            return "Zeta 2" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        return "";
    }

    private static String getDevModel_Kiano() {
        String mdl = getStrippedBuildModel(70);
        if (mdl.startsWith("ELEGANCE")) {
            if (mdl.equals("ELEGANCE 7 BY ZANETTI")) {
                return "Elegance 7 by Zanetti" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("ELEGANCE 7 3G BY ZANETTI")) {
                return "Elegance 7 3G by Zanetti" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("ELEGANCE 8 BY ZANETTI")) {
                return "Elegance 8 by Zanetti" + batCap(3800, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("ELEGANCE 8 3G BY ZANETTI")) {
                return "Elegance 8 3G by Zanetti" + batCap(3800, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("ELEGANCE 9.7 BY ZANETTI")) {
                return "Elegance 9.7 by Zanetti" + batCap(7800, 4, 6, 786432, 9.7f);
            }
            if (mdl.equals("ELEGANCE 9.7 3G BY ZANETTI")) {
                return "Elegance 9.7 3G by Zanetti" + batCap(7800, 4, 6, 786432, 9.7f);
            }
            if (mdl.equals("ELEGANCE 10.1 BY ZANETTI")) {
                return "Elegance 10.1 by Zanetti" + batCap(8000, 4, 6, 1024000, 10.1f);
            }
        }
        if (mdl.startsWith("INTELECT")) {
            if (mdl.equals("INTELECT 7 WIFI")) {
                return "Intelect 7 WiFi" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("INTELECT 8 3G")) {
                return "Intelect 8 3G" + batCap(0, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("INTELECT 10 3G")) {
                return "Intelect 10 3G" + batCap(7100, 4, 6, 2304000, 10.1f);
            }
        }
        if (mdl.equals("SLIMTAB 8")) {
            return "SlimTab 8" + batCap(3800, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Kingelon() {
        if (getStrippedBuildModel(DEVMANUF_KINGELON).equals("709_V92_JBLA858")) {
            return "G8800" + batCap(4000, 3, 6, 518400, 5.5f);
        }
        return "";
    }

    private static String getDevModel_KingSing() {
        String mdl = getStrippedBuildModel(96);
        if (mdl.equals("S1")) {
            return "S1" + batCap(2500, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("S2")) {
            return "S2" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("T8")) {
            return "T8" + batCap(2150, 1, 1, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_KingTop() {
        if (getStrippedBuildModel(DEVMANUF_KINGTOP).equals("KT07")) {
            return "KT07" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_KingZone() {
        String mdl = getStrippedBuildModel(97);
        if (mdl.equals("K1 PRO")) {
            return "K1 Pro" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("K1 TURBO")) {
            return "K1 Turbo" + batCap(3200, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("N3")) {
            return "N3" + batCap(2800, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("N3 LTE")) {
            return "N3 LTE" + batCap(2800, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("N3 PLUS")) {
            return "N3 Plus" + batCap(2800, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("N5")) {
            return "N5" + batCap(2600, 1, 13, 921600, 5.0f, 7);
        }
        if (mdl.equals("S1")) {
            return "S1" + batCap(1700, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("Z1")) {
            return "Z1" + batCap(3500, 3, 8, 921600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_KNC() {
        if (getStrippedBuildModel(DEVMANUF_KNC).equals("MD706")) {
            return "MD706" + batCap(3150, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Komu() {
        String mdl = getStrippedBuildModel(3);
        if (mdl.equals("COLOR")) {
            return "Color" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("ENERGY")) {
            return "Energy" + batCap(4000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("K1")) {
            return "K1" + batCap(2300, 3, 6, 518400, 5.3f);
        }
        if (mdl.equals("K2+ NEO")) {
            return "K2+ Neo" + batCap(4000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("K3")) {
            return "K3" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("K3 8G")) {
            return "K3 8G" + batCap(1800, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("K4")) {
            return "K4" + batCap(2300, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("K5+")) {
            return "K5+" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("K5 OCTA")) {
            return "K5 Octa" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("K5 OCTA+")) {
            return "K5 Octa+" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("K5 TURBO")) {
            return "K5 Turbo" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("K7")) {
            return "K7" + batCap(2500, 3, 1, 921600, 5.7f);
        }
        if (mdl.equals("K8")) {
            return "K8" + batCap(2400, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("K8 4G")) {
            return "K8 4G" + batCap(2700, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("MINI V2")) {
            return "Mini V2" + batCap(1600, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("ROBO 2")) {
            return "Robo 2" + batCap(1800, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("ROBO 2L")) {
            return "Robo 2L" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("ROBO 2X")) {
            return "Robo 2X" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("ROBO 2X 8G")) {
            return "Robo 2X 8G" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("STYLE")) {
            return "Style" + batCap(1800, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("T8 TABLET")) {
            return "T8 Tablet" + batCap(3400, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Kyocera() {
        String mdl = getStrippedBuildModel(78);
        if (mdl.equals("C5120")) {
            return "Milano" + batCap(1490, 1, 1, 76800, 3.0f);
        }
        if (mdl.equals("C5133")) {
            return "Event" + batCap(1500, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("C5155")) {
            return "Rise" + batCap(1500, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("C5170")) {
            return "Hydro" + batCap(1500, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("C5171")) {
            return "Hydro Plus" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("C5215")) {
            return "Hydro Edge" + batCap(1600, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("C6530N")) {
            return "Hydro Life" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("C6721")) {
            return "Hydro XTRM" + batCap(2000, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("C6725")) {
            return "Hydro Vibe" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("C6730")) {
            return "Hydro Icon" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        /*if (mdl.equals("C6750")) {
            return "Hydro Elite" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 921600, 4.3f);
        }*/
        if (mdl.equals("E3100")) {
            return "Rio" + batCap(920, 1, 1, 76800, 2.8f);
        }
        if (mdl.equals("E6560")) {
            return "DuraForce" + batCap(3100, 1, 6, 921600, 4.5f);
        }
        if (mdl.equals("E6710")) {
            return "Torque" + batCap(2500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("E6715")) {
            return "Torque XT" + batCap(2500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("E6782")) {
            return "Brigadier" + batCap(3100, 1, 1, 921600, 4.5f);
        }
        if (mdl.equals("M6000")) {
            return "Zio" + batCap(1130, 1, 1, 384000, 3.5f);
        }
        if (mdl.equals("M9300")) {
            return "Echo" + batCap(1370, 1, 1, 384000, 3.5f);
        }
        return "";
    }

    private static String getDevModel_Landvo() {
        if (getStrippedBuildModel(DEVMANUF_LANDVO).equals("L550")) {
            return "L550" + batCap(1800, 1, 6, 518400, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Lanix() {
        if (getStrippedBuildModel(131).equals("ILIUM S120")) {
            return "Ilium S120" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        return "";
    }

    private static String getDevModel_Lark() {
        String mdl = getStrippedBuildModel(DEVMANUF_LARK);
        if (mdl.equals("ULTIMATE 7I") || mdl.equals("ULITMATE 7I")) {
            return "Ultimate 7i" + batCap(0, 4, 6, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Lava() {
        String displ = Build.DISPLAY.trim().toUpperCase();
        String mdl = getStrippedBuildModel(DEVMANUF_LAVA);
        if (displ.startsWith("LAVA_IRIS406Q_")) {
            return "Iris 406Q" + batCap(1700, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("GRAND")) {
            return "Iris X1 Grand" + batCap(2200, 1, 6, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Leader() {
        if (getStrippedBuildModel(DEVMANUF_LEADER).equals("GM10_XYL")) {
            return "GM10" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Leagoo() {
        String mdl = getStrippedBuildModel(28);
        if (mdl.equals("ELITE 1")) {
            return "Elite 1" + batCap(2400, 1, 13, 2073600, 5.0f, 7);
        }
        if (mdl.equals("ELITE 2")) {
            return "Elite 2" + batCap(3200, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("ELITE 3")) {
            return "Elite 3" + batCap(3000, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("ELITE 4")) {
            return "Elite 4" + batCap(2400, 1, 6, 518400, 5.0f, 7);
        }
        if (mdl.equals("ELITE 5")) {
            return "Elite 5" + batCap(4000, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("LEAD 1")) {
            return "Lead 1" + batCap(2200, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("LEAD 1I")) {
            return "Lead 1i" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("LEAD 2")) {
            return "Lead 2" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("LEAD 2S")) {
            return "Lead 2s" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("LEAD 3")) {
            return "Lead 3" + batCap(1600, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("LEAD 3S")) {
            return "Lead 3S" + batCap(1600, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("LEAD 4")) {
            return "Lead 4" + batCap(1600, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("LEAD 5")) {
            return "Lead 5" + batCap(2800, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("LEAD 7")) {
            return "Lead 7" + batCap(4500, 1, 13, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Lenovo() {
        String mdl = getStrippedBuildModel(29);
        if (mdl.startsWith("A")) {
            if (mdl.equals("A238T")) {
                return "A238T" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A269I")) {
                return "A269i" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("A316I")) {
                return "A316i" + batCap(1300, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("A319")) {
                return "A319" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("A328")) {
                return "A328" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A369I")) {
                return "A369i" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A390")) {
                return "A390" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A396")) {
                return "A396" + batCap(1600, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A399")) {
                return "A399" + batCap(2500, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A516")) {
                return "A516" + batCap(2000, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("A526")) {
                return "A526" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A536")) {
                return "A536" + batCap(2000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("A606")) {
                return "A606" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("A630")) {
                return "A630" + batCap(2500, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A680")) {
                return "A680" + batCap(2000, 1, 1, 409920, 5.0f, 6);
            }
            if (mdl.equals("A706")) {
                return "A706" + batCap(2000, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("A806") || mdl.equals("A808T")) {
                return "Golden Warrior A8" + batCap(2500, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("A820")) {
                return "A820" + batCap(2000, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("A820C")) {
                return "A820 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("A820E")) {
                return "A820E" + batCap(2000, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("A820T")) {
                return "A820T" + batCap(2000, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("A850")) {
                return "A850" + batCap(2250, 3, 6, 518400, 5.5f, 6);
            }
            if (mdl.equals("A850+")) {
                return "A850+" + batCap(2500, 3, 1, 518400, 5.5f, 7);
            }
            if (mdl.equals("A850S")) {
                return "A850 [Fake]" + batCap(0, 3);
            }
            if (mdl.equals("A859")) {
                return "A859" + batCap(2250, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("A880")) {
                return "A880" + batCap(2500, 3, 6, 518400, 6.0f, 6);
            }
            if (mdl.equals("A889")) {
                return "A889" + batCap(2500, 3, 6, 518400, 6.0f);
            }
            if (mdl.equals("A916")) {
                return "A916" + batCap(2500, 3, 6, 921600, 5.5f, 7);
            }
            if (mdl.equals("A1000")) {
                return "IdeaTab A1000" + batCap(3500, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("A1900")) {
                return "A1900" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A2010")) {
                return "A2010" + batCap(2000, 1, 1, 409920, 4.5f, 7);
            }
            if (mdl.equals("A2010-A")) {
                return "A2010-a" + batCap(2000, 1, 1, 409920, 4.5f, 7);
            }
            if (mdl.equals("A2107")) {
                return "IdeaTab A2107" + batCap(3550, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("A3000")) {
                return "IdeaTab A3000" + batCap(3500, 4, 6, 614400, 7.0f, 6);
            }
            if (mdl.equals("A3000-F")) {
                return "IdeaTab A3000 WiFi" + batCap(3500, 4, 6, 614400, 7.0f, 6);
            }
            if (mdl.equals("A3300-F")) {
                return "Tab 2 A7-30 WiFi" + batCap(3500, 4, 1, 614400, 7.0f, 7);
            }
            if (mdl.equals("A3300-H") || mdl.equals("A3300-HV")) {
                return "Tab 2 A7-30" + batCap(3500, 4, 1, 614400, 7.0f, 7);
            }
            if (mdl.equals("A3500-F")) {
                return "A7-50 WiFi" + batCap(3450, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("A3500-FL")) {
                return "A7-40" + batCap(3450, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("A3500-H") || mdl.equals("A3500-HV")) {
                return "A7-50" + batCap(3450, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("A3600-D")) {
                return "A3600" + batCap(1700, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("A3900")) {
                return "A3900" + batCap(2300, 1, 1, 409920, 5.0f, 7);
            }
            if (mdl.equals("A5000")) {
                return "A5000" + batCap(4000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("A5500-F")) {
                return "A8-50 WiFi" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("A5500-H") || mdl.equals("A5500-HV")) {
                return "A8-50" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("A6000")) {
                return "A6000" + batCap(2300, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("A6000+")) {
                return "A6000+" + batCap(2300, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("A7000") || mdl.equals("A7000-A")) {
                return "A7000" + batCap(2900, 3, 6, 921600, 5.5f, 7);
            }
            if (mdl.equals("A7000+")) {
                return "A7000+" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("A7600-F")) {
                return "A10-70 WiFi" + batCap(6340, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("A7600-H") || mdl.equals("A7600-HV")) {
                return "A10-70" + batCap(6340, 4, 6, 1024000, 10.1f);
            }
        }
        if (mdl.startsWith("B")) {
            if (mdl.equals("B6000-F")) {
                return "Yoga Tablet 8 WiFi" + batCap(6000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("B6000-H") || mdl.equals("B6000-HV")) {
                return "Yoga Tablet 8" + batCap(6000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("B8000-F")) {
                return "Yoga Tablet 10 WiFi" + batCap(SOC_QCOM, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("B8000-H") || mdl.equals("B8000-HV")) {
                return "Yoga Tablet 10" + batCap(SOC_QCOM, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("B8080-F")) {
                return "Yoga Tablet 10 HD+ WiFi" + batCap(SOC_QCOM, 4, 6, 2304000, 10.1f);
            }
            if (mdl.equals("B8080-H") || mdl.equals("B8080-HV")) {
                return "Yoga Tablet 10 HD+" + batCap(SOC_QCOM, 4, 6, 2304000, 10.1f);
            }
        }
        if (mdl.startsWith("I")) {
            if (mdl.equals("IDEATABA1000") || mdl.equals("IDEATABA1000-H") || mdl.equals("IDEATABA1000-HV")) {
                return "IdeaTab A1000" + batCap(3500, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("IDEATABA1000-F")) {
                return "IdeaTab A1000 WiFi" + batCap(3500, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("IDEATAB A3000") || mdl.equals("IDEATAB A3000-H") || mdl.equals("IDEATAB A3000-HV")) {
                return "IdeaTab A3000" + batCap(3500, 4, 6, 614400, 7.0f, 6);
            }
            if (mdl.equals("IDEATAB A3000-F")) {
                return "IdeaTab A3000 WiFi" + batCap(3500, 4, 6, 614400, 7.0f, 6);
            }
        }
        if (mdl.startsWith("K")) {
            if (mdl.equals("K30-T")) {
                return "K3 (K30-T)" + batCap(2300, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("K50-T5")) {
                return "K3 Note (K50-T5)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("K80")) {
                return "K80" + batCap(4000, 3, 6, 2073600, 5.5f, 8);
            }
            if (mdl.equals("K900")) {
                return "K900" + batCap(2500, 3, 6, 2073600, 5.5f, 6);
            }
            if (mdl.equals("K910")) {
                return "Vibe Z (K910)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("K910E")) {
                return "Vibe Z (K910E)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("K910L")) {
                return "Vibe Z LTE (K910L)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("K920")) {
                return "Vibe Z2 Pro (K920)" + batCap(4000, 3, 6, 3686400, 6.0f, 7);
            }
        }
        if (mdl.equals("N908")) {
            return "N908 [Fake]" + batCap(0, 1);
        }
        if (mdl.startsWith("P")) {
            if (mdl.equals("P70")) {
                return "P70" + batCap(4000, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("P70-A")) {
                return "P70-A" + batCap(4000, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("P90")) {
                return "P90" + batCap(4000, 3, 6, 2073600, 5.5f, 8);
            }
            if (mdl.equals("P770")) {
                return "P770" + batCap(3500, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("P780")) {
                return "P780" + batCap(4000, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("P780S+")) {
                return "P780 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("P780T") || mdl.equals("P780W")) {
                return "P780 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("PB1-750M")) {
                return "Phab Plus" + batCap(3500, 3, 6, 2073600, 6.8f, 7);
            }
        }
        if (mdl.startsWith("S")) {
            if (mdl.equals("S60") || mdl.equals("S60-T")) {
                return "S60" + batCap(2150, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("S90-U")) {
                return "Sisley S90" + batCap(2300, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("S580")) {
                return "S580" + batCap(2150, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("S650")) {
                return "S650" + batCap(2000, 1, 1, 518400, 4.7f, 6);
            }
            if (mdl.equals("S650C")) {
                return "S650 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S660")) {
                return "S660" + batCap(3000, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("S660C")) {
                return "S660 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S750")) {
                return "S750" + batCap(2000, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("S750C")) {
                return "S750 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S820")) {
                return "S820" + batCap(2000, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("S820I") || mdl.equals("S820T")) {
                return "S820 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S850")) {
                return "S850" + batCap(2000, 1, 1, 921600, 5.0f, 6);
            }
            if (mdl.equals("S850C")) {
                return "S850 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S850T")) {
                return "S850T" + batCap(2150, 1, 1, 921600, 5.0f, 6);
            }
            if (mdl.equals("S856")) {
                return "S856" + batCap(2500, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("S860")) {
                return "S860" + batCap(4000, 3, 6, 921600, 5.3f, 7);
            }
            if (mdl.equals("S860T")) {
                return "S860 [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S880")) {
                return "S880" + batCap(2250, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("S890")) {
                return "S890" + batCap(2250, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("S898T+")) {
                return "Golden Warrior S8" + batCap(2000, 3, 6, 921600, 5.3f);
            }
            if (mdl.equals("S920")) {
                return "S920" + batCap(2250, 3, 6, 921600, 5.3f, 6);
            }
            if (mdl.equals("S930")) {
                return "S930" + batCap(3000, 3, 6, 921600, 6.0f, 6);
            }
            if (mdl.equals("S930T")) {
                return "S930 [Fake]" + batCap(0, 3);
            }
            if (mdl.equals("S939")) {
                return "S939" + batCap(3000, 3, 6, 921600, 6.0f, 6);
            }
            if (mdl.equals("S960")) {
                return "Vibe X (S960)" + batCap(2000, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("S960T")) {
                return "Vibe X (S960) [Fake]" + batCap(0, 1);
            }
            if (mdl.equals("S5000")) {
                return "S5000" + batCap(3450, 4, 6, 1024000, 7.0f, 6);
            }
            if (mdl.equals("S6000")) {
                return "IdeaTab S6000" + batCap(6350, 4, 6, 1024000, 10.1f, 6);
            }
            if (mdl.equals("S6000F")) {
                return "IdeaTab S6000F" + batCap(6350, 4, 6, 1024000, 10.1f, 6);
            }
            if (mdl.equals("S6000H")) {
                return "IdeaTab S6000H" + batCap(6350, 4, 6, 1024000, 10.1f, 6);
            }
            if (mdl.equals("S6000L")) {
                return "IdeaTab S6000L" + batCap(6350, 4, 6, 1024000, 10.1f, 6);
            }
        }
        if (mdl.equals("TAB S8-50F")) {
            return "Tab S8-50F" + batCap(4290, 4, 6, 2304000, 8.0f, 8);
        }
        if (mdl.equals("TAB S8-50L")) {
            return "Tab S8-50L" + batCap(4290, 4, 6, 2304000, 8.0f, 8);
        }
        if (mdl.equals("V603")) {
            return "V603 [Fake]" + batCap(2800, 3, 1, 518400, 5.5f);
        }
        if (mdl.equals("VIBE X3")) {
            return "Vibe X3" + batCap(0, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("X2")) {
            return "Vibe X2" + batCap(2300, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("X2-AP")) {
            return "Vibe X2-AP" + batCap(2300, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("X2-EU")) {
            return "Vibe X2-EU" + batCap(2300, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.startsWith("Y")) {
            if (mdl.equals("YOGA TABLET 2-830F")) {
                return "Yoga Tablet 2 (8\") WiFi" + batCap(6400, 4, 6, 2304000, 8.0f, 8);
            }
            if (mdl.equals("YOGA TABLET 2-830L")) {
                return "Yoga Tablet 2 (8\") 3G" + batCap(6400, 4, 6, 2304000, 8.0f, 8);
            }
            if (mdl.equals("YOGA TABLET 2-1050F")) {
                return "Yoga Tablet 2 (10\") WiFi" + batCap(9600, 4, 6, 2304000, 10.1f, 8);
            }
            if (mdl.equals("YOGA TABLET 2-1050L")) {
                return "Yoga Tablet 2 (10\") LTE" + batCap(9600, 4, 6, 2304000, 10.1f, 8);
            }
            if (mdl.equals("YOGA TABLET 2 PRO-1380F")) {
                return "Yoga Tablet 2 Pro WiFi" + batCap(9600, 4, 6, 3686400, 13.3f, 8);
            }
            if (mdl.equals("YOGA TABLET 2 PRO-1380L")) {
                return "Yoga Tablet 2 Pro LTE" + batCap(9600, 4, 6, 3686400, 13.3f, 8);
            }
        }
        if (mdl.equals("Z90-7")) {
            return "Vibe Shot (Z90-7)" + batCap(2900, 1, 6, 2073600, 5.0f, 7);
        }
        return "";
    }

    private static String getDevModel_LeTV() {
        String mdl = getStrippedBuildModel(DEVMANUF_LETV);
        if (mdl.equals("LE 1S")) {
            return "Le 1s" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X600")) {
            return "One (X600)" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X800")) {
            return "One Pro (X800)" + batCap(3000, 3, 6, 3686400, 5.5f, 10);
        }
        if (mdl.equals("X900")) {
            return "One Max (X900)" + batCap(3400, 3, 6, 3686400, 6.33f, 10);
        }
        return "";
    }

    private static String getDevModel_LG() {
        String mdl = getStrippedBuildModel(30);
        if (mdl.startsWith("A")) {
            if (mdl.equals("AS680")) {
                return "Optimus 2" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("AS695")) {
                return "Optimus Plus" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("AS870")) {
                return "Optimus F5" + batCap(2460, 1, 11, 518400, 4.3f, 6);
            }
        }
        if (mdl.startsWith("D")) {
            if (mdl.equals("D100")) {
                return "L20" + batCap(1540, 1, 1, 76800, 3.0f, 6);
            }
            if (mdl.equals("D120")) {
                return "L30" + batCap(1540, 1, 1, 76800, 3.2f, 6);
            }
            if (mdl.equals("D160")) {
                return "L40" + batCap(1540, 1, 6, 153600, 3.5f, 6);
            }
            if (mdl.equals("D170")) {
                return "L40 Dual" + batCap(1540, 1, 6, 153600, 3.5f, 6);
            }
            if (mdl.equals("D213")) {
                return "L50" + batCap(1900, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("D213N")) {
                return "L50 Sporty" + batCap(1900, 1, 1, 384000, 4.0f, 6);
            }
            /*if (mdl.equals("D280") || mdl.equals("D280F") || mdl.equals("D280N")) {
                return "L65" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.3f, 6);
            }
            if (mdl.equals("D285")) {
                return "L65 Dual" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.3f, 6);
            }
            if (mdl.equals("D373")) {
                return "L80" + batCap(2540, 1, 6, 384000, 5.0f, 6);
            }
            if (mdl.equals("D380")) {
                return "L80 Dual" + batCap(2540, 1, 6, 384000, 5.0f, 6);
            }
            if (mdl.equals("D385")) {
                return "L80 Dual TV" + batCap(2460, 1, 6, 384000, 5.0f, 6);
            }
            if (mdl.equals("D290N")) {
                return "L Fino" + batCap(1900, 1, 6, 384000, 4.5f, 6);
            }
            if (mdl.equals("D295")) {
                return "L Fino Dual" + batCap(1900, 1, 6, 384000, 4.5f, 6);
            }
            if (mdl.equals("D315")) {
                return "F70" + batCap(2440, 1, 6, 384000, 4.5f);
            }
            if (mdl.equals("D320") || mdl.equals("D320F8") || mdl.equals("D320N") || mdl.equals("D329")) {
                return "L70" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f, 6);
            }
            if (mdl.equals("D325")) {
                return "L70 Dual" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f, 6);
            }
            if (mdl.equals("D331")) {
                return "L Bello" + batCap(2540, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("D335")) {
                return "L Bello Dual" + batCap(2540, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("D337")) {
                return "L Prime" + batCap(2460, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("D390N")) {
                return "F60" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f, 7);
            }
            if (mdl.equals("D392")) {
                return "F60 Dual" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f, 7);
            }*/
            if (mdl.equals("D405") || mdl.equals("D405N")) {
                return "L90" + batCap(2540, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("D410")) {
                return "L90 Dual" + batCap(2540, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("D415")) {
                return "Optimus L90" + batCap(2460, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("D500") || mdl.equals("D505")) {
                return "Optimus F6" + batCap(2460, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("D520")) {
                return "Optimus F3Q" + batCap(2460, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("D605")) {
                return "Optimus L9II" + batCap(2150, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("D610")) {
                return "G2 mini" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("D618")) {
                return "G2 mini Dual SIM" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("D620") || mdl.equals("D620K") || mdl.equals("D620R")) {
                return "G2 mini LTE" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("D631")) {
                return "G Vista" + batCap(3200, 3, 6, 921600, 5.7f);
            }
            if (mdl.equals("D680") || mdl.equals("D682TR")) {
                return "G Pro Lite" + batCap(3140, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("D686")) {
                return "G Pro Lite Dual" + batCap(3140, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("D690") || mdl.equals("D690N")) {
                return "G3 Stylus Dual SIM" + batCap(3000, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("D693N")) {
                return "G3 Stylus" + batCap(3000, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("D700")) {
                return "Optimus L9" + batCap(2150, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("D722") || mdl.equals("D722K") || mdl.equals("D722V") || mdl.equals("D724")) {
                return "G3 S" + batCap(2540, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("D725")) {
                return "Vigor (AT&T)" + batCap(2540, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("D728")) {
                return "G3 S Dual SIM" + batCap(2540, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("D800")) {
                return "G2 (AT&T)" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D801")) {
                return "G2 (T-Mobile)" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D802") || mdl.equals("D802TA") || mdl.equals("D803") || mdl.equals("D805")) {
                return "G2" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D820") || mdl.equals("D821")) {
                return "Nexus 5" + batCap(2300, 1, 7, 2073600, 4.95f, 9);
            }
            if (mdl.equals("D837") || mdl.equals("D838")) {
                return "G Pro2" + batCap(3200, 3, 6, 2073600, 5.9f, 7);
            }
            if (mdl.equals("D850")) {
                return "G3 (AT&T)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D851")) {
                return "G3 (T-Mobile)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D852") || mdl.equals("D852G")) {
                return "G3 (Canada)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D855")) {
                return "G3 (Europe)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D856")) {
                return "G3 Dual-LTE" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D857") || mdl.equals("D858") || mdl.equals("D859")) {
                return "G3 Dual SIM" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("D950")) {
                return "G Flex (AT&T)" + batCap(3500, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("D955") || mdl.equals("D956") || mdl.equals("D958")) {
                return "G Flex" + batCap(3500, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("D959")) {
                return "G Flex (T-Mobile)" + batCap(3400, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("DS1402")) {
                return "G4" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
        }
        if (mdl.startsWith("E")) {
            if (mdl.equals("E400")) {
                return "Optimus L3" + batCap(1500, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("E405")) {
                return "Optimus L3 Dual" + batCap(1540, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("E410") || mdl.equals("E410I")) {
                return "Optimus L1 II" + batCap(1540, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("E425") || mdl.equals("E430")) {
                return "Optimus L3 II" + batCap(1540, 1, 6, 76800, 3.2f, 6);
            }
            if (mdl.equals("E435")) {
                return "Optimus L3 II Dual" + batCap(1540, 1, 6, 76800, 3.2f, 6);
            }
            if (mdl.equals("E440") || mdl.equals("E467F")) {
                return "Optimus L4 II" + batCap(1700, 1, 6, 153600, 3.8f, 6);
            }
            if (mdl.equals("E445")) {
                return "Optimus L4 II Dual" + batCap(1700, 1, 6, 153600, 3.8f, 6);
            }
            if (mdl.equals("E455")) {
                return "Optimus L5 II Dual" + batCap(1700, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("E460")) {
                return "Optimus L5 II" + batCap(1700, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("E475")) {
                return "Optimus L1 II Tri" + batCap(1540, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("E610") || mdl.equals("E617")) {
                return "Optimus L5" + batCap(1500, 1, 1, 153600, 4.0f);
            }
            if (mdl.equals("E612") || mdl.equals("E615")) {
                return "Optimus L5 Dual" + batCap(1540, 1, 1, 153600, 4.0f);
            }
            if (mdl.equals("E720")) {
                return "Optimus Chic" + batCap(1250, 1, 1, 153600, 3.2f);
            }
           /* if (mdl.equals("E960") || mdl.equals("E960W")) {
                return "Nexus 4" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 7, 983040, 4.7f, 6);
            }*/
            /*if (mdl.equals("E970") || mdl.equals("E971") || mdl.equals("E972") || mdl.equals("E973") || mdl.equals("E975") || mdl.equals("E977")) {
                return "Optimus G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 14, 983040, 4.7f, 6);
            }*/
            if (mdl.equals("E975W")) {
                return "Optimus GJ" + batCap(2280, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("E980") || mdl.equals("E985") || mdl.equals("E986") || mdl.equals("E988")) {
                return "Optimus G Pro" + batCap(3140, 3, 15, 2073600, 5.5f, 7);
            }
        }
        /*if (mdl.startsWith("F")) {
            if (mdl.equals("F100L") || mdl.equals("F100S")) {
                return "Optimus Vu" + batCap(2080, 1, 12, 786432, 5.0f, 6);
            }
            if (mdl.equals("F120K") || mdl.equals("F120L") || mdl.equals("F120S")) {
                return "Optimus LTE Tag" + batCap(1700, 1, 12, 384000, 4.3f);
            }
            if (mdl.equals("F160K") || mdl.equals("F160L") || mdl.equals("F160LV") || mdl.equals("F160S")) {
                return "Optimus LTE II" + batCap(2150, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("F180") || mdl.equals("F180K") || mdl.equals("F180L") || mdl.equals("F180S")) {
                return "Optimus G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 14, 983040, 4.7f, 6);
            }
            if (mdl.equals("F200K") || mdl.equals("F200L") || mdl.equals("F200S")) {
                return "Optimus Vu II" + batCap(2150, 1, 12, 786432, 5.0f, 6);
            }
            if (mdl.equals("F220K")) {
                return "Optimus GK" + batCap(3100, 1, 12, 2073600, 5.0f);
            }
            if (mdl.equals("F240K") || mdl.equals("F240L") || mdl.equals("F240S")) {
                return "Optimus G Pro" + batCap(3140, 3, 15, 2073600, 5.5f, 7);
            }
            if (mdl.equals("F260K") || mdl.equals("F260L") || mdl.equals("F260S")) {
                return "Optimus LTE III" + batCap(2450, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("F300K") || mdl.equals("F300L") || mdl.equals("F300S")) {
                return "Vu3" + batCap(2610, 1, 14, 1228800, 5.2f, 7);
            }
            if (mdl.equals("F310L") || mdl.equals("F310LR")) {
                return "Gx" + batCap(3140, 3, 15, 2073600, 5.5f, 7);
            }
            if (mdl.equals("F320K") || mdl.equals("F320L") || mdl.equals("F320S")) {
                return "G2 (Korea)" + batCap(2610, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("F340K") || mdl.equals("F340L") || mdl.equals("F340S")) {
                return "G Flex (Korea)" + batCap(3500, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("F350K") || mdl.equals("F350L") || mdl.equals("F350S")) {
                return "G Pro2 (Korea)" + batCap(3200, 3, 6, 2073600, 5.9f, 7);
            }
            if (mdl.equals("F370K") || mdl.equals("F370L") || mdl.equals("F370S")) {
                return "F70 (Korea)" + batCap(2440, 1, 6, 384000, 4.5f);
            }
            if (mdl.equals("F390K") || mdl.equals("F390L") || mdl.equals("F390S")) {
                return "G2 mini LTE" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("F400K") || mdl.equals("F400L") || mdl.equals("F400S")) {
                return "G3 (Korea)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("F410S")) {
                return "G3 A" + batCap(2610, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("F430L")) {
                return "Gx2" + batCap(3200, 3, 6, 921600, 5.7f);
            }
            if (mdl.equals("F460K") || mdl.equals("F460L") || mdl.equals("F460S")) {
                return "G3 Cat.6" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("F470K") || mdl.equals("F470L") || mdl.equals("F470S")) {
                return "G3 Beat" + batCap(2540, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("F480K") || mdl.equals("F480L") || mdl.equals("F480S")) {
                return "Wine Smart" + batCap(1700, 1, 6, 153600, 3.5f);
            }
            if (mdl.equals("F490L")) {
                return "G3 Screen" + batCap(3000, 3, 6, 2073600, 5.9f, 7);
            }
            if (mdl.equals("F500K") || mdl.equals("F500L") || mdl.equals("F500S")) {
                return "G4 (Korea)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("F510K") || mdl.equals("F510L") || mdl.equals("F510S")) {
                return "G Flex 2 LTE-A" + batCap(3000, 3, 27, 2073600, 5.5f, 10);
            }
            if (mdl.equals("F520K") || mdl.equals("F520L") || mdl.equals("F520S")) {
                return "AKA" + batCap(2610, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("F570K") || mdl.equals("F570L") || mdl.equals("F570S")) {
                return "Band Play" + batCap(2300, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("F600K") || mdl.equals("F600L") || mdl.equals("F600S")) {
                return "V10" + batCap(3000, 3, 6, 3686400, 5.7f, 7);
            }
            if (mdl.equals("F620K") || mdl.equals("F620L") || mdl.equals("F620S")) {
                return "Class" + batCap(2050, 1, 6, 921600, 5.0f, 7);
            }
        }
        if (mdl.startsWith("G")) {
            if (mdl.equals("G2 MINI")) {
                return "G2 mini" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("GT540")) {
                return "Optimus GT540" + batCap(1500, 1, 1, 153600, 3.0f);
            }
            if (mdl.equals("GW620")) {
                return "GW620" + batCap(1500, 1, 1, 153600, 3.0f);
            }
            if (mdl.equals("G WATCH")) {
                return "G Watch" + batCap(400, 6, 6, 78400, 1.65f);
            }
            if (mdl.equals("G WATCH R")) {
                return "G Watch R" + batCap(WalletConstants.ERROR_CODE_INVALID_TRANSACTION, 7, 26, 102400, 1.3f);
            }
            if (mdl.equals("G WATCH URBANE")) {
                return "G Watch Urbane" + batCap(WalletConstants.ERROR_CODE_INVALID_TRANSACTION, 7, 26, 102400, 1.3f, 7);
            }
        }
        if (mdl.startsWith("H")) {
            if (mdl.equals("H220") || mdl.equals("H221")) {
                return "Joy" + batCap(1900, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("H222TV")) {
                return "Joy TV" + batCap(1820, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("H320")) {
                return "Leon" + batCap(1900, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("H320N")) {
                return "Joy LTE" + batCap(1900, 1, 1, 384000, 4.0f, 7);
            }
            if (mdl.equals("H340F")) {
                return "Leon LTE" + batCap(1900, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("H340N")) {
                return "Leon" + batCap(1900, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("H420") || mdl.equals("H422")) {
                return "Spirit" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("H440") || mdl.equals("H440N") || mdl.equals("H440Y")) {
                return "Spirit 4G LTE" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 4.7f, 7);
            }
            if (mdl.equals("H443")) {
                return "Escape 2" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 4.7f, 7);
            }
            if (mdl.equals("H500F") || mdl.equals("H502F")) {
                return "Magna" + batCap(2540, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("H525N")) {
                return "G4c" + batCap(2540, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("H734") || mdl.equals("H735") || mdl.equals("H735AR") || mdl.equals("H735L") || mdl.equals("H735P") || mdl.equals("H735T") || mdl.equals("H735TR")) {
                return "G4 Beat" + batCap(2300, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("H740")) {
                return "Class" + batCap(2050, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("H788N")) {
                return "AKA" + batCap(2610, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("H790") || mdl.equals("H791")) {
                return "Nexus 5X" + batCap(2700, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("H810")) {
                return "G4 (AT&T)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H811")) {
                return "G4 (T-Mobile)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H812")) {
                return "G4 (Canada)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H815")) {
                return "G4 (EMEA)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H815K")) {
                return "G4 (Australia)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H815P")) {
                return "G4" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H815T")) {
                return "G4 (Hong Kong)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H815TR")) {
                return "G4 (Turkey)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H818") || mdl.equals("H818N") || mdl.equals("H818P")) {
                return "G4 Dual SIM" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H819")) {
                return "G4 (China)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("H950")) {
                return "G Flex 2 (AT&T)" + batCap(3000, 3, 27, 2073600, 5.5f, 10);
            }
            if (mdl.equals("H900")) {
                return "G4 Pro" + batCap(0, 3, 6, 3686400, 5.7f);
            }
            if (mdl.equals("H955")) {
                return "G Flex 2" + batCap(3000, 3, 27, 2073600, 5.5f, 10);
            }
            if (mdl.equals("H968")) {
                return "V10" + batCap(3000, 3, 6, 3686400, 5.7f, 7);
            }
        }
        if (mdl.equals("KH2500")) {
            return "Andro 1" + batCap(1500, 1, 1, 153600, 3.0f);
        }
        if (mdl.equals("KU3700")) {
            return "Optimus One" + batCap(1500, 1, 1, 153600, 3.2f);
        }
        if (mdl.equals("KU5900")) {
            return "Optimus Black" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("KU8800")) {
            return "Optimus EX" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("KU9500")) {
            return "Optimus Z" + batCap(1350, 1, 1, 307200, 3.5f);
        }
        if (mdl.startsWith("L")) {
            if (mdl.equals("L-01F")) {
                return "G2" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("L-04E")) {
                return "Optimus G Pro" + batCap(3140, 3, 15, 2073600, 5.5f, 7);
            }
            if (mdl.equals("L15G")) {
                return "Sunrise" + batCap(1540, 1, 1, 153600, 3.8f);
            }
            if (mdl.equals("L23")) {
                return "G Flex" + batCap(3500, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("L33L")) {
                return "Sunset" + batCap(1900, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("L3 II")) {
                return "Optimus L3 II" + batCap(1540, 1, 6, 76800, 3.2f);
            }
            if (mdl.equals("L31L")) {
                return "Access LTE" + batCap(2440, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("L34C")) {
                return "Optimus Fuel" + batCap(1700, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("L41C")) {
                return "Ultimate 2" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f);
            }
            if (mdl.equals("LG730")) {
                return "Venice" + batCap(1700, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("LG855")) {
                return "Marquee" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LG870")) {
                return "Optimus F7" + batCap(2540, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("LK430")) {
                return "G Pad F 7.0 TD-LTE" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("LN272S")) {
                return "Rumor Reflex S" + batCap(2460, 1, 1, 96000, 3.0f);
            }
            if (mdl.equals("LS620")) {
                return "Realm" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("LS660")) {
                return "Tribute (Virgin Mobile)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 4.5f);
            }
            if (mdl.equals("LS665")) {
                return "Tribute 2" + batCap(1900, 1, 6, 409920, 4.5f, 7);
            }
            if (mdl.equals("LS670")) {
                return "Optimus S" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("LS696")) {
                return "Elite" + batCap(1520, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("LS720")) {
                return "Optimus F3 (Sprint)" + batCap(2460, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LS740")) {
                return "Volt" + batCap(3000, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("LS751")) {
                return "Volt 2" + batCap(2540, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("LS770")) {
                return "G Stylo (Boost Mobile)" + batCap(3000, 3, 6, 921600, 5.7f, 7);
            }
            if (mdl.equals("LS840")) {
                return "Viper" + batCap(1700, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("LS860")) {
                return "Mach" + batCap(1700, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LS969")) {
                return "Optimus Elite" + batCap(1520, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("LS970")) {
                return "Optimus G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1);
            }
            if (mdl.equals("LS980")) {
                return "G2 (Sprint)" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("LS990")) {
                return "G3 (Sprint)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("LS991")) {
                return "G4 (Sprint)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("LS995")) {
                return "G Flex (Sprint)" + batCap(3500, 3, 27, 921600, 6.0f, 7);
            }
            if (mdl.equals("LS996")) {
                return "G Flex 2 (Sprint)" + batCap(3000, 3, 27, 2073600, 5.5f, 10);
            }
            if (mdl.equals("LU2300")) {
                return "Optimus Q" + batCap(1350, 1, 1, 384000, 3.5f);
            }
            if (mdl.equals("LU3000")) {
                return "Optimus Mach" + batCap(1500, 1, 6, 384000, 3.8f);
            }
            if (mdl.equals("LU3100")) {
                return "Optimus Chic" + batCap(1250, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("LU3700")) {
                return "Optimus One" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("LU6200")) {
                return "Optimus LTE" + batCap(1830, 1, 12, 921600, 4.5f);
            }
            if (mdl.equals("LU6500")) {
                return "Optimus Q2" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LU6800")) {
                return "Optimus Big" + batCap(1500, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("LU8300")) {
                return "Optimus Pad LTE" + batCap(6800, 4, 6, 983040, 8.9f);
            }
            if (mdl.equals("LU8800")) {
                return "Optimus Q2" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("LW690")) {
                return "Optimus C" + batCap(1500, 1, 1, 153600, 3.2f);
            }
        }
        if (mdl.startsWith("M")) {
            if (mdl.equals("MS323")) {
                return "Optimus L70 (MetroPCS)" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 6, 384000, 4.5f);
            }
            if (mdl.equals("MS345")) {
                return "Leon LTE (MetroPCS)" + batCap(1820, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("MS395")) {
                return "Optimus F60 (MetroPCS)" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("MS500")) {
                return "Optimus F6 (MetroPCS)" + batCap(2460, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("MS631")) {
                return "G Stylo (MetroPCS)" + batCap(2900, 3, 6, 921600, 5.7f, 7);
            }
            if (mdl.equals("MS659")) {
                return "Optimus F3 (MetroPCS)" + batCap(2460, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("MS690")) {
                return "Optimus C (MetroPCS)" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("MS695")) {
                return "Optimus M+ (MetroPCS)" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("MS770")) {
                return "Motion 4G (MetroPCS)" + batCap(1700, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("MS840")) {
                return "Connect 4G (MetroPCS)" + batCap(1540, 1, 1, 403200, 4.0f);
            }
            if (mdl.equals("MS870")) {
                return "Spirit 4G (MetroPCS)" + batCap(2150, 1, 6, 518400, 4.5f);
            }
        }
        if (mdl.equals("NEXUS 4")) {
            return "Nexus 4" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 7, 983040, 4.7f, 6);
        }
        if (mdl.equals("NEXUS 5")) {
            return "Nexus 5" + batCap(2300, 1, 7, 2073600, 4.95f, 9);
        }
        if (mdl.equals("NEXUS 5X")) {
            return "Nexus 5X" + batCap(2700, 1, 6, 2073600, 5.2f, 7);
        }
        if (mdl.equals("OPTIMUS 4X HD")) {
            return "Optimus 4X HD" + batCap(2150, 1, 14, 921600, 4.7f, 6);
        }
        if (mdl.startsWith("P")) {
            if (mdl.equals("P350")) {
                return "Optimus Me" + batCap(1280, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("P490L")) {
                return "G Pad 8.0 LTE" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("P500")) {
                return "Optimus One" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("P700") || mdl.equals("P705")) {
                return "Optimus L7" + batCap(1700, 1, 6, 384000, 4.3f, 5);
            }
            if (mdl.equals("P710")) {
                return "Optimus L7 II" + batCap(2460, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("P715")) {
                return "Optimus L7 II Dual" + batCap(2460, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("P720") || mdl.equals("P720H") || mdl.equals("P725")) {
                return "Optimus 3D Max" + batCap(1520, 1, 20, 384000, 4.3f, 6);
            }
            if (mdl.equals("P760") || mdl.equals("P769")) {
                return "Optimus L9" + batCap(2150, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("P870")) {
                return "Escape" + batCap(2150, 1, 6, 518400, 4.3f, 6);
            }
            if (mdl.equals("P870H") || mdl.equals("P875") || mdl.equals("P875H")) {
                return "Optimus F5" + batCap(2150, 1, 11, 518400, 4.3f, 6);
            }
            if (mdl.equals("P880") || mdl.equals("P880H")) {
                return "Optimus 4X HD" + batCap(2150, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("P920") || mdl.equals("P920H")) {
                return "Optimus 3D" + batCap(1500, 1, 20, 384000, 4.3f, 6);
            }
            if (mdl.equals("P930")) {
                return "Nitro" + batCap(1830, 1, 11, 921600, 4.5f, 6);
            }
            if (mdl.equals("P930H") || mdl.equals("P935") || mdl.equals("P935H")) {
                return "Optimus 4G LTE" + batCap(1830, 1, 14, 921600, 4.5f, 6);
            }
            if (mdl.equals("P940") || mdl.equals("P940H")) {
                return "Prada Phone by LG 3.0" + batCap(1540, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("P970") || mdl.equals("P970H")) {
                return "Optimus Black" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("P990") || mdl.equals("P990H") || mdl.equals("P993")) {
                return "Optimus 2X" + batCap(1500, 1, 6, 384000, 4.0f);
            }
        }
        if (mdl.startsWith("S")) {
            if (mdl.equals("SU370")) {
                return "Optimus One" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SU640")) {
                return "Optimus LTE" + batCap(1830, 1, 12, 921600, 4.5f);
            }
            if (mdl.equals("SU660")) {
                return "Optimus 2X" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("SU760")) {
                return "Optimus 3D" + batCap(1500, 1, 20, 384000, 4.3f, 6);
            }
            if (mdl.equals("SU870")) {
                return "Optimus 3D Cube" + batCap(1520, 1, 21, 384000, 4.3f);
            }
            if (mdl.equals("SU880")) {
                return "Optimus EX" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("SU950")) {
                return "Optimus Z" + batCap(1350, 1, 1, 307200, 3.5f);
            }
        }
        if (mdl.equals("T280")) {
            return "T280" + batCap(1700, 1, 6, 384000, 4.3f);
        }
        if (mdl.startsWith("U")) {
            if (mdl.equals("UK410")) {
                return "G Pad 7.0 LTE" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("UK495")) {
                return "G Pad 8.0 LTE" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("US730")) {
                return "Splendor (US Cellular)" + batCap(1700, 1, 6, 384000, 4.3f, 6);
            }
            if (mdl.equals("US780")) {
                return "Optimus F7 (US Cellular)" + batCap(2540, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("US990")) {
                return "G3 (US Cellular)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("US991")) {
                return "G4 (US Cellular)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("US995")) {
                return "G Flex 2 (US Cellular)" + batCap(3000, 3, 27, 2073600, 5.5f, 10);
            }
        }
        if (mdl.startsWith("V")) {
            if (mdl.equals("V400")) {
                return "G Pad 7.0" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("V410") || mdl.equals("VK410")) {
                return "G Pad 7.0 LTE" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("V480")) {
                return "G Pad 8.0" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("V490")) {
                return "G Pad 8.0 4G" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("V495")) {
                return "G Pad F 8.0 LTE" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("V496")) {
                return "G Pad F 8.0 LTE" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("V497")) {
                return "G Pad F 7.0 LTE" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("V498")) {
                return "G Pad II 8.0" + batCap(4200, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("V500") || mdl.equals("V510")) {
                return "G Pad 8.3" + batCap(4600, 4, 6, 2304000, 8.3f, 7);
            }
            if (mdl.equals("V507L")) {
                return "G Pad 8.3 LTE" + batCap(4600, 4, 6, 2304000, 8.3f, 7);
            }
            if (mdl.equals("V700") || mdl.equals("V700N")) {
                return "G Pad 10.1" + batCap(8000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("V900")) {
                return "Optimus Pad" + batCap(6400, 4, 6, 983040, 8.9f, 6);
            }
            if (mdl.equals("V940")) {
                return "G Pad II 10.1" + batCap(7400, 4, 6, 2304000, 10.1f, 7);
            }
            if (mdl.equals("VK700")) {
                return "G Pad 10.1 LTE" + batCap(8000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("VK810")) {
                return "G Pad 8.3 LTE" + batCap(4600, 4, 6, 2304000, 8.3f, 7);
            }
            if (mdl.equals("VK815")) {
                return "G Pad X8.3" + batCap(4800, 4, 1, 2304000, 8.3f, 7);
            }
            if (mdl.equals("VM696")) {
                return "Elite" + batCap(1520, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("VM720")) {
                return "Optimus F3 (Virgin Mobile)" + batCap(2460, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("VM969")) {
                return "Optimus Elite" + batCap(1520, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("VS410PP")) {
                return "Optimus Zone" + batCap(1540, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("VS415PP")) {
                return "Optimus Zone 2" + batCap(1700, 1, 1, 153600, 3.47f);
            }
            if (mdl.equals("VS450PP")) {
                return "Optimus Exceed 2" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.5f, 6);
            }
            if (mdl.equals("VS810PP")) {
                return "Transpyre" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("VS840")) {
                return "Lucid" + batCap(1700, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("VS870")) {
                return "Lucid 2" + batCap(2460, 1, 11, 518400, 4.3f, 6);
            }
            if (mdl.equals("VS876")) {
                return "Lucid 3" + batCap(2440, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("VS880")) {
                return "G Vista (Verizon)" + batCap(3200, 3, 6, 921600, 5.7f);
            }
            if (mdl.equals("VS890")) {
                return "Enact" + batCap(2460, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("VS920")) {
                return "Spectrum" + batCap(1830, 1, 12, 921600, 4.5f);
            }
            if (mdl.equals("VS930")) {
                return "Spectrum 2" + batCap(2460, 1, 14, 921600, 4.7f, 6);
            }
            if (mdl.equals("VS950")) {
                return "Intuition" + batCap(2080, 1, 12, 786432, 5.0f, 6);
            }
            if (mdl.equals("VS980")) {
                return "G2 (Verizon)" + batCap(3000, 1, 14, 2073600, 5.2f, 7);
            }
            if (mdl.equals("VS985")) {
                return "G3 (Verizon)" + batCap(3000, 3, 14, 3686400, 5.5f, 7);
            }
            if (mdl.equals("VS986")) {
                return "G4 (Verizon)" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
        }*/
        return "";
    }

    private static String getDevModel_Mediacom() {
        if (getStrippedBuildModel(DEVMANUF_MEDIACOM).equals("M-MP5303G")) {
            return "Smart Pad Mini Mobile (M-MP5303G)" + batCap(2200, 3, 1, 518400, 5.3f);
        }
        return "";
    }

    private static String getDevModel_Medion() {
        String mdl = getStrippedBuildModel(DEVMANUF_MEDION);
        if (mdl.equals("LIFETAB_P831X")) {
            return "LifeTab P831X" + batCap(5000, 4, 1, 1024000, 8.0f);
        }
        if (mdl.equals("LIFETAB_P891X")) {
            return "LifeTab P891X" + batCap(SOC_QCOM, 4, 6, 2304000, 8.9f);
        }
        if (mdl.equals("LIFETAB_S831X")) {
            return "LifeTab S831X" + batCap(0, 4, 6, 2304000, 8.0f);
        }
        if (mdl.equals("LIFETAB_S1034X")) {
            return "LifeTab S1034X" + batCap(SOC_QCOM, 4, 6, 2304000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_Meizu() {
        String brd = Build.BOARD.trim().toUpperCase();
        String mdl = getStrippedBuildModel(31);
        if (brd.equals("M1") || mdl.equals("M1")) {
            return "M1" + batCap(2500, 1, 1, 983040, 5.0f, 7);
        }
        if (brd.equals("M1NOTE") || mdl.equals("M1 NOTE")) {
            return "m1 note" + batCap(3140, 3, 5, 2073600, 5.5f, 7);
        }
        if (brd.equals("M2NOTE") || mdl.equals("M2 NOTE")) {
            return "m2 note" + batCap(3100, 3, 5, 2073600, 5.5f, 7);
        }
        if (brd.equals("M9") || mdl.equals("M9")) {
            return "M9" + batCap(1370, 1, 1, 614400, 3.54f);
        }
        if (brd.equals("MX") || mdl.equals("MX")) {
            return "MX" + batCap(1700, 1, 4, 614400, 4.0f, 6);
        }
        if (brd.equals("MX2") || brd.equals("MEIZU_MX2") || mdl.equals("MX2")) {
            return "MX2" + batCap(1800, 1, 1, 1024000, 4.4f);
        }
        if (brd.equals("MX3") || mdl.equals("MX3")) {
            return "MX3" + batCap(2400, 1, 1, 2073600, 5.1f, 7);
        }
        if (brd.equals("MX4") || mdl.equals("MX4")) {
            return "MX4" + batCap(3100, 3, 6, 2211840, 5.36f, 7);
        }
        if (brd.equals("MX4PRO") || mdl.equals("MX4 PRO")) {
            return "MX4 Pro" + batCap(3350, 3, 6, 3932160, 5.5f, 7);
        }
        if (brd.equals("MX5") || mdl.equals("MX5")) {
            return "MX5" + batCap(3150, 3, 23, 2073600, 5.5f, 7);
        }
        if (brd.equals("PRO5") || mdl.equals("PRO 5")) {
            return "Pro 5" + batCap(3050, 3, 24, 2073600, 5.7f, 10);
        }
        return "";
    }

    private static String getDevModel_MeLE() {
        String mdl = getStrippedBuildModel(64);
        if (mdl.equals("MELE X1000")) {
            return "X1000" + batCap(0, 9);
        }
        if (mdl.equals("MELE X2000")) {
            return "X2000" + batCap(0, 9);
        }
        return "";
    }

    private static String getDevModel_Micromax() {
        String mdl = getStrippedBuildModel(91);
        if (mdl.equals("A28")) {
            return "Bolt (A28)" + batCap(1500, 1, 1, 153600, 3.5f, 5);
        }
        if (mdl.equals("A59")) {
            return "Bolt (A59)" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("A61")) {
            return "Bolt (A61)" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("A064")) {
            return "Bolt (A064)" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("A065")) {
            return "Bolt (A065)" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("A066")) {
            return "Bolt (A066)" + batCap(1300, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("A067")) {
            return "Bolt (A067)" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("A74")) {
            return "Canvas Fun (A74)" + batCap(1500, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("A76")) {
            return "Canvas Fun (A76)" + batCap(2000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("A77")) {
            return "Canvas Juice" + batCap(3000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("A79")) {
            return "Bolt (A79)" + batCap(1450, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A082")) {
            return "Bolt (A082)" + batCap(1700, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A82")) {
            return "Bolt (A82)" + batCap(1800, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("A88")) {
            return "Canvas Music" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        /*if (mdl.equals("A089")) {
            return "Bolt (A089)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.0f, 6);
        }*/
        if (mdl.equals("A091")) {
            return "Canvas Engage" + batCap(1500, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("A092")) {
            return "Canvas Unite" + batCap(1500, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("A92")) {
            return "Canvas Lite" + batCap(2000, 1, 6, 384000, 5.0f);
        }
        if (mdl.equals("A093")) {
            return "Canvas Fire" + batCap(1750, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("A93")) {
            return "Canvas Elanza" + batCap(1950, 1, 1, 518400, 5.0f, 6);
        }
        if (mdl.equals("A94")) {
            return "Canvas MAd" + batCap(1800, 1, 6, 409920, 4.5f, 6);
        }
        if (mdl.equals("A96")) {
            return "Canvas Power" + batCap(4000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("A99")) {
            return "Canvas Xpress" + batCap(1950, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("A102")) {
            return "Canvas Doodle 3" + batCap(2500, 3, 1, 409920, 6.0f, 6);
        }
        if (mdl.equals("A104")) {
            return "Canvas Fire 2" + batCap(1900, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("A105")) {
            return "Canvas Entice" + batCap(1900, 1, 1, 384000, 5.0f, 6);
        }
        if (mdl.equals("A106")) {
            return "Canvas Unite 2" + batCap(2000, 1, 6, 384000, 4.7f);
        }
        if (mdl.equals("A107")) {
            return "Fire 4" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("A108")) {
            return "Canvas L" + batCap(2350, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("A109")) {
            return "Canvas XL2" + batCap(2500, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("A110Q")) {
            return "Canvas 2 Plus" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        /*if (mdl.equals("A111")) {
            return "Canvas Doodle" + batCap(RemoteMediaPlayer.STATUS_FAILED, 3, 6, 409920, 5.3f, 6);
        }*/
        if (mdl.equals("A113")) {
            return "Canvas Ego" + batCap(2000, 1, 1, 518400, 4.7f, 6);
        }
        if (mdl.equals("A114")) {
            return "Canvas 2.2" + batCap(2000, 1, 6, 518400, 5.0f, 6);
        }
        if (mdl.equals("A114R")) {
            return "Canvas Beat" + batCap(1900, 1, 6, 518400, 5.0f, 6);
        }
        if (mdl.equals("A115")) {
            return "Canvas 3D" + batCap(2000, 1, 1, 384000, 5.0f);
        }
        if (mdl.equals("A117")) {
            return "Canvas Magnus" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("A119")) {
            return "Canvas XL" + batCap(2450, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("A120")) {
            return "Canvas 2 Colours" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("A121")) {
            return "Canvas Elanza 2" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("A190")) {
            return "Canvas HD Plus" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("A200")) {
            return "Canvas Turbo Mini" + batCap(1800, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("A210")) {
            return "Canvas 4" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("A240")) {
            return "Canvas Doodle 2" + batCap(2600, 3, 6, 921600, 5.7f, 6);
        }
        if (mdl.equals("A250")) {
            return "Canvas Turbo" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("A255")) {
            return "Canvas Selfie" + batCap(2300, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("A290")) {
            return "Canvas Knight Cameo" + batCap(2000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("A300")) {
            return "Canvas Gold" + batCap(2300, 3, 6, 2073600, 5.5f);
        }
        if (mdl.equals("A310")) {
            return "Canvas Nitro (A310)" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("A311")) {
            return "Canvas Nitro (A311)" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("A315")) {
            return "Canvas 4 Plus" + batCap(2000, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("A316")) {
            return "Canvas Hue 2" + batCap(2000, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("A350")) {
            return "Canvas Knight" + batCap(2350, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("A05510")) {
            return "Yureka" + batCap(2500, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("AD3520")) {
            return "Bolt (AD3520)" + batCap(1500, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("AD4500")) {
            return "Bolt (AD4500)" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("AQ4501")) {
            return "Canvas A1 (AQ4501)" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("AQ4502")) {
            return "Canvas A1 (AQ4502)" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("AQ5000")) {
            return "Canvas Hue" + batCap(3000, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("AQ5001")) {
            return "Canvas Juice 2" + batCap(3000, 1, 6, 921600, 5.0f);
        }
//        if (mdl.equals("D200")) {
//            return "Bolt (D200)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
//        }
        if (mdl.equals("D303")) {
            return "Bolt (D303)" + batCap(1300, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("D320")) {
            return "Bolt (D320)" + batCap(1600, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("D321")) {
            return "Bolt (D321)" + batCap(1800, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("E311")) {
            return "Canvas Nitro 2" + batCap(2400, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("E313")) {
            return "Canvas Xpress 2" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("E455")) {
            return "Canvas Nitro 4G" + batCap(2500, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("E471")) {
            return "Canvas Knight 2 4G" + batCap(2260, 1, 23, 921600, 5.0f, 7);
        }
        if (mdl.equals("EG111")) {
            return "Canvas Duet II" + batCap(2300, 3, 6, 921600, 5.3f, 6);
        }
        if (mdl.equals("P470")) {
            return "Canvas Tab (P470)" + batCap(3200, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("P480")) {
            return "Canvas Tab (P480)" + batCap(3000, 4, 6, 614400, 7.0f, 7);
        }
        if (mdl.equals("P580")) {
            return "Funbook Ultra" + batCap(3600, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("P649")) {
            return "Canvas Tabby" + batCap(3200, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("P650")) {
            return "Canvas Tab (P650)" + batCap(4800, 4, 6, 786432, 8.0f, 7);
        }
        if (mdl.equals("P660")) {
            return "Canvas Tab Breeze" + batCap(4000, 4, 6, 786432, 7.85f, 7);
        }
        if (mdl.equals("P666")) {
            return "Canvas Tab (P666)" + batCap(4400, 4, 6, 1024000, 8.0f, 6);
        }
        if (mdl.equals("P680")) {
            return "Canvas Tab (P680)" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("P690")) {
            return "Canvas Tab (P690)" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("Q335")) {
            return "Bolt (Q335)" + batCap(1650, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("Q324")) {
            return "Bolt (Q324)" + batCap(1450, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("Q338")) {
            return "Bolt (Q338)" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("Q340")) {
            return "Canvas Selfie 2" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("Q345")) {
            return "Canvas Selfie Lens" + batCap(2800, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Q348")) {
            return "Canvas Selfie 3" + batCap(2300, 1, 23, 921600, 4.8f);
        }
        if (mdl.equals("Q355")) {
            return "Canvas Play" + batCap(2820, 3, 1, 409920, 5.5f);
        }
        if (mdl.equals("Q371")) {
            return "Canvas Pep" + batCap(1700, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("Q372")) {
            return "Canvas Unite 3" + batCap(2000, 1, 6, 384000, 4.7f);
        }
        if (mdl.equals("Q380")) {
            return "Canvas Spark" + batCap(2000, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("Q391")) {
            return "Canvas Doodle 4" + batCap(3000, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("Q392")) {
            return "Canvas Juice 3" + batCap(4000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("Q400")) {
            return "Canvas Blaze 4G" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Q450")) {
            return "Canvas Sliver 5" + batCap(2000, 1, 23, 921600, 4.8f, 7);
        }
        /*if (mdl.equals("S300")) {
            return "Bolt (S300)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("S301")) {
            return "Bolt (S301)" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 409920, 3.5f);
        }*/
        if (mdl.equals("YU5010")) {
            return "Yuphoria" + batCap(2230, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("YU5510")) {
            return "Yureka Plus" + batCap(2500, 3, 6, 2073600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_Minix() {
        String mdl = getStrippedBuildModel(32);
        if (mdl.equals("NEO-X5")) {
            return "Neo X5" + batCap(0, 9);
        }
        if (mdl.equals("NEO-X6")) {
            return "Neo X6" + batCap(0, 9);
        }
        if (mdl.equals("NEO-X7")) {
            return "Neo X7" + batCap(0, 9);
        }
        if (mdl.equals("NEO-Z64")) {
            return "Neo Z64" + batCap(0, 9);
        }
        return "";
    }

    private static String getDevModel_Mijue() {
        String mdl = getStrippedBuildModel(DEVMANUF_MIJUE);
        if (mdl.equals("M690+")) {
            return "M690+" + batCap(1950, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("P7000_PLUS")) {
            return "P7000 Plus" + batCap(3800, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Mlais() {
        String mdl = getStrippedBuildModel(DEVMANUF_MLAIS);
        if (mdl.equals("M4")) {
            return "M4" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("M7")) {
            return "M7" + batCap(2600, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("M9")) {
            return "M9" + batCap(2800, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("M52")) {
            return "M52" + batCap(3200, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Motorola() {
        String mdl = getStrippedBuildModel(33);
        if (mdl.equals("DROID RAZR")) {
            return "Droid Razr" + batCap(1780, 1, 24, 518400, 4.3f);
        }
        if (mdl.equals("DROID RAZR HD")) {
            return "Droid Razr HD" + batCap(2530, 1, 24, 921600, 4.7f, 6);
        }
        if (mdl.startsWith("M")) {
            if (mdl.equals("MB508")) {
                return "Flipside" + batCap(1170, 1, 1, 153600, 3.1f);
            }
            if (mdl.equals("MB520")) {
                return "Bravo" + batCap(1540, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MB526")) {
                return "Defy+" + batCap(1700, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MB611")) {
                return "Cliq 2" + batCap(1420, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MB612")) {
                return "Xprt" + batCap(1860, 1, 1, 153600, 3.1f);
            }
            if (mdl.equals("MB810")) {
                return "Droid Xtreme" + batCap(1540, 1, 1, 409920, 4.3f);
            }
            if (mdl.equals("MB853")) {
                return "Electrify" + batCap(1700, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("MB855")) {
                return "Photon 4G" + batCap(1700, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("MB860")) {
                return "Atrix 4G" + batCap(1930, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("MB865")) {
                return "Atrix 2" + batCap(1785, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("MB870")) {
                return "Droid 2" + batCap(1400, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MB886")) {
                return "Atrix HD" + batCap(1780, 1, 1, 921600, 4.5f, 6);
            }
            if (mdl.equals("ME525")) {
                return "Moto ME525" + batCap(1500, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("ME722")) {
                return "Milestone 2" + batCap(1390, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("ME811")) {
                return "Droid X" + batCap(1540, 1, 1, 409920, 4.3f);
            }
            if (mdl.equals("MOTO 360")) {
                String brd = Build.BOARD.trim().toUpperCase();
                if (brd.equals("MINNOW")) {
                    return "Moto 360 (2014)" + batCap(320, 7, 6, 92800, 1.56f);
                }
                if (brd.equals("SMELT")) {
                    return "Moto 360 (2015)" + batCap(400, 7, 6, 118800, 1.56f);
                }
            }
            if (mdl.equals("MOTO E 2015")) {
                return "Moto E (2015)" + batCap(2390, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("MOTOE2(3G)")) {
                return "Moto E2 3G" + batCap(2390, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("MOTOE2(4G-LTE)")) {
                return "Moto E2 4G LTE" + batCap(2390, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("MOTO G")) {
                return "Moto G" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("MOTO G 2014")) {
                return "Moto G (2014)" + batCap(2070, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("MOTO G 2015") || mdl.equals("MOTOG3")) {
                return "Moto G (2015)" + batCap(2470, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("MOTO X 2014")) {
                return "Moto X (2014)" + batCap(2300, 1, 23, 2073600, 5.2f, 7);
            }
            if (mdl.equals("MT620")) {
                return "Moto" + batCap(1390, 1, 1, 153600, 3.1f);
            }
            if (mdl.equals("MT680")) {
                return "Motoluxe" + batCap(1390, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("MT716")) {
                return "Moto MT716" + batCap(1380, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MT870")) {
                return "Moto MT870" + batCap(1880, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("MT887")) {
                return "Razr V" + batCap(1750, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("MZ505")) {
                return "Xoom Media Edition" + batCap(0, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("MZ600") || mdl.equals("MZ601") || mdl.equals("MZ602") || mdl.equals("MZ603") || mdl.equals("MZ605") || mdl.equals("MZ606")) {
                return "Xoom" + batCap(0, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("MZ604")) {
                return "Xoom WiFi" + batCap(0, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("MZ607")) {
                return "Xoom 2 Media Edition" + batCap(3960, 4, 1, 1024000, 8.2f);
            }
            if (mdl.equals("MZ608")) {
                return "Xoom 2 Media Edition 3G" + batCap(3960, 4, 1, 1024000, 8.2f);
            }
            if (mdl.equals("MZ609")) {
                return "Droid Xyboard 8.2" + batCap(3960, 4, 12, 1024000, 8.2f);
            }
            if (mdl.equals("MZ615")) {
                return "Xoom 2" + batCap(7000, 4, 12, 1024000, 10.1f);
            }
            if (mdl.equals("MZ616")) {
                return "Xoom 2 3G" + batCap(7000, 4, 12, 1024000, 10.1f);
            }
            if (mdl.equals("MZ617")) {
                return "Droid Xyboard 10.1" + batCap(7000, 4, 12, 1024000, 10.1f);
            }
        }
        if (mdl.equals("NEXUS 6")) {
            return "Nexus 6" + batCap(3220, 3, 23, 3686400, 5.96f, 7);
        }
        if (mdl.equals("RAZR HD")) {
            return "Razr HD" + batCap(2500, 1, 24, 921600, 4.7f, 6);
        }
        if (mdl.startsWith("X")) {
            if (mdl.equals("XT300")) {
                return "Spice" + batCap(1170, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("XT303")) {
                return "Motosmart Me" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("XT311")) {
                return "Fire" + batCap(1420, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("XT316")) {
                return "Moto XT316" + batCap(1420, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("XT317")) {
                return "Spice Key" + batCap(1420, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("XT319")) {
                return "XT319" + batCap(1390, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("XT320") || mdl.equals("XT321")) {
                return "Defy Mini" + batCap(1650, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("XT389")) {
                return "Motoluxe" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("XT535")) {
                return "Defy" + batCap(1650, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("XT550")) {
                return "Motosmart Mix" + batCap(1735, 1, 1, 153600, 4.0f);
            }
            if (mdl.equals("XT556")) {
                return "Defy XT" + batCap(1650, 1, 1, 409920, 3.7f, 5);
            }
            if (mdl.equals("XT560")) {
                return "Defy Pro" + batCap(1700, 1, 1, 153600, 2.7f, 5);
            }
            if (mdl.equals("XT603")) {
                return "Admiral" + batCap(1860, 1, 1, 307200, 3.1f);
            }
            if (mdl.equals("XT610")) {
                return "Droid Pro" + batCap(1420, 1, 1, 153600, 3.1f);
            }
            if (mdl.equals("XT611")) {
                return "Motosmart Flip" + batCap(1540, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("XT615")) {
                return "Moto XT615" + batCap(1390, 1, 1, 409920, 4.0f);
            }
            if (mdl.equals("XT682")) {
                return "Atrix TV" + batCap(1700, 1, 1, 409920, 4.0f, 5);
            }
            if (mdl.equals("XT687")) {
                return "Atrix TV" + batCap(1735, 1, 1, 409920, 4.0f, 5);
            }
            if (mdl.equals("XT720")) {
                return "Milestone" + batCap(1390, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("XT760")) {
                return "XT760" + batCap(1650, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT830C") || mdl.equals("XT1021")) {
                return "Moto E" + batCap(1980, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT860")) {
                return "Milestone 3" + batCap(1540, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT861") || mdl.equals("XT862")) {
                return "Droid 3" + batCap(1540, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT865")) {
                return "Droid Bionic" + batCap(1930, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT875")) {
                return "Droid Bionic" + batCap(1735, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT881")) {
                return "Electrify 2" + batCap(1780, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT882")) {
                return "Moto XT882" + batCap(1880, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT883")) {
                return "Milestone" + batCap(1500, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT885")) {
                return "Razr V" + batCap(1750, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT889")) {
                return "Razr V" + batCap(1750, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT890")) {
                return "Razr i" + batCap(2000, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT894")) {
                return "Droid 4" + batCap(1785, 1, 1, 518400, 4.0f);
            }
            if (mdl.equals("XT897")) {
                return "Photon Q 4G LTE" + batCap(1785, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT901")) {
                return "Electrify M" + batCap(2000, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT905") || mdl.equals("XT906") || mdl.equals("XT907")) {
                return "Razr M" + batCap(2000, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("XT910")) {
                return "Razr" + batCap(1780, 1, 24, 518400, 4.3f);
            }
            if (mdl.equals("XT912")) {
                return "Droid Razr" + batCap(1780, 1, 24, 518400, 4.3f);
            }
            if (mdl.equals("XT912M")) {
                return "Droid Razr Maxx" + batCap(3300, 1, 24, 518400, 4.3f);
            }
            if (mdl.equals("XT914") || mdl.equals("XT915")) {
                return "Razr D1" + batCap(1785, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("XT916") || mdl.equals("XT918")) {
                return "Razr D1 Dual SIM" + batCap(1785, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("XT919")) {
                return "Razr D3" + batCap(2000, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("XT920")) {
                return "Razr D3 Dual SIM" + batCap(2000, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("XT925")) {
                return "Razr HD" + batCap(2500, 1, 24, 921600, 4.7f, 6);
            }
            if (mdl.equals("XT926")) {
                return "Droid Razr HD" + batCap(2530, 1, 24, 921600, 4.7f, 6);
            }
            if (mdl.equals("XT926M")) {
                return "Droid Razr Maxx HD" + batCap(3300, 1, 24, 921600, 4.7f, 6);
            }
            if (mdl.equals("XT937C") || mdl.equals("XT939G")) {
                return "Moto G" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("XT1008")) {
                return "Moto G Forte" + batCap(2070, 1, 6, 921600, 4.5f);
            }
            if (mdl.equals("XT1022")) {
                return "Moto E Dual SIM" + batCap(1980, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT1023")) {
                return "Moto E (US)" + batCap(1980, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT1025")) {
                return "Moto E Dual TV" + batCap(1980, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("XT1028") || mdl.equals("XT1031") || mdl.equals("XT1032") || mdl.equals("XT1034") || mdl.equals("XT1035")) {
                return "Moto G" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("XT1030")) {
                return "Droid Mini" + batCap(2000, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("XT1033")) {
                return "Moto G Dual SIM" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("XT1039") || mdl.equals("XT1040") || mdl.equals("XT1042") || mdl.equals("XT1045")) {
                return "Moto G 4G" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("XT1049") || mdl.equals("XT1050") || mdl.equals("XT1052") || mdl.equals("XT1053") || mdl.equals("XT1055") || mdl.equals("XT1056") || mdl.equals("XT1058") || mdl.equals("XT1060")) {
                return "Moto X" + batCap(2200, 1, 23, 921600, 4.7f, 6);
            }
            if (mdl.equals("XT1063") || mdl.equals("XT1064")) {
                return "Moto G (2014)" + batCap(2070, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("XT1068") || mdl.equals("XT1069")) {
                return "Moto G Dual SIM (2014)" + batCap(2070, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("XT1072") || mdl.equals("XT1078")) {
                return "Moto G 4G (2014)" + batCap(2390, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("XT1080")) {
                if (Build.DEVICE.trim().toUpperCase().equals("OBAKE-MAXX")) {
                    return "Droid Maxx" + batCap(3500, 1, 24, 921600, 5.0f, 6);
                }
                return "Droid Ultra" + batCap(2130, 1, 24, 921600, 5.0f, 6);
            } else if (mdl.equals("XT1080M")) {
                return "Droid Maxx" + batCap(3500, 1, 24, 921600, 5.0f, 6);
            } else {
                if (mdl.equals("XT1092") || mdl.equals("XT1093") || mdl.equals("XT1094") || mdl.equals("XT1095") || mdl.equals("XT1096") || mdl.equals("XT1097")) {
                    return "Moto X (2014)" + batCap(2300, 1, 23, 2073600, 5.2f, 7);
                }
                if (mdl.equals("XT1254")) {
                    return "Droid Turbo" + batCap(3900, 1, 23, 3686400, 5.2f, 7);
                }
                if (mdl.equals("XT1505") || mdl.equals("XT1511") || mdl.equals("XT1524") || mdl.equals("XT1526") || mdl.equals("XT1527") || mdl.equals("XT1528")) {
                    return "Moto E (2015)" + batCap(2390, 1, 6, 518400, 4.5f, 6);
                }
                if (mdl.equals("XT1506")) {
                    return "Moto E 3G (2015)" + batCap(2390, 1, 6, 518400, 4.5f, 6);
                }
                if (mdl.equals("XT1540") || mdl.equals("XT1541") || mdl.equals("XT1542") || mdl.equals("XT1543") || mdl.equals("XT1548") || mdl.equals("XT1550")) {
                    return "Moto G (2015)" + batCap(2470, 1, 6, 921600, 5.0f, 7);
                }
                if (mdl.equals("XT1561")) {
                    return "Moto X Play (China)" + batCap(3630, 3, 1, 2073600, 5.5f, 7);
                }
                if (mdl.equals("XT1562") || mdl.equals("XT1563")) {
                    return "Moto X Play" + batCap(3630, 3, 1, 2073600, 5.5f, 7);
                }
                if (mdl.equals("XT1565")) {
                    return "Droid Maxx 2" + batCap(3630, 3, 1, 2073600, 5.5f, 7);
                }
                if (mdl.equals("XT1570")) {
                    return "Moto X Style (China)" + batCap(3000, 3, 6, 3686400, 5.7f, 7);
                }
                if (mdl.equals("XT1572")) {
                    return "Moto X Style" + batCap(3000, 3, 6, 3686400, 5.7f, 7);
                }
                if (mdl.equals("XT1575")) {
                    return "Moto X Pure Edition" + batCap(3000, 3, 6, 3686400, 5.7f, 7);
                }
            }
        }
        return "";
    }

    private static String getDevModel_MPIE() {
        String mdl = getStrippedBuildModel(128);
        if (mdl.equals("M8")) {
            return "M8" + batCap(0, 1);
        }
        if (mdl.equals("M10")) {
            return "M10" + batCap(0, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("S960")) {
            return "S960";
        }
        return "";
    }

    private static String getDevModel_MSI() {
        String mdl = getStrippedBuildModel(92);
        if (mdl.startsWith("PRIMO")) {
            if (mdl.equals("PRIMO73")) {
                return "Primo 73" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PRIMO73K")) {
                return "Primo 73K" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PRIMO73L")) {
                return "Primo 73L" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PRIMO76")) {
                return "Primo 76" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("PRIMO77")) {
                return "Primo 77" + batCap(3000, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("PRIMO78")) {
                return "Primo 78" + batCap(3000, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("PRIMO81")) {
                return "Primo 81" + batCap(3500, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("PRIMO81L")) {
                return "Primo 81L" + batCap(3500, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("PRIMO93")) {
                return "Primo 93" + batCap(6800, 4, 6, 786432, 9.7f);
            }
        }
        return "";
    }

    private static String getDevModel_MTC() {
        if (getStrippedBuildModel(80).equals("975")) {
            return "975" + batCap(1800, 1, 1, 518400, 4.5f);
        }
        return "";
    }

    private static String getDevModel_MyPhone() {
        String mdl = getStrippedBuildModel(34);
        if (mdl.equals("A919I")) {
            return "A919i" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("AGUA RIO")) {
            return "Agua Rio" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("FUN 3")) {
            return "Fun 3" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("INFINITY 2")) {
            return "Infinity 2" + batCap(2450, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("INFINITY 2 LITE")) {
            return "Infinity 2 Lite" + batCap(2400, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RIO 2")) {
            return "Rio 2" + batCap(2800, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("UNO")) {
            return "Uno" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        return "";
    }

    private static String getDevModel_MyWiGo() {
        String mdl = getStrippedBuildModel(35);
        if (mdl.equals("419")) {
            return "Turia 1" + batCap(1700, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("419-2")) {
            return "Turia 2" + batCap(1700, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("459")) {
            return "Excite 1" + batCap(1700, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("459-2")) {
            return "Excite 2" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("459-3")) {
            return "Excite 3" + batCap(2000, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("509-2")) {
            return "Wings 2" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("509-3")) {
            return "Wings 3" + batCap(2300, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("539")) {
            return "Magnum" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("559")) {
            return "City" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("569")) {
            return "Titan" + batCap(3000, 3, 6, 518400, 6.0f);
        }
        return "";
    }

    private static String getDevModel_NavCity() {
        String mdl = getStrippedBuildModel(DEVMANUF_NAVCITY);
        if (mdl.equals("NAVCOLOR")) {
            return "NavColor" + batCap(1100, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("NP-751 D")) {
            return "NP-751 D" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("NP-751 Q")) {
            return "NP-751 Q" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("NT-1710")) {
            return "NT-1710" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-1710 D")) {
            return "NT-1710 D" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-1711")) {
            return "NT-1711" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-1715")) {
            return "NT-1715" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-1720")) {
            return "NT-1720" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-1725")) {
            return "NT-1725" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-2555")) {
            return "NT-2555" + batCap(1400, 4, 1, 384000, 5.0f);
        }
        if (mdl.equals("NT-2740")) {
            return "NT-2740" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-2750")) {
            return "NT-2750" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("NT-2755")) {
            return "NT-2755" + batCap(2400, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Navon() {
        if (getStrippedBuildModel(DEVMANUF_NAVON).equals("M402")) {
            return "Mizu M402" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        return "";
    }

    private static String getDevModel_No1() {
        String mdl = getStrippedBuildModel(36);
        if (mdl.equals("ALPHA")) {
            return "Alpha" + batCap(1800, 1, 6, 409920, 4.7f);
        }
        if (mdl.equals("I5C")) {
            return "I5C" + batCap(1800, 1, 1, 409920, 4.7f);
        }
        if (mdl.equals("I5S")) {
            return "I5S" + batCap(1800, 1, 1, 409920, 4.0f);
        }
        if (mdl.equals("I6")) {
            return "I6" + batCap(1800, 1, 1, 409920, 4.7f);
        }
        if (mdl.equals("I6 PLUS")) {
            return "I6 Plus" + batCap(1800, 3, 1, 518400, 5.5f);
        }
        if (mdl.equals("MI 4")) {
            return "Mi 4" + batCap(1800, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("M3 LITE")) {
            return "M3 Lite" + batCap(2600, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("N3")) {
            return "N3" + batCap(2800, 3, 6, 921600, 5.7f);
        }
        if (mdl.equals("N4")) {
            return "N4" + batCap(2300, 3, 6, 409920, 5.7f);
        }
        if (mdl.equals("N3 ELITE")) {
            return "N3 Elite" + batCap(2800, 3, 6, 518400, 5.7f);
        }
        if (mdl.equals("NOTE EDGE")) {
            return "Note Edge" + batCap(3220, 3, 8, 2073600, 5.7f);
        }
        if (mdl.equals("S5")) {
            return "S5" + batCap(2180, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("S5+")) {
            return "S5+" + batCap(1800, 1, 1, 409920, 5.1f);
        }
        if (mdl.equals("S6")) {
            return "S6" + batCap(2300, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("S7")) {
            return "S7" + batCap(2800, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("S7+")) {
            return "S7+" + batCap(1800, 1, 1, 409920, 5.1f);
        }
        if (mdl.equals("S7 LITE")) {
            return "S7 Lite" + batCap(1800, 1, 1, 409920, 5.1f);
        }
        return "";
    }

    private static String getDevModel_Nokia() {
        String mdl = getStrippedBuildModel(37);
        if (mdl.equals("N1")) {
            return "N1" + batCap(5300, 4, 6, 3145728, 7.9f, 7);
        }
        if (mdl.equals("X")) {
            return "X" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("X+")) {
            return "X+" + batCap(1500, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("X2")) {
            return "X2" + batCap(1800, 1, 6, 384000, 4.3f);
        }
        if (mdl.equals("X2DS")) {
            return "X2 Dual SIM" + batCap(1800, 1, 6, 384000, 4.3f);
        }
        if (mdl.equals("XL")) {
            return "XL" + batCap(2000, 1, 6, 384000, 5.0f);
        }
        return "";
    }

    private static String getDevModel_nVIDIA() {
        String mdl = getStrippedBuildModel(38);
        String brd = Build.BOARD.trim().toUpperCase();
        if (mdl.equals("SHIELD") && brd.equals("P2450")) {
            return "Shield Portable (P2450)" + batCap(7350, 4, 6, 921600, 5.0f);
        }
        if (mdl.equals("SHIELD TABLET")) {
            return "Shield Tablet" + batCap(5197, 4, 6, 2304000, 8.0f);
        }
        if (mdl.equals("TEGRANOTE-P1640") || mdl.equals("TEGRA NOTE 7")) {
            return "Tegra Note 7 (P1640)" + batCap(4100, 4, 6, 1024000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Nyx() {
        if (getStrippedBuildModel(DEVMANUF_NYX).equals("NOBA_II")) {
            return "Noba II" + batCap(0, 1, 1, 384000, 4.0f);
        }
        return "";
    }

    private static String getDevModel_Odys() {
        String mdl = getStrippedBuildModel(DEVMANUF_ODYS);
        if (mdl.equals("UNO_X8")) {
            return "Uno X8" + batCap(0, 4, 1, 786432, 8.0f);
        }
        if (mdl.equals("UNO_X10")) {
            return "Uno X10" + batCap(0, 4, 1, 614400, 10.1f);
        }
        return "";
    }

    private static String getDevModel_Onda() {
        String mdl = getStrippedBuildModel(66);
        if (mdl.equals("A9 CORE4")) {
            return "V975M" + batCap(8500, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("V801S")) {
            return "V801s" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("V919")) {
            return "V919" + batCap(8000, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("V972 CORE4")) {
            return "V972 Core4" + batCap(8000, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("V975S")) {
            return "V975s" + batCap(6000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("V989")) {
            return "V989" + batCap(8000, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("V989 CORE8")) {
            return "V989 Core8" + batCap(8000, 4, 6, 3145728, 9.7f);
        }
        return "";
    }

    private static String getDevModel_OnePlus() {
        String mdl = getStrippedBuildModel(40);
        if (mdl.equals("A0001")) {
            return "One" + batCap(3100, 3, 8, 2073600, 5.5f, 7);
        }
        if (mdl.equals("A0002")) {
            return "2" + batCap(3300, 3, 8, 3686400, 5.5f, 10);
        }
        return "";
    }

    private static String getDevModel_Op3nDott() {
        String mdl = getStrippedBuildModel(88);
        if (mdl.equals("P4502")) {
            return "P4502" + batCap(1700, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("W032I-C3")) {
            return "W032i-C3" + batCap(4600, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_OPlus() {
        String mdl = getStrippedBuildModel(39);
        if (mdl.equals("360")) {
            return "360" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("360 ALPHA")) {
            return "360 Alpha" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("360 EXTREME")) {
            return "360 Extreme" + batCap(2400, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("7.3 PAD")) {
            return "7.3 Pad" + batCap(3500, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("7.3 PAD ACTIVE")) {
            return "7.3 Pad Active" + batCap(3200, 4, 1, 614400, 7.0f);
        }
        if (mdl.startsWith("8")) {
            if (mdl.equals("8.2 ANDROID")) {
                return "8.2 Android" + batCap(1400, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("8.6 ANDROID")) {
                return "8.6 Android" + batCap(1500, 1, 1, 518400, 4.5f);
            }
            if (mdl.equals("8.9 ANDROID")) {
                return "8.9 Android" + batCap(2300, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("8.12 ANDROID")) {
                return "8.12 Android" + batCap(2000, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("8.15 ANDROID")) {
                return "8.15 Android" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("8.16 ANDROID")) {
                return "8.16 Android" + batCap(2500, 3, 6, 921600, 5.7f);
            }
            if (mdl.equals("8.17 ANDROID")) {
                return "8.17 Android" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("8.31 ANDROID")) {
                return "8.31 Android" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("8.31Z ANDROID")) {
                return "8.31z Android" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("8.33 ANDROID")) {
                return "8.33 Android" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("8.36 ANDROID")) {
                return "8.36 Android" + batCap(2000, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("8.36Z ANDROID")) {
                return "8.36z Android" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("8.37 ANDROID")) {
                return "8.37 Android" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("8.38 ANDROID")) {
                return "8.38 Android" + batCap(1700, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("8.52 4GB")) {
                return "8.52 4GB" + batCap(1450, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("8.52 8GB")) {
                return "8.52 8GB" + batCap(1450, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("8.52 ANDROID")) {
                return "8.52 Android" + batCap(1450, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("8.75 ANDROID")) {
                return "8.75 Android" + batCap(1400, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("8.91 ANDROID")) {
                return "8.91 Android" + batCap(3000, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("8.92 ANDROID")) {
                return "8.92 Android" + batCap(1900, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("8.93 ANDROID")) {
                return "8.93 Android" + batCap(1900, 1, 6, 384000, 5.0f);
            }
        }
        if (mdl.equals("9.76 PAD")) {
            return "9.76 Pad" + batCap(8000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("AIR")) {
            return "Air" + batCap(2000, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("EVO 4G")) {
            return "Evo 4G" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.startsWith("FAB")) {
            if (mdl.equals("FAB 3G")) {
                return "Fab 3G" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("FAB COLOR")) {
                return "Fab Color" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("FAB COLOR 2.0")) {
                return "Fab Color 2.0" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("FAB ELITE")) {
                return "Fab Elite" + batCap(3000, 3, 6, 2073600, 6.5f);
            }
            if (mdl.equals("FAB ELITE 2.0")) {
                return "Fab Elite 2.0" + batCap(3000, 3, 6, 2073600, 6.5f);
            }
            if (mdl.equals("FAB ENERGY")) {
                return "Fab Energy" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("FAB GO")) {
                return "Fab Go" + batCap(2500, 3, 1, 409920, 6.0f);
            }
            if (mdl.equals("FAB LITE")) {
                return "Fab Lite" + batCap(2600, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("FAB NOVA 2.0")) {
                return "Fab Nova 2.0" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("FAB NOVA 3G")) {
                return "Fab Nova 3G" + batCap(2800, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("FAB TURBO")) {
                return "Fab Turbo" + batCap(2800, 3, 6, 921600, 6.0f);
            }
        }
        if (mdl.equals("GRANDE")) {
            return "Grande" + batCap(2700, 3, 6, 921600, 6.0f);
        }
        if (mdl.equals("IMAGINE")) {
            return "Imagine" + batCap(2000, 1, 6, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Oppo() {
        String mdl = getStrippedBuildModel(41);
        if (mdl.equals("1107")) {
            return "1107" + batCap(1800, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("3000")) {
            return "3000" + batCap(2000, 1, 1, 921600, 4.7f, 7);
        }
        if (mdl.equals("3005")) {
            return "3005" + batCap(2000, 1, 1, 921600, 4.7f, 7);
        }
        if (mdl.equals("3007")) {
            return "3007" + batCap(2000, 1, 1, 921600, 4.7f, 7);
        }
        if (mdl.startsWith("FIND")) {
            if (mdl.equals("FIND5") || mdl.equals("FIND 5")) {
                return "Find 5" + batCap(2500, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("FIND7") || mdl.equals("FIND 7")) {
                return "Find 7" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
            }
            if (mdl.equals("FIND7A") || mdl.equals("FIND 7A")) {
                return "Find 7a" + batCap(2800, 3, 6, 2073600, 5.5f, 7);
            }
        }
        if (mdl.equals("MIRROR3")) {
            return "Mirror 3" + batCap(2000, 1, 6, 921600, 4.7f, 7);
        }
        if (mdl.equals("MIRROR5")) {
            return "Mirror 5" + batCap(2420, 1, 6, 518400, 5.0f, 7);
        }
        if (mdl.equals("MIRROR5S")) {
            return "Mirror 5s" + batCap(2420, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.startsWith("R")) {
            if (mdl.equals("R7K") || mdl.equals("R7KF")) {
                return "R7 Lite" + batCap(2320, 1, 23, 921600, 5.0f, 7);
            }
            if (mdl.equals("R7PLUS")) {
                return "R7 Plus" + batCap(4100, 3, 23, 2073600, 6.0f, 7);
            }
            if (mdl.equals("R7T")) {
                return "R7" + batCap(2320, 1, 23, 2073600, 5.0f, 7);
            }
            if (mdl.equals("R811")) {
                return "Real (R811)" + batCap(1520, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("R817")) {
                return "Real (R817)" + batCap(1710, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("R819")) {
                return "Mirror (R819)" + batCap(2000, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("R815T")) {
                return "Clover (R815T)" + batCap(1700, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("R821T")) {
                return "Find Muse (R821T)" + batCap(1700, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("R827") || mdl.equals("R827T")) {
                return "Find 5 Mini" + batCap(2000, 1, 6, 518400, 4.7f, 6);
            }
            if (mdl.equals("R829") || mdl.equals("R829T")) {
                return "R1" + batCap(2410, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("R831") || mdl.equals("R831T")) {
                return "Neo" + batCap(1900, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("R1001")) {
                return "Joy (R1001)" + batCap(1700, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("R2001")) {
                return "Yoyo (R2001)" + batCap(1900, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("R6007")) {
                return "R6007" + batCap(2140, 1, 1, 921600, 4.7f);
            }
            if (mdl.equals("R8001")) {
                return "R1K (R8001)" + batCap(2140, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("R8105")) {
                return "Find Guitar (R8105)" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("R8106")) {
                return "R5 (R8106)" + batCap(2000, 1, 23, 2073600, 5.2f);
            }
            if (mdl.equals("R8107")) {
                return "R5 LTE (R8107)" + batCap(2000, 1, 23, 2073600, 5.2f);
            }
            if (mdl.equals("R8200") || mdl.equals("R8205") || mdl.equals("R8207")) {
                return "R1C" + batCap(2420, 1, 6, 921600, 5.0f, 7);
            }
        }
        if (mdl.equals("U701")) {
            return "Ulike (U701)" + batCap(1710, 1, 6, 384000, 4.0f);
        }
        /*if (mdl.equals("U705T")) {
            return "Ulike 2 (U705T)" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 1, 518400, 4.5f);
        }*/
        if (mdl.equals("X909")) {
            return "Find 5 (X909)" + batCap(2500, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("X9076") || mdl.equals("X9077")) {
            return "Find 7" + batCap(3000, 3, 6, 3686400, 5.5f, 7);
        }
        if (mdl.equals("X9000") || mdl.equals("X9006") || mdl.equals("X9007")) {
            return "Find 7a" + batCap(2800, 3, 6, 2073600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_Orange() {
        if (getStrippedBuildModel(DEVMANUF_ORANGE).equals("YOMI")) {
            return "Yomi (Alcatel Pop C1)" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        return "";
    }

    private static String getDevModel_Oukitel() {
        String mdl = getStrippedBuildModel(DEVMANUF_OUKITEL);
        if (mdl.equals("C1")) {
            return "C1" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("K4000")) {
            return "K4000" + batCap(4000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("ORIGINAL ONE")) {
            return "Original One" + batCap(1600, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("ORIGINAL PURE")) {
            return "Original Pure" + batCap(1600, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("P2")) {
            return "Black Bull P2" + batCap(4000, 1, 13, 518400, 5.0f, 7);
        }
        if (mdl.equals("U2")) {
            return "U2" + batCap(2050, 1, 6, 518400, 5.0f, 7);
        }
        /*if (mdl.equals("U6")) {
            return "U6" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 7);
        }*/
        if (mdl.equals("U7")) {
            return "U7" + batCap(2000, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("U8")) {
            return "U8 Universe Tap" + batCap(2800, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("U9")) {
            return "U9 Kindo Thranduil" + batCap(2600, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("U10")) {
            return "U10 Kindo" + batCap(2850, 3, 13, 2073600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_Overmax() {
        String mdl = getStrippedBuildModel(DEVMANUF_OVERMAX);
        if (mdl.equals("BASICTABII")) {
            return "BasicTab II" + batCap(2600, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("QUATTOR 7")) {
            return "Quattor 7" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Pantech() {
        String mdl = getStrippedBuildModel(42);
        if (mdl.equals("IM-A600S")) {
            return "Sirius" + batCap(0, 1, 1, 384000, 3.7f);
        }
        if (mdl.equals("IM-A630K")) {
            return "Izar" + batCap(0, 1, 1, 384000, 3.2f);
        }
        if (mdl.equals("IM-A650S")) {
            return "Vega" + batCap(0, 1, 1, 384000, 3.7f);
        }
        if (mdl.equals("IM-A690L") || mdl.equals("IM-A690S")) {
            return "Mirach" + batCap(0, 1, 1, 384000, 3.5f);
        }
        if (mdl.equals("IM-A710K") || mdl.equals("IM-A720L")) {
            return "VegaXpress" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IM-A725L")) {
            return "Vega X+" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IM-A730S")) {
            return "Vega S" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("IM-A740S") || mdl.equals("IM-A750K")) {
            return "Mirach A" + batCap(0, 1, 1, 384000, 3.5f);
        }
        if (mdl.equals("IM-A760S") || mdl.equals("IM-A770K") || mdl.equals("IM-A775C") || mdl.equals("IM-A780L")) {
            return "Vega Racer" + batCap(0, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("IM-A800K") || mdl.equals("IM-A800L") || mdl.equals("IM-A800S")) {
            return "Vega LTE" + batCap(1830, 1, 1, 1024000, 4.5f);
        }
        if (mdl.equals("IM-A810K") || mdl.equals("IM-A810L") || mdl.equals("IM-A810S")) {
            return "Vega LTE M" + batCap(1830, 1, 9, 1024000, 4.5f);
        }
        if (mdl.equals("IM-A820K") || mdl.equals("IM-A820L") || mdl.equals("IM-A820S")) {
            return "Vega LTE EX" + batCap(1830, 1, 9, 1024000, 4.5f);
        }
        /*if (mdl.equals("IM-A830K") || mdl.equals("IM-A830L") || mdl.equals("IM-A830S")) {
            return "Vega Racer 2" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 1, 921600, 4.8f);
        }
        if (mdl.equals("IM-A840K") || mdl.equals("IM-A840L") || mdl.equals("IM-A840S")) {
            return "Vega S5" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }*/
        if (mdl.equals("IM-A850K") || mdl.equals("IM-A850L") || mdl.equals("IM-A850S")) {
            return "Vega R3" + batCap(2600, 3, 6, 921600, 5.3f);
        }
        if (mdl.equals("IM-A860K") || mdl.equals("IM-A860L") || mdl.equals("IM-A860S")) {
            return "Vega No.6" + batCap(3140, 3, 6, 2073600, 5.9f);
        }
        if (mdl.equals("IM-A870K") || mdl.equals("IM-A870L") || mdl.equals("IM-A870S")) {
            return "Vega Iron" + batCap(2150, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("IM-A880K") || mdl.equals("IM-A880L") || mdl.equals("IM-A880S")) {
            return "Vega LTE A" + batCap(3100, 3, 6, 2073600, 5.6f);
        }
        if (mdl.equals("IM-A890K") || mdl.equals("IM-A890L") || mdl.equals("IM-A890S")) {
            return "Vega Secret Note" + batCap(3200, 3, 6, 2073600, 5.9f);
        }
        if (mdl.equals("IM-A900K") || mdl.equals("IM-A900L") || mdl.equals("IM-A900S")) {
            return "Vega Secret Up" + batCap(3150, 3, 6, 2073600, 5.6f);
        }
        if (mdl.equals("IM-A910K") || mdl.equals("IM-A910L") || mdl.equals("IM-A910S")) {
            return "Vega Iron2" + batCap(3220, 3, 24, 2073600, 5.3f);
        }
        if (mdl.equals("IM-A920K") || mdl.equals("IM-A920L") || mdl.equals("IM-A920S")) {
            return "Vega Pop-Up Note" + batCap(3220, 3, 6, 2073600, 5.6f);
        }
        if (mdl.equals("IM-T100K")) {
            return "Vega No.5" + batCap(0, 1, 1, 384000, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Phicomm() {
        String mdl = getStrippedBuildModel(DEVMANUF_PHICOMM);
        if (mdl.equals("CLUE L")) {
            return "Clue L" + batCap(2300, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("ENERGY L")) {
            return "Energy L" + batCap(0, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Philips() {
        String mdl = getStrippedBuildModel(43);
        if (mdl.equals("D633")) {
            return "D633" + batCap(1630, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("D822")) {
            return "D822" + batCap(2000, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("D833")) {
            return "D833" + batCap(2400, 1, 6, 384000, 4.3f);
        }
        if (mdl.equals("I908")) {
            return "I908" + batCap(3000, 1, 1, 2073600, 5.0f);
        }
        if (mdl.equals("I928")) {
            return "I928" + batCap(3300, 3, 1, 2073600, 6.0f);
        }
        if (mdl.equals("I966")) {
            return "Aurora I966" + batCap(3000, 3, 1, 3686400, 5.5f);
        }
        if (mdl.equals("S308")) {
            return "S308" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("S388")) {
            return "S388" + batCap(1700, 1, 6, 518400, 4.5f);
        }
//        if (mdl.equals("S398")) {
//            return "S398" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 1, 921600, 5.0f);
//        }
        if (mdl.equals("T539")) {
            return "T539" + batCap(1630, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("T939")) {
            return "T939" + batCap(2000, 1, 1, 384000, 3.2f);
        }
        if (mdl.equals("T3566")) {
            return "T3566" + batCap(2000, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("V387")) {
            return "Xenium V387" + batCap(4400, 1, 6, 921600, 5.0f);
        }
        /*if (mdl.equals("V726")) {
            return "V726" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 153600, 3.2f);
        }
        if (mdl.startsWith("W")) {
            if (mdl.equals("W337")) {
                return "W337" + batCap(1350, 1, 1, 96000, 3.2f);
            }
            if (mdl.equals("W536")) {
                return "W536" + batCap(1630, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("W626")) {
                return "W626" + batCap(1530, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("W632")) {
                return "W632" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 3.8f);
            }
            if (mdl.equals("W635")) {
                return "W635" + batCap(1630, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("W732")) {
                return "W732" + batCap(2400, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("W736")) {
                return "W736" + batCap(2400, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("W737")) {
                return "W737" + batCap(2400, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W820")) {
                return "W820" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("W832")) {
                return "W832" + batCap(2400, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("W920")) {
                return "W920" + batCap(1280, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("W930")) {
                return "W930" + batCap(2000, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("W3500")) {
                return "W3500" + batCap(2200, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("W3568")) {
                return "W3568" + batCap(2000, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("W5510")) {
                return "W5510" + batCap(1630, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("W6350")) {
                return "W6350" + batCap(1630, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("W6360")) {
                return "W6360" + batCap(2000, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("W6500")) {
                return "Xenium W6500" + batCap(2400, 1, 6, 518400, 4.3f, 6);
            }
            if (mdl.equals("W6610")) {
                return "Xenium W6610" + batCap(5300, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("W7376")) {
                return "W7376" + batCap(2400, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W7555")) {
                return "W7555" + batCap(2400, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("W8355")) {
                return "W8355" + batCap(3000, 3, 1, 518400, 5.3f);
            }
            if (mdl.equals("W8500")) {
                return "W8500" + batCap(2400, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W8510")) {
                return "W8510" + batCap(3300, 1, 1, 921600, 4.7f);
            }
            if (mdl.equals("W8555")) {
                return "W8555" + batCap(3300, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W8560")) {
                return "W8560" + batCap(3300, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W8568")) {
                return "W8568" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.0f);
            }
            if (mdl.equals("W9588")) {
                return "W9588" + batCap(2400, 1, 6, 384000, 3.5f);
            }
        }*/
        return "";
    }

    private static String getDevModel_Pipo() {
        String mdl = getStrippedBuildModel(65);
        if (mdl.equals("M9")) {
            return "M9" + batCap(7600, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M9PRO")) {
            return "M9 Pro" + batCap(7600, 4, 6, 2304000, 10.1f);
        }
        if (mdl.equals("P9")) {
            return "P9" + batCap(8800, 4, 6, 2304000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_PocketBook() {
        if (getStrippedBuildModel(DEVMANUF_POCKETBOOK).equals("SURFPAD 4 M")) {
            return "SURFpad 4 M" + batCap(4000, 4, 6, 3145728, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Pomp() {
        if (getStrippedBuildModel(DEVMANUF_POMP).equals("W89")) {
            return "W89" + batCap(2050, 1, 1, 409920, 4.7f);
        }
        return "";
    }

    private static String getDevModel_POV() {
        String mdl = getStrippedBuildModel(85);
        if (mdl.startsWith("MOB")) {
            if (mdl.startsWith("MOB-3515(")) {
                return "Mobii Phone 3515" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.startsWith("MOB-5045-B(")) {
                return "Mobii Phone 5045" + batCap(2000, 1, 6, 518400, 5.0f);
            }
        }
        if (mdl.startsWith("TAB")) {
            if (mdl.startsWith("TAB-P506(")) {
                return "Onyx 506 Navi" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P507(")) {
                return "Onyx 507 Navi" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P517(")) {
                return "Onyx 517 Navi" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P527(")) {
                return "Onyx 527 Navi" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P527S(")) {
                return "Onyx 527S" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P528(")) {
                return "Onyx 528" + batCap(2500, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P547(")) {
                return "Onyx 547 Navi" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P548(")) {
                return "Onyx 548" + batCap(2000, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P629(")) {
                return "Onyx 629" + batCap(0, 4, 1, 786432, 9.7f);
            }
            if (mdl.startsWith("TAB-P701(")) {
                return "Mobii 701" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.startsWith("TAB-P703(")) {
                return "Mobii 703" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.startsWith("TAB-P720(")) {
                return "Mobii 720" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P721(")) {
                return "Mobii 721" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P731N(")) {
                return "Mobii 731N" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.startsWith("TAB-P741(")) {
                return "Mobii 741" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P722C(")) {
                return "Mobii 722C" + batCap(2500, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P742(")) {
                return "Mobii 742" + batCap(2200, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P742C(")) {
                return "Mobii 742C" + batCap(2200, 4, 1, 614400, 7.0f);
            }
            if (mdl.startsWith("TAB-P825(")) {
                return "Mobii 825" + batCap(0, 4, 1, 786432, 8.0f);
            }
            if (mdl.startsWith("TAB-P825D(")) {
                return "Mobii 825D" + batCap(0, 4, 1, 786432, 8.0f);
            }
            if (mdl.startsWith("TAB-P925(")) {
                return "Mobii 925" + batCap(0, 4, 1, 614400, 9.0f);
            }
            if (mdl.startsWith("TAB-P1025(")) {
                return "Mobii 1025" + batCap(0, 4, 1, 614400, 10.1f);
            }
            if (mdl.startsWith("TAB-P1026(")) {
                return "Mobii 1026" + batCap(4500, 4, 1, 614400, 10.0f);
            }
            if (mdl.startsWith("TAB-P1030S(")) {
                return "Mobii 1030S" + batCap(0, 4, 6, 1049088, 10.1f);
            }
            if (mdl.startsWith("TAB-P1045(")) {
                return "Mobii 1045" + batCap(0, 4, 1, 1024000, 10.0f);
            }
            if (mdl.startsWith("TAB-P1046(")) {
                return "Mobii 1046" + batCap(4000, 4, 1, 614400, 10.0f);
            }
            if (mdl.startsWith("TAB-P1047S(")) {
                return "Mobii 1047S" + batCap(0, 4, 6, 1024000, 10.1f);
            }
            if (mdl.startsWith("TAB-P1325(")) {
                return "Mobii 1325" + batCap(0, 4, 1, 1024000, 13.3f);
            }
            if (mdl.startsWith("TAB-P6412(")) {
                return "Onyx 6412" + batCap(5000, 4, 1, 614400, 10.0f);
            }
            if (mdl.startsWith("TAB-PL1015(")) {
                return "Mobii 1015" + batCap(0, 4, 1, 614400, 10.0f);
            }
            if (mdl.startsWith("TAB-PR945(")) {
                return "Mobii 945 HD+" + batCap(0, 4, 6, 3145728, 9.7f);
            }
            if (mdl.startsWith("TAB-PROTAB2-IPS9(")) {
                return "ProTab 2 IPS" + batCap(0, 4, 6, 786432, 9.7f);
            }
            if (mdl.startsWith("TAB-PROTAB30-IPS9(")) {
                return "ProTab 3 IPS 9.7" + batCap(0, 4, 6, 786432, 9.7f);
            }
            if (mdl.startsWith("TAB-PROTAB30-IPS10(")) {
                return "ProTab 3 XXL 10.1" + batCap(0, 4, 6, 1024000, 10.1f);
            }
            if (mdl.startsWith("TAB-PROTAB25(")) {
                return "ProTab 25" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.startsWith("TAB-PROTAB25XXL(")) {
                return "ProTab 25XXL" + batCap(0, 4, 1, 614400, 10.1f);
            }
            if (mdl.startsWith("TAB-PROTAB26(")) {
                return "ProTab 26" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.startsWith("TAB-PROTAB26XL(")) {
                return "ProTab 26XL" + batCap(0, 4, 1, 480000, 8.0f);
            }
            if (mdl.startsWith("TAB-PROTAB26XL-8(")) {
                return "ProTab 26XL-8" + batCap(0, 4, 1, 480000, 8.0f);
            }
            if (mdl.startsWith("TAB-PROTAB26-IPS10(")) {
                return "ProTab 26XXL IPS" + batCap(0, 4, 6, 1024000, 10.0f);
            }
            if (mdl.startsWith("TAB-PROTAB27(")) {
                return "ProTab 27" + batCap(0, 4, 1, 384000, 7.0f);
            }
        }
        return "";
    }

    private static String getDevModel_Prestigio() {
        String mdl = getStrippedBuildModel(44);
        if (mdl.startsWith("PAP")) {
            if (mdl.equals("PAP4040DUO")) {
                return "MultiPhone 4040 Duo" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("PAP4300 DUO")) {
                return "MultiPhone 4300 Duo" + batCap(1500, 1, 6, 384000, 4.3f);
            }
            if (mdl.equals("PAP4500DUO")) {
                return "MultiPhone 4500 Duo" + batCap(1850, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("PAP4500TDUO")) {
                return "MultiPhone 4500T Duo" + batCap(1850, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("PAP5503DUO")) {
                return "MultiPhone 5503 Duo" + batCap(4000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("PAP5505DUO")) {
                return "MultiPhone 5505 Duo" + batCap(2400, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PAP5550DUO")) {
                return "MultiPhone 5550 Duo" + batCap(3000, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("PAP7500")) {
                return "MultiPhone 7500" + batCap(2300, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("PAP7600DUO")) {
                return "MultiPhone 7600 Duo" + batCap(2600, 3, 6, 921600, 6.0f);
            }
        }
        if (mdl.startsWith("PMP")) {
            if (mdl.equals("PMP3007C")) {
                return "MultiPad Rider 7.0" + batCap(3500, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMP3007C3G")) {
                return "MultiPad Rider 7.0 3G" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMP3670B")) {
                return "MultiPad 7.0 Ultra+" + batCap(3200, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("PMP3970B")) {
                return "MultiPad 7.0 HD" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMP5080B")) {
                return "MultiPad 5080B" + batCap(5400, 4, 1, 480000, 8.0f);
            }
            if (mdl.equals("PMP5670C")) {
                return "MultiPad 2 Pro Duo 7.0" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("PMP7070C")) {
                return "MultiPad 4 Diamond 7.0" + batCap(3850, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("PMP7070C3G")) {
                return "MultiPad 4 Diamond 7.0 3G" + batCap(3500, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("PMP7079D3G") || mdl.equals("PMP7079D3G_QUAD")) {
                return "MultiPad 4 Diamond 7.85 3G" + batCap(4700, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("PMP7079E3G")) {
                return "MultiPad 4 Diamond 7.85 3G" + batCap(4700, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("PMP7100D3G_QUAD")) {
                return "MultiPad 4 Ultimate 10.1 3G" + batCap(6400, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("PMP7110D3G")) {
                return "MultiPad 4 Diamond 10.1 3G" + batCap(6400, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("PMP7280D3G_QUAD")) {
                return "MultiPad 4 Ultra Quad 8.0 3G" + batCap(4600, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("PMP7380D3G_QUAD")) {
                return "MultiPad 4 Pro Quad 8.0 3G" + batCap(5300, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("PMP7480D3G_QUAD")) {
                return "MultiPad 4 Ultimate 8.0 3G" + batCap(4850, 4, 6, 786432, 8.0f);
            }
        }
        if (mdl.startsWith("PMT")) {
            if (mdl.equals("PMT3008")) {
                return "MultiPad Wize 3008" + batCap(3800, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("PMT3009")) {
                return "MultiPad Wize 3009" + batCap(3800, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("PMT3017")) {
                return "MultiPad Wize 3017" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3018")) {
                return "MultiPad Wize 3018" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3019")) {
                return "MultiPad Wize 3019" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3037_3G")) {
                return "MultiPad Wize 3037 3G" + batCap(3200, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3038_3G")) {
                return "MultiPad Wize 3038 3G" + batCap(3200, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3047_3G")) {
                return "MultiPad Wize 3047 3G" + batCap(3200, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("PMT3077")) {
                return "MultiPad Rider 7.0" + batCap(3500, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3077_3G")) {
                return "MultiPad Rider 7.0 3G" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3277_3G")) {
                return "MultiPad Ranger 7.0 3G" + batCap(3500, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("PMT3287_3G")) {
                return "MultiPad Ranger 8.0 3G" + batCap(4300, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("PMT3377")) {
                return "MultiPad Thunder 7.0i" + batCap(3000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("PMT3677")) {
                return "MultiPad 7.0 Ultra+" + batCap(3200, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("PMT5001_3G")) {
                return "MultiPad Muze 5001 3G" + batCap(7000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("PMT5002")) {
                return "MultiPad Wize 5002" + batCap(7000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("PMT5008_3G")) {
                return "MultiPad Muze 5008 3G" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("PMT5011_3G")) {
                return "MultiPad Muze 5011 3G" + batCap(7000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("PMT5018_3G")) {
                return "MultiPad Muze 5018 3G" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("PMT5021_3G")) {
                return "MultiPad Muze 5021 3G" + batCap(7000, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("PMT5287_4G")) {
                return "MultiPad Ranger 8.0 4G" + batCap(4300, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("PMT5487_3G")) {
                return "MultiPad 4 Quantum 8.0 3G" + batCap(4500, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("PMT5587")) {
                return "MultiPad 8.0 HD" + batCap(5000, 4, 1, 983040, 8.0f);
            }
            if (mdl.equals("PMT5777_3G")) {
                return "MultiPad Color 7.0 3G" + batCap(3500, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("PMT5877C_DUO")) {
                return "MultiPad 7.0 Ultra Duo" + batCap(4000, 4, 1, 1024000, 7.0f);
            }
            if (mdl.equals("PMT5887_3G")) {
                return "MultiPad Color 8.0 3G" + batCap(4400, 4, 1, 1024000, 8.0f);
            }
            if (mdl.equals("PMT7077_3G")) {
                return "MultiPad 4 Diamond 7.85 3G" + batCap(4700, 4, 1, 786432, 7.85f);
            }
            if (mdl.equals("PMT7177_3G")) {
                return "MultiPad 4 Diamond 10.1 3G" + batCap(6400, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("PMT7287C3G_QUAD")) {
                return "MultiPad 4 Ultra Quad 8.0 3G" + batCap(4600, 4, 6, 786432, 8.0f);
            }
            if (mdl.equals("PMT7787_3G")) {
                return "MultiPad Thunder 8.0i 3G" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
        }
        if (mdl.startsWith("PSP")) {
            if (mdl.equals("PSP3404DUO")) {
                return "MultiPhone 3404 Duo" + batCap(2000, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("PSP3405DUO")) {
                return "MultiPhone 3405 Duo" + batCap(2000, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("PSP3450DUO")) {
                return "MultiPhone 3450 Duo" + batCap(1730, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("PSP3452DUO")) {
                return "Muze A3" + batCap(3000, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("PSP3453DUO")) {
                return "Wize A3" + batCap(1600, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("PSP3455DUO")) {
                return "Grace X3" + batCap(1650, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("PSP3502DUO")) {
                return "MultiPhone 3502 Duo" + batCap(1850, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("PSP3504DUO")) {
                return "Muze C3" + batCap(2200, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PSP5453DUO")) {
                return "MultiPhone 5453 Duo" + batCap(1700, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("PSP5454DUO")) {
                return "MultiPhone 5454 Duo" + batCap(2000, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("PSP5455DUO")) {
                return "MultiPhone 5455 Duo" + batCap(2400, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("PSP5470DUO")) {
                return "Grace X5" + batCap(1800, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("PSP5504DUO")) {
                return "MultiPhone 5504 Duo" + batCap(1950, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("PSP5505DUO")) {
                return "MultiPhone 5505 Duo" + batCap(2400, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PSP5507DUO")) {
                return "MultiPhone 5507 Duo" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PSP5508DUO")) {
                return "MultiPhone 5508 Duo" + batCap(2300, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PSP5517DUO")) {
                return "MultiPhone 5517 Duo" + batCap(4000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("PSP5550DUO")) {
                return "MultiPhone 5550 Duo" + batCap(3000, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("PSP7505DUO")) {
                return "Grace X7" + batCap(1800, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PSP7557")) {
                return "Grace" + batCap(2300, 1, 24, 2073600, 5.0f);
            }
        }
        return "";
    }

    private static String getDevModel_Qbex() {
        if (getStrippedBuildModel(DEVMANUF_QBEX).equals("QBA757")) {
            return "QBA757" + batCap(2800, 1, 1, 384000, 5.2f);
        }
        return "";
    }

    private static String getDevModel_QMobile() {
        String mdl = getStrippedBuildModel(DEVMANUF_QMOBILE);
        if (mdl.equals("LINQ X100")) {
            return "Linq X100" + batCap(1700, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("LINQ X300")) {
            return "Linq X300" + batCap(1800, 1, 6, 409920, 4.5f);
        }
        return "";
    }

    private static String getDevModel_RCA() {
        String mdl = getStrippedBuildModel(4);
        if (mdl.startsWith("RCT")) {
            if (mdl.equals("RCT6203W46KB")) {
                return "Pro10" + batCap(0, 4, 1, 614400, 10.1f);
            }
            if (mdl.equals("RCT6203W46KC")) {
                return "Pro10 Edition II" + batCap(0, 4, 1, 614400, 10.1f);
            }
            if (mdl.equals("RCT6213W87DK")) {
                return "11 Maven Pro" + batCap(0, 4, 6, 1049088, 11.6f);
            }
            if (mdl.equals("RCT6272W23")) {
                return "RCT6272W23" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("RCT6293W23")) {
                return "9 Gemini" + batCap(0, 4, 1, 614400, 9.0f);
            }
            if (mdl.equals("RCT6303W87DK")) {
                return "10 Viking Pro" + batCap(0, 4, 6, 1024000, 10.1f);
            }
            if (mdl.equals("RCT6378W2")) {
                return "RCT6378W2" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("RCT6573W23")) {
                return "8 Apollo" + batCap(0, 4, 1, 786432, 8.0f);
            }
            if (mdl.equals("RCT6672W23")) {
                return "7 Mercury" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("RCT6773W22")) {
                return "7 Voyager" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("RCT6773W22B")) {
                return "7 Voyager II" + batCap(0, 4, 1, 614400, 7.0f);
            }
        }
        return "";
    }

    private static String getDevModel_Rekam() {
        String mdl = getStrippedBuildModel(DEVMANUF_REKAM);
        if (mdl.equals("3G105BQ")) {
            return "Citipad 3G-105 BQ" + batCap(6000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("3G702")) {
            return "Citipad 3G-702" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("3G785MQ")) {
            return "Citipad 3G-785 MQ" + batCap(3600, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("3G805BQ")) {
            return "Citipad 3G-805 BQ" + batCap(3800, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("3G905BQ")) {
            return "Citipad 3G-905 BQ" + batCap(6000, 4, 6, 786432, 9.7f);
        }
        if (mdl.equals("3G910RQ")) {
            return "Citipad 3G-910 RQ" + batCap(SOC_TI, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("L700")) {
            return "Citipad L-700" + batCap(4000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("L7003G")) {
            return "Citipad L-700 3G" + batCap(4000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("L800")) {
            return "Citipad L800" + batCap(4000, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("L8103G")) {
            return "Citipad L810 3G" + batCap(4000, 4, 6, 786432, 8.0f);
        }
        return "";
    }

    private static String getDevModel_Rikomagic() {
        if (getStrippedBuildModel(DEVMANUF_RIKOMAGIC).equals("RKM MK802IV")) {
            return "RKM MK802IV" + batCap(0, 10);
        }
        return "";
    }

    private static String getDevModel_Samsung() {
        if (Build.DEVICE.trim().toUpperCase().equals("GT-I7680")) {
            return "Oscar" + batCap(1500, 1, 23, 384000, 3.5f);
        }
        String mdl = getStrippedBuildModel(45);
        if (mdl.equals("EK-GC100")) {
            return "Galaxy Camera" + batCap(1650, 11, 16, 921600, 4.8f);
        }
        if (mdl.equals("EK-GC110")) {
            return "Galaxy Camera WiFi" + batCap(1650, 11, 16, 921600, 4.8f);
        }
        if (mdl.equals("GALAXY NEXUS")) {
            return "Galaxy Nexus" + batCap(1750, 1, 24, 921600, 4.65f, 6);
        }
        if (mdl.startsWith("GT-")) {
            /*if (mdl.equals("GT-B5330")) {
                return "Galaxy Chat" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-B5510")) {
                return "Galaxy Y Pro" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.6f);
            }
            if (mdl.equals("GT-B5512") || mdl.equals("GT-B5512B")) {
                return "Galaxy Y Pro Duos" + batCap(1350, 1, 1, 76800, 2.6f);
            }
            if (mdl.equals("GT-B7510")) {
                return "Galaxy Pro" + batCap(1350, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-B7800")) {
                return "Galaxy M Pro" + batCap(1350, 1, 1, 153600, 2.66f);
            }
            if (mdl.equals("GT-I5500")) {
                return "Galaxy 5" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-I5510")) {
                return "Galaxy 551" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 96000, 3.2f);
            }*/
            if (mdl.equals("GT-I5700")) {
                return "Galaxy Spica" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("GT-I5800")) {
                return "Galaxy 3" + batCap(1500, 1, 1, 96000, 3.2f);
            }
            if (mdl.equals("GT-I5801")) {
                return "Galaxy Apollo" + batCap(1500, 1, 1, 96000, 3.2f);
            }
            if (mdl.equals("GT-I6500") || mdl.equals("GT-I6500U")) {
                return "Galaxy" + batCap(1500, 1, 23, 153600, 3.2f);
            }
            if (mdl.equals("GT-I7500")) {
                return "Galaxy" + batCap(1500, 1, 23, 153600, 3.2f);
            }
            if (mdl.equals("GT-I7680")) {
                return "Oscar" + batCap(1500, 1, 23, 384000, 3.5f);
            }
            if (mdl.equals("GT-I8150")) {
                return "Galaxy W" + batCap(1500, 1, 1, 384000, 3.7f);
            }
            if (mdl.equals("GT-I8160")) {
                return "Galaxy Ace 2" + batCap(1500, 1, 2, 384000, 3.8f, 6);
            }
            if (mdl.equals("GT-I8190")) {
                return "Galaxy S III mini" + batCap(1500, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I8190N")) {
                return "Galaxy S III mini with NFC" + batCap(1500, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I8200") || mdl.equals("GT-I8200L")) {
                return "Galaxy S III mini VE" + batCap(1500, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I8200N")) {
                return "Galaxy S III mini VE with NFC" + batCap(1500, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I8250")) {
                return "Galaxy" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-I8260")) {
                return "Galaxy Core" + batCap(1800, 1, 1, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I8262")) {
                return "Galaxy Core Dual SIM" + batCap(1800, 1, 1, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I8520")) {
                return "Galaxy Beam" + batCap(1800, 1, 24, 384000, 3.7f);
            }
            if (mdl.equals("GT-I8530")) {
                return "Galaxy Beam" + batCap(2000, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I8550")) {
                return "Galaxy Win" + batCap(2000, 1, 1, 384000, 4.7f, 6);
            }
            if (mdl.equals("GT-I8552")) {
                return "Galaxy Win Dual SIM" + batCap(2000, 1, 1, 384000, 4.7f, 6);
            }
            if (mdl.equals("GT-I8730")) {
                return "Galaxy Express" + batCap(2000, 1, 25, 384000, 4.5f, 6);
            }
            if (mdl.equals("GT-I9000")) {
                return "Galaxy S" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9000B")) {
                return "Galaxy S (Brazil)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9000M")) {
                return "Galaxy S Vibrant (Canada)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9000T")) {
                return "Galaxy S (Americas)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9001")) {
                return "Galaxy S Plus" + batCap(1650, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("GT-I9003")) {
                return "Galaxy SL" + batCap(1650, 1, 16, 384000, 4.0f);
            }
            if (mdl.equals("GT-I9008")) {
                return "Galaxy S TD-SCDMA (China Mobile)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9010")) {
                return "Galaxy S Giorgio Armani" + batCap(1650, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9020") || mdl.equals("GT-I9020A") || mdl.equals("GT-I9020T")) {
                return "Nexus S" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9023")) {
                return "Nexus S" + batCap(1500, 1, 16, 384000, 4.0f, 5);
            }
            /*if (mdl.equals("GT-I9060")) {
                return "Galaxy Grand Neo" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.01f, 6);
            }
            if (mdl.equals("GT-I9060I")) {
                return "Galaxy Grand Neo Plus" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.01f);
            }
            if (mdl.equals("GT-I9062")) {
                return "Galaxy Grand Neo Duos" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.01f, 6);
            }
            if (mdl.equals("GT-I9063T")) {
                return "Galaxy Gran Neo Duos" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.01f, 6);
            }
            if (mdl.equals("GT-I9070") || mdl.equals("GT-I9070P")) {
                return "Galaxy S Advance" + batCap(1500, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-I9080") || mdl.equals("GT-I9080L")) {
                return "Galaxy Grand" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("GT-I9082")) {
                return "Galaxy Grand Duos" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("GT-I9082Z")) {
                return "Galaxy Grand Z" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("GT-I9088")) {
                return "Galaxy S UMTS-FDD (China Unicom)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-I9100") || mdl.equals("GT-I9100G") || mdl.equals("GT-I9100T")) {
                return "Galaxy S II" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9100M")) {
                return "Galaxy S II 4G (Bell)" + batCap(1700, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9100P")) {
                return "Galaxy S II NFC" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9103")) {
                return "Galaxy R" + batCap(1650, 1, 16, 384000, 4.2f, 6);
            }
            if (mdl.equals("GT-I9105")) {
                return "Galaxy S II Plus" + batCap(1650, 1, 25, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9105P")) {
                return "Galaxy S II Plus with NFC" + batCap(1650, 1, 25, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9108")) {
                return "Galaxy S II TD-SCDMA (China Mobile)" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("GT-I9128I")) {
                return "Galaxy Grand" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 384000, 5.0f);
            }*/
            if (mdl.equals("GT-I9150")) {
                return "Galaxy Mega 5.8" + batCap(2600, 3, 1, 518400, 5.8f, 6);
            }
            if (mdl.equals("GT-I9152")) {
                return "Galaxy Mega 5.8 Dual SIM" + batCap(2600, 3, 1, 518400, 5.8f, 6);
            }
            if (mdl.equals("GT-I9190")) {
                return "Galaxy S4 mini" + batCap(1900, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("GT-I9192")) {
                return "Galaxy S4 mini Dual SIM" + batCap(1900, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("GT-I9195")) {
                return "Galaxy S4 mini NFC" + batCap(1900, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("GT-I9195I")) {
                return "Galaxy S4 mini plus" + batCap(1900, 1, 24, 518400, 4.3f, 7);
            }
            if (mdl.equals("GT-I9195L")) {
                return "Galaxy S4 mini" + batCap(1900, 1, 24, 518400, 4.3f);
            }
            if (mdl.equals("GT-I9200")) {
                return "Galaxy Mega 6.3" + batCap(3200, 3, 16, 921600, 6.3f, 6);
            }
            if (mdl.equals("GT-I9210") || mdl.equals("GT-I9210T")) {
                return "Galaxy S II LTE" + batCap(1850, 1, 25, 384000, 4.5f, 6);
            }
            if (mdl.equals("GT-I9220")) {
                return "Galaxy Note WCDMA" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("GT-I9228")) {
                return "Galaxy Note TD-SCDMA" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("GT-I9230")) {
                return "Galaxy Golden" + batCap(1820, 1, 24, 384000, 3.7f, 6);
            }
            if (mdl.equals("GT-I9250") || mdl.equals("GT-I9250M")) {
                return "Galaxy Nexus" + batCap(1750, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("GT-I9250T")) {
                return "Galaxy Nexus (Australia)" + batCap(1750, 1, 24, 921600, 4.65f, 6);
            }
           /* if (mdl.equals("GT-I9260")) {
                return "Galaxy Premier" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("GT-I9295")) {
                return "Galaxy S4 Active" + batCap(2600, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9300")) {
                return "Galaxy S III" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("GT-I9300I") || mdl.equals("GT-I9300RWI") || mdl.equals("GT-I9301I")) {
                return "Galaxy S3 Neo" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f);
            }
            if (mdl.equals("GT-I9305")) {
                return "Galaxy S III LTE" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }*/
            if (mdl.equals("GT-I9500")) {
                return "Galaxy S4 3G" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9502")) {
                return "Galaxy S4 Dual SIM (China Unicom)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9505")) {
                return "Galaxy S4 LTE" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9505G")) {
                return "Galaxy S4 LTE Google Play Edition" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9506")) {
                return "Galaxy S4 LTE-A" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9508")) {
                return "Galaxy S4 3G (China Mobile)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("GT-I9515")) {
                return "Galaxy S4 VE" + batCap(2600, 1, 24, 2073600, 5.0f);
            }
            if (mdl.equals("GT-N5100")) {
                return "Galaxy Note 8.0 3G" + batCap(4600, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("GT-N5110")) {
                return "Galaxy Note 8.0 WiFi" + batCap(4600, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("GT-N5120")) {
                return "Galaxy Note 8.0 LTE" + batCap(4600, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("GT-N7000") || mdl.equals("GT-N7000B")) {
                return "Galaxy Note 3G" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("GT-N7005")) {
                return "Galaxy Note LTE" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("GT-N7100")) {
                return "Galaxy Note II 3G" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("GT-N7102")) {
                return "Galaxy Note II 3G (China Unicom)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("GT-N7105")) {
                return "Galaxy Note II LTE" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("GT-N7108")) {
                return "Galaxy Note II 3G (China Mobile)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("GT-N7108D")) {
                return "Galaxy Note II LTE (China Mobile)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("GT-N8000") || mdl.equals("GT-N8005")) {
                return "Galaxy Note 10.1 3G" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-N8010") || mdl.equals("GT-N8013")) {
                return "Galaxy Note 10.1 WiFi" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-N8020")) {
                return "Galaxy Note 10.1 LTE" + batCap(7000, 4, 1, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P1000")) {
                return "Galaxy Tab 3G" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("GT-P1010")) {
                return "Galaxy Tab WiFi" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("GT-P3100")) {
                return "Galaxy Tab 2 7.0 3G" + batCap(4000, 4, 2, 614400, 7.0f, 6);
            }
            if (mdl.equals("GT-P3110")) {
                return "Galaxy Tab 2 7.0 WiFi" + batCap(4000, 4, 2, 614400, 7.0f, 6);
            }
            if (mdl.equals("GT-P3200")) {
                return "Galaxy Tab 3 7.0 3G" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("GT-P3210")) {
                return "Galaxy Tab 3 7.0 WiFi" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("GT-P5100")) {
                return "Galaxy Tab 2 10.1 3G" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P5110") || mdl.equals("GT-P5113")) {
                return "Galaxy Tab 2 10.1 WiFi" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P5200")) {
                return "Galaxy Tab 3 10.1 3G" + batCap(6800, 4, 1, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P5210")) {
                return "Galaxy Tab 3 10.1 WiFi" + batCap(6800, 4, 1, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P5220")) {
                return "Galaxy Tab 3 10.1 LTE" + batCap(6800, 4, 1, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P6200")) {
                return "Galaxy Tab 7.0 Plus 3G" + batCap(4000, 4, 2, 614400, 7.0f);
            }
            if (mdl.equals("GT-P6210")) {
                return "Galaxy Tab 7.0 Plus WiFi" + batCap(4000, 4, 2, 614400, 7.0f);
            }
            if (mdl.equals("GT-P6211")) {
                return "Galaxy Tab 7.0 Plus N WiFi" + batCap(4000, 4, 2, 614400, 7.0f);
            }
            if (mdl.equals("GT-P6800")) {
                return "Galaxy Tab 7.7 3G" + batCap(5100, 4, 25, 1024000, 7.7f, 6);
            }
            if (mdl.equals("GT-P6810")) {
                return "Galaxy Tab 7.7 WiFi" + batCap(5100, 4, 25, 1024000, 7.7f, 6);
            }
            if (mdl.equals("GT-P7100")) {
                return "Galaxy Tab 10.1v WiFi" + batCap(6860, 4, 1, 1024000, 10.1f, 6);
            }
            if (mdl.equals("GT-P7300")) {
                return "Galaxy Tab 8.9 3G" + batCap(6000, 4, 2, 1024000, 8.9f, 6);
            }
            if (mdl.equals("GT-P7310")) {
                return "Galaxy Tab 8.9 WiFi" + batCap(6000, 4, 2, 1024000, 8.9f, 6);
            }
            if (mdl.equals("GT-P7320T")) {
                return "Galaxy Tab 8.9 4G" + batCap(6100, 4, 2, 1024000, 8.9f, 6);
            }
            if (mdl.equals("GT-P7500")) {
                return "Galaxy Tab 10.1 3G" + batCap(7000, 4, 2, 1024000, 10.1f);
            }
            if (mdl.equals("GT-P7501")) {
                return "Galaxy Tab 10.1N 3G" + batCap(7000, 4, 2, 1024000, 10.1f);
            }
            if (mdl.equals("GT-P7510")) {
                return "Galaxy Tab 10.1 WiFi" + batCap(7000, 4, 2, 1024000, 10.1f);
            }
            if (mdl.equals("GT-P7511")) {
                return "Galaxy Tab 10.1N WiFi" + batCap(7000, 4, 2, 1024000, 10.1f);
            }
            if (mdl.equals("GT-P8110")) {
                return "Nexus 10" + batCap(SOC_QCOM, 4, 3, 4096000, 10.1f, 7);
            }
            /*if (mdl.equals("GT-S5280")) {
                return "Galaxy Star" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S5282")) {
                return "Galaxy Star Dual SIM" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S5283") || mdl.equals("GT-S5283B")) {
                return "Galaxy Star Trios" + batCap(1300, 1, 1, 76800, 3.14f, 6);
            }
            if (mdl.equals("GT-S5292")) {
                return "Star Deluxe Duos" + batCap(1000, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S5300")) {
                return "Galaxy Pocket" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-S5301")) {
                return "Galaxy Pocket plus" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-S5302")) {
                return "Galaxy Pocket Duos" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-S5302B")) {
                return "Galaxy Y Duos Lite" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-S5303")) {
                return "Galaxy Y Plus" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("GT-S5310")) {
                return "Galaxy Pocket Neo" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S5312")) {
                return "Galaxy Pocket Neo Dual SIM" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S5360")) {
                return "Galaxy Y" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.0f, 6);
            }
            if (mdl.equals("GT-S5367")) {
                return "Galaxy Y TV" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.14f);
            }
            if (mdl.equals("GT-S5570")) {
                return "Galaxy Mini" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.14f);
            }
            if (mdl.equals("GT-S5570I")) {
                return "Galaxy Pop Plus" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.14f);
            }*/
            if (mdl.equals("GT-S5660")) {
                return "Galaxy Gio" + batCap(1350, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("GT-S5670")) {
                return "Galaxy Fit" + batCap(1350, 1, 1, 76800, 3.3f);
            }
            if (mdl.equals("GT-S5690")) {
                return "Galaxy Xcover" + batCap(1500, 1, 1, 153600, 3.65f);
            }
            if (mdl.equals("GT-S5830") || mdl.equals("GT-S5830I") || mdl.equals("GT-S5830M")) {
                return "Galaxy Ace" + batCap(1350, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6010")) {
                return "Galaxy Music" + batCap(1300, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S6012")) {
                return "Galaxy Music Duos" + batCap(1300, 1, 1, 76800, 3.0f);
            }
            if (mdl.equals("GT-S6102") || mdl.equals("GT-S6102B")) {
                return "Galaxy Y Duos" + batCap(1300, 1, 1, 76800, 3.14f);
            }
            if (mdl.equals("GT-S6310") || mdl.equals("GT-S6310L") || mdl.equals("GT-S6310N")) {
                return "Galaxy Young" + batCap(1300, 1, 1, 153600, 3.27f, 5);
            }
            if (mdl.equals("GT-S6312")) {
                return "Galaxy Young Duos" + batCap(1300, 1, 1, 153600, 3.27f, 5);
            }
            if (mdl.equals("GT-S6500") || mdl.equals("GT-S6500D")) {
                return "Galaxy mini 2" + batCap(1300, 1, 1, 153600, 3.27f, 5);
            }
            if (mdl.equals("GT-S6790")) {
                return "Galaxy Fame Lite" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6792L")) {
                return "Galaxy Fame Lite Duos" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6800")) {
                return "Galaxy Ace Advance" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6802")) {
                return "Galaxy Ace Duos" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6810") || mdl.equals("GT-S6810L") || mdl.equals("GT-S6810M")) {
                return "Galaxy Fame" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6810P")) {
                return "Galaxy Fame with NFC" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S6812") || mdl.equals("GT-S6812C") || mdl.equals("GT-S6812I")) {
                return "Galaxy Fame Dual SIM" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("GT-S7390")) {
                return "Galaxy Fresh" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7392")) {
                return "Galaxy Fresh Duos" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7710") || mdl.equals("GT-S7710L")) {
                return "Galaxy Xcover 2" + batCap(1700, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("GT-S7260")) {
                return "Galaxy Star Pro" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7262")) {
                return "Galaxy Star Plus" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7270")) {
                return "Galaxy Ace 3 3G" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7272")) {
                return "Galaxy Ace 3 Dual SIM" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7273T")) {
                return "Galaxy Ace 3" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7275") || mdl.equals("GT-S7275R")) {
                return "Galaxy Ace 3 LTE" + batCap(1800, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7500")) {
                return "Galaxy Ace Plus" + batCap(1300, 1, 1, 153600, 3.65f, 5);
            }
            if (mdl.equals("GT-S7560")) {
                return "Galaxy Trend" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7560M")) {
                return "Galaxy Ace II X" + batCap(1500, 1, 1, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-S7562")) {
                return "Galaxy S Duos" + batCap(1500, 1, 1, 384000, 4.0f, 5);
            }
            if (mdl.equals("GT-S7570")) {
                return "Galaxy Trend II" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7572")) {
                return "Galaxy Trend II Duos" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7580")) {
                return "Galaxy Trend Plus" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("GT-S7582") || mdl.equals("GT-S7582L")) {
                return "Galaxy S Duos 2" + batCap(1500, 1, 1, 384000, 4.0f);
            }
        }
        if (mdl.equals("NEXUS 10")) {
            return "Nexus 10" + batCap(SOC_QCOM, 4, 3, 4096000, 10.1f, 7);
        }
        if (mdl.equals("SC-01D")) {
            return "Galaxy Tab 10.1 LTE" + batCap(6800, 4, 2, 1024000, 10.1f, 6);
        }
        if (mdl.equals("SC-01H")) {
            return "Galaxy Active Neo (NTT DoCoMo)" + batCap(2200, 1, 1, 384000, 4.5f);
        }
        if (mdl.equals("SC-02B")) {
            return "Galaxy S (NTT DoCoMo)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
        }
        if (mdl.equals("SC-02C")) {
            return "Galaxy S II (NTT DoCoMo)" + batCap(1650, 1, 24, 384000, 4.3f, 6);
        }
        if (mdl.equals("SC-02E")) {
            return "Galaxy Note II LTE (NTT DoCoMo)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
        }
        if (mdl.equals("SC-04E")) {
            return "Galaxy S4 LTE (NTT DoCoMo)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
        }
        /*if (mdl.startsWith("SCH-")) {
            if (mdl.equals("SCH-I100")) {
                return "Gem" + batCap(0, 1, 1, 76800, 3.2f);
            }
            if (mdl.equals("SCH-I110")) {
                return "Illusion" + batCap(1500, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("SCH-I200")) {
                return "Galaxy Stellar 4G" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I400")) {
                return "Continuum" + batCap(0, 1, 24, 384000, 3.4f);
            }
            if (mdl.equals("SCH-I405")) {
                return "Stratosphere (Verizon)" + batCap(1800, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I405U")) {
                return "Metrix (US Cellular)" + batCap(1800, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I415")) {
                return "Galaxy Stratosphere II" + batCap(1800, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I500")) {
                return "Mesmerize" + batCap(1500, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I510")) {
                return "Droid Charge" + batCap(1600, 1, 25, 384000, 4.3f);
            }
            if (mdl.equals("SCH-I515") || mdl.equals("SCH-I516")) {
                return "Galaxy Nexus (Verizon)" + batCap(1850, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("SCH-I535") || mdl.equals("SCH-I535PP")) {
                return "Galaxy S III CDMA (Verizon)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("SCH-I545")) {
                return "Galaxy S4 CDMA (Verizon)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SCH-I559")) {
                return "Galaxy Pop" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.14f, 6);
            }
            if (mdl.equals("SCH-I589")) {
                return "Galaxy Ace Duos" + batCap(1650, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SCH-I605")) {
                return "Galaxy Note II CDMA (Verizon)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SCH-I705")) {
                return "Galaxy Tab 2 7.0" + batCap(4000, 4, 2, 614400, 7.0f, 6);
            }
            if (mdl.equals("SCH-I739")) {
                return "Galaxy Trend II" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SCH-I815")) {
                return "Galaxy Tab 7.7 LTE" + batCap(5100, 4, 25, 1024000, 7.7f);
            }
            if (mdl.equals("SCH-I889")) {
                return "Galaxy Note CDMA2000" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("SCH-I905")) {
                return "Galaxy Tab 10.1 LTE" + batCap(6800, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("SCH-I909")) {
                return "Galaxy S (China Telecom)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SCH-I915")) {
                return "Galaxy Tab 2 10.1 CDMA" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("SCH-I929")) {
                return "Galaxy S II Duos" + batCap(1800, 1, 25, 384000, 4.52f, 6);
            }
            if (mdl.equals("SCH-I959")) {
                return "Galaxy S4 3G (China Telecom)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SCH-N719")) {
                return "Galaxy Note II 3G (China Telecom)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SCH-R680")) {
                return "Repp" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SCH-R730")) {
                return "Transfix" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SCH-R760")) {
                return "Galaxy S II (US Cellular)" + batCap(1850, 1, 25, 384000, 4.52f, 6);
            }
            if (mdl.equals("SCH-R830")) {
                return "Galaxy Axiom" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SCH-R880")) {
                return "Acclaim" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SCH-R910")) {
                return "Indulge (MetroPCS)" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SCH-R915")) {
                return "Indulge (Cricket)" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SCH-R920")) {
                return "Galaxy Attain 4G" + batCap(1650, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SCH-R930")) {
                return "Galaxy S Aviator (US Cellular)" + batCap(0, 1, 25, 384000, 4.5f, 5);
            }
            if (mdl.equals("SCH-R940")) {
                return "Galaxy S Lightray 4G" + batCap(1600, 1, 25, 384000, 4.3f);
            }
            if (mdl.equals("SCH-R950")) {
                return "Galaxy Note II CDMA (US Cellular)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SCH-R970")) {
                return "Galaxy S4 CDMA (US Cellular)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SCH-S720C")) {
                return "Galaxy Proclaim (Straight Talk/NET10)" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SCH-S950C")) {
                return "Galaxy S Showcase (Straight Talk/NET10)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SCH-S968C")) {
                return "Galaxy S III" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
        }
        if (mdl.startsWith("SGH-")) {
            if (mdl.equals("SGH-I317")) {
                return "Galaxy Note II LTE (AT&T)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SGH-I317M")) {
                return "Galaxy Note II LTE" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SGH-I337") || mdl.equals("SGH-I337M")) {
                return "Galaxy S4 LTE" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SGH-I437") || mdl.equals("SGH-I437P")) {
                return "Galaxy Express" + batCap(2000, 1, 25, 384000, 4.5f, 6);
            }
            if (mdl.equals("SGH-I497")) {
                return "Galaxy Tab 2 10.1 CDMA" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("SGH-I527")) {
                return "Galaxy Mega 6.3" + batCap(3200, 3, 16, 921600, 6.3f, 6);
            }
            if (mdl.equals("SGH-I535")) {
                return "Galaxy S III CDMA" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("SGH-I537")) {
                return "Galaxy S4 Active" + batCap(2600, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SGH-I545")) {
                return "Galaxy S4 CDMA" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SGH-I547")) {
                return "Galaxy Rugby Pro" + batCap(1850, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("SGH-I577")) {
                return "Exhilarate" + batCap(1750, 1, 24, 384000, 4.0f, 6);
            }
            if (mdl.equals("SGH-I717")) {
                return "Galaxy Note LTE" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("SGH-I727")) {
                return "Galaxy S II Skyrocket (AT&T)" + batCap(1850, 1, 25, 384000, 4.5f, 6);
            }
            if (mdl.equals("SGH-I727R")) {
                return "Galaxy S II LTE (Rogers)" + batCap(1850, 1, 25, 384000, 4.52f, 6);
            }
            if (mdl.equals("SGH-I747") || mdl.equals("SGH-I747M")) {
                return "Galaxy S III" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("SGH-I757")) {
                return "Galaxy S II Skyrocket HD" + batCap(0, 1, 24, 921600, 4.65f);
            }
            if (mdl.equals("SGH-I757M")) {
                return "Galaxy S II HD LTE (Bell)" + batCap(0, 1, 24, 921600, 4.65f);
            }
            if (mdl.equals("SGH-I777")) {
                return "Galaxy S II NFC (AT&T)" + batCap(1650, 1, 25, 384000, 4.3f, 6);
            }
            if (mdl.equals("SGH-I827")) {
                return "Galaxy Appeal" + batCap(1300, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SGH-I847")) {
                return "Rugby Smart" + batCap(1650, 1, 24, 384000, 3.7f);
            }
            if (mdl.equals("SGH-I857")) {
                return "DoubleTime" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SGH-I896") || mdl.equals("SGH-I897")) {
                return "Captivate" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SGH-I927")) {
                return "Captivate Glide" + batCap(1650, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SGH-I957")) {
                return "Galaxy Tab 8.9 LTE" + batCap(6100, 4, 2, 1024000, 8.9f);
            }
            if (mdl.equals("SGH-I997")) {
                return "Infuse 4G" + batCap(1750, 1, 25, 384000, 4.5f, 5);
            }
            if (mdl.equals("SGH-M919")) {
                return "Galaxy S4 LTE" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SGH-N025")) {
                return "Galaxy Note II LTE (NTT DoCoMo)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SGH-N045")) {
                return "Galaxy S4 LTE (NTT DoCoMo)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SGH-N075T")) {
                return "Galaxy J (NTT DoCoMo)" + batCap(2600, 1, 24, 2073600, 5.0f);
            }
            if (mdl.equals("SGH-N516")) {
                return "Galaxy S6 edge" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SGH-N520")) {
                return "Galaxy S6" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SGH-S730G")) {
                return "Galaxy Discover TracFone" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SGH-S730M")) {
                return "Galaxy Discover" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SGH-T379")) {
                return "Gravity TXT" + batCap(1000, 1, 1, 76800, 2.44f);
            }
            if (mdl.equals("SGH-T399") || mdl.equals("SGH-T399N")) {
                return "Galaxy Light" + batCap(1800, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SGH-T499")) {
                return "Dart" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.14f);
            }
            if (mdl.equals("SGH-T589")) {
                return "Gravity Smart" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SGH-T589R")) {
                return "Galaxy Q" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("SGH-T599")) {
                return "Galaxy Exhibit" + batCap(1500, 1, 1, 384000, 3.8f);
            }
            if (mdl.equals("SGH-T679")) {
                return "Exhibit II 4G" + batCap(1500, 1, 1, 384000, 3.7f);
            }
            if (mdl.equals("SGH-T699")) {
                return "Galaxy S Relay 4G" + batCap(1800, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SGH-T759")) {
                return "Exhibit 4G" + batCap(1500, 1, 23, 384000, 3.5f);
            }
            if (mdl.equals("SGH-T769")) {
                return "Galaxy S Blaze 4G" + batCap(1750, 1, 24, 384000, 3.97f, 6);
            }
            if (mdl.equals("SGH-T779")) {
                return "Galaxy Tab 2 10.1 CDMA" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
            if (mdl.equals("SGH-T849")) {
                return "Galaxy Tab" + batCap(4000, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("SGH-T879")) {
                return "Galaxy Note" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("SGH-T889")) {
                return "Galaxy Note II LTE (T-Mobile)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SGH-T889V")) {
                return "Galaxy Note II LTE" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SGH-T959")) {
                return "Vibrant (T-Mobile)" + batCap(1650, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SGH-T959V") || mdl.equals("SGH-T959W")) {
                return "Galaxy Vibrant 4G (North America)" + batCap(1650, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SGH-T989")) {
                return "Galaxy S II (T-Mobile)" + batCap(1850, 1, 25, 384000, 4.52f, 6);
            }
            if (mdl.equals("SGH-T989D")) {
                return "Galaxy S II X (Telus)" + batCap(1850, 1, 25, 384000, 4.52f, 6);
            }
            if (mdl.equals("SGH-T999")) {
                return "Galaxy S III" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("SGH-V504")) {
                return "Galaxy S6 edge" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
        }
        if (mdl.startsWith("SHV-")) {
            if (mdl.equals("SHV-E120S")) {
                return "Galaxy S II HD LTE" + batCap(1850, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("SHV-E160K") || mdl.equals("SHV-E160L") || mdl.equals("SHV-E160S")) {
                return "Galaxy Note LTE" + batCap(2500, 3, 24, 1024000, 5.3f, 6);
            }
            if (mdl.equals("SHV-E220")) {
                return "Galaxy Pop" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("SHV-E250K") || mdl.equals("SHV-E250L") || mdl.equals("SHV-E250S")) {
                return "Galaxy Note II LTE" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SHV-E300K") || mdl.equals("SHV-E300L") || mdl.equals("SHV-E300S")) {
                return "Galaxy S4 LTE" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SHV-E330K") || mdl.equals("SHV-E330L") || mdl.equals("SHV-E330S")) {
                return "Galaxy S4 LTE-A" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SHV-E470K") || mdl.equals("SHV-E470L") || mdl.equals("SHV-E470S")) {
                return "Galaxy S4 Active LTE-A" + batCap(2600, 1, 1, 2073600, 5.0f, 7);
            }
        }
        if (mdl.startsWith("SHW-")) {
            if (mdl.equals("SHW-M100S")) {
                return "Galaxy A" + batCap(1500, 1, 24, 384000, 3.7f);
            }
            if (mdl.equals("SHW-M110S")) {
                return "Galaxy S (SK Telecom)" + batCap(1500, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SHW-M120K")) {
                return "Galaxy K" + batCap(1500, 1, 24, 384000, 3.7f);
            }
            if (mdl.equals("SHW-M130K")) {
                return "Galaxy K (KT)" + batCap(0, 1, 24, 384000, 3.5f);
            }
            if (mdl.equals("SHW-M130L")) {
                return "Galaxy L (LG U+)" + batCap(0, 1, 24, 384000, 3.5f);
            }
            if (mdl.equals("SHW-M190S")) {
                return "Galaxy S Hoppin" + batCap(1500, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SHW-M200")) {
                return "Nexus S (South Korea)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SHW-M220L")) {
                return "Galaxy Neo" + batCap(1500, 1, 1, 384000, 3.5f);
            }
            if (mdl.equals("SHW-M250K")) {
                return "Galaxy S II (KT)" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("SHW-M250L")) {
                return "Galaxy S II (LG U+)" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("SHW-M250S")) {
                return "Galaxy S II (SK Telecom)" + batCap(1650, 1, 24, 384000, 4.3f, 6);
            }
            if (mdl.equals("SHW-M340S")) {
                return "Galaxy M Style" + batCap(1650, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SHW-M420K") || mdl.equals("SHW-M420S")) {
                return "Galaxy Nexus (Korea)" + batCap(1850, 1, 24, 921600, 4.65f, 6);
            }
        }
        if (mdl.startsWith("SM-")) {
            if (mdl.equals("SM-A3000") || mdl.equals("SM-A3009") || mdl.equals("SM-A300F") || mdl.equals("SM-A300FU") || mdl.equals("SM-A300G") || mdl.equals("SM-A300H") || mdl.equals("SM-A300M") || mdl.equals("SM-A300Y") || mdl.equals("SM-A300YZ")) {
                return "Galaxy A3" + batCap(1900, 1, 24, 518400, 4.5f, 7);
            }
            if (mdl.equals("SM-A300F/DS") || mdl.equals("SM-A300G/DS") || mdl.equals("SM-A300H/DS") || mdl.equals("SM-A300M/DS")) {
                return "Galaxy A3 Duos" + batCap(1900, 1, 24, 518400, 4.5f, 7);
            }
            if (mdl.equals("SM-A5000") || mdl.equals("SM-A500F/DS") || mdl.equals("SM-A500G/DS") || mdl.equals("SM-A500H/DS") || mdl.equals("SM-A500M/DS")) {
                return "Galaxy A5 Duos" + batCap(2300, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-A5009") || mdl.equals("SM-A500F") || mdl.equals("SM-A500F1") || mdl.equals("SM-A500FQ") || mdl.equals("SM-A500FU") || mdl.equals("SM-A500G") || mdl.equals("SM-A500H") || mdl.equals("SM-A500HQ") || mdl.equals("SM-A500M") || mdl.equals("SM-A500X") || mdl.equals("SM-A500XZ") || mdl.equals("SM-A500Y") || mdl.equals("SM-A500YZ")) {
                return "Galaxy A5" + batCap(2300, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-A500K") || mdl.equals("SM-A500L") || mdl.equals("SM-A500S")) {
                return "Galaxy A5 (Korea)" + batCap(2300, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-A7000") || mdl.equals("SM-A7009") || mdl.equals("SM-A700F") || mdl.equals("SM-A700FD") || mdl.equals("SM-A700FQ") || mdl.equals("SM-A700H") || mdl.equals("SM-A700X") || mdl.equals("SM-A700YD")) {
                return "Galaxy A7" + batCap(2600, 3, 24, 2073600, 5.5f, 7);
            }
            if (mdl.equals("SM-A700F/DS")) {
                return "Galaxy A7 Duos" + batCap(2600, 3, 24, 2073600, 5.5f, 7);
            }
            if (mdl.equals("SM-A700K") || mdl.equals("SM-A700L") || mdl.equals("SM-A700S")) {
                return "Galaxy A7 (Korea)" + batCap(2600, 3, 24, 2073600, 5.5f, 7);
            }
            if (mdl.equals("SM-A8000") || mdl.equals("SM-A8009") || mdl.equals("SM-A800F") || mdl.equals("SM-A800F1") || mdl.equals("SM-A800FQ") || mdl.equals("SM-A800FU") || mdl.equals("SM-A800G") || mdl.equals("SM-A800H") || mdl.equals("SM-A800M") || mdl.equals("SM-A800X") || mdl.equals("SM-A800Y") || mdl.equals("SM-A800YZ")) {
                return "Galaxy A8" + batCap(3050, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-A800F/DS")) {
                return "Galaxy A8 Duos" + batCap(3050, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-A800K") || mdl.equals("SM-A800L") || mdl.equals("SM-A800S")) {
                return "Galaxy A8 (Korea)" + batCap(3050, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-C101") || mdl.equals("SM-C1010")) {
                return "Galaxy S4 zoom" + batCap(2330, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("SM-C105A")) {
                return "Galaxy S4 zoom LTE" + batCap(2330, 1, 24, 518400, 4.3f, 6);
            }
            if (mdl.equals("SM-C111")) {
                return "Galaxy K zoom 3G" + batCap(2430, 1, 24, 921600, 4.8f);
            }
            if (mdl.equals("SM-C115")) {
                return "Galaxy K zoom LTE" + batCap(2430, 1, 24, 921600, 4.8f);
            }
            if (mdl.equals("SM-E500") || mdl.equals("SM-E500F") || mdl.equals("SM-E500H") || mdl.equals("SM-E500HQ") || mdl.equals("SM-E500M")) {
                return "Galaxy E5" + batCap(2400, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-E500F/DS") || mdl.equals("SM-E500H/DS") || mdl.equals("SM-E500M/DS")) {
                return "Galaxy E5 Dual SIM" + batCap(2400, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-E700") || mdl.equals("SM-E700F") || mdl.equals("SM-E700H") || mdl.equals("SM-E700M")) {
                return "Galaxy E7" + batCap(2950, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-E700F/DS") || mdl.equals("SM-E700H/DS") || mdl.equals("SM-E700M/DS")) {
                return "Galaxy E7 Dual SIM" + batCap(2950, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-G110B") || mdl.equals("SM-G110H") || mdl.equals("SM-G110M")) {
                return "Galaxy Pocket 2" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.3f, 6);
            }
            if (mdl.equals("SM-G110B/DS")) {
                return "Galaxy Pocket 2 Dual SIM" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 76800, 3.3f, 6);
            }
            if (mdl.equals("SM-G130H")) {
                return "Galaxy Young 2" + batCap(1300, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("SM-G310HN")) {
                return "Galaxy Ace Style" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SM-G313F")) {
                return "Galaxy Ace 4 LTE" + batCap(1800, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SM-G313H")) {
                return "Galaxy Ace NXT" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SM-G313HU")) {
                return "Galaxy S Duos 3" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SM-G313HZ")) {
                return "Galaxy Ace NXT / Galaxy V" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SM-G313M")) {
                return "Galaxy Ace 4" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SM-G316ML")) {
                return "Galaxy Ace 4 Neo Duos" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SM-G318")) {
                return "Galaxy V Plus" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("SM-G350") || mdl.equals("SM-G3500")) {
                return "Galaxy Core Plus" + batCap(1800, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SM-G3502")) {
                return "Galaxy Trend 3" + batCap(1800, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SM-G350E")) {
                return "Galaxy Star 2 Plus" + batCap(1800, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SM-G355H") || mdl.equals("SM-G355M")) {
                return "Galaxy Core II" + batCap(2000, 1, 1, 384000, 4.5f);
            }
            if (mdl.equals("SM-G357FZ")) {
                return "Galaxy Ace Style LTE" + batCap(1900, 1, 24, 384000, 4.3f, 7);
            }
            if (mdl.equals("SM-G3606") || mdl.equals("SM-G3608") || mdl.equals("SM-G3609") || mdl.equals("SM-G360BT/DS") || mdl.equals("SM-G360FY/DS") || mdl.equals("SM-G360H/DS") || mdl.equals("SM-G360HU/DS") || mdl.equals("SM-G360M/DS")) {
                return "Galaxy Core Prime Dual SIM" + batCap(2000, 1, 1, 384000, 4.5f, 7);
            }
            if (mdl.equals("SM-G360BT") || mdl.equals("SM-G360F") || mdl.equals("SM-G360FY") || mdl.equals("SM-G360G") || mdl.equals("SM-G360GY") || mdl.equals("SM-G360H") || mdl.equals("SM-G360HU") || mdl.equals("SM-G360M") || mdl.equals("SM-G360P")) {
                return "Galaxy Core Prime" + batCap(2000, 1, 1, 384000, 4.5f, 7);
            }
            if (mdl.equals("SM-G361F") || mdl.equals("SM-G361H")) {
                return "Galaxy Core Prime VE" + batCap(2000, 1, 2, 384000, 4.5f);
            }
            if (mdl.equals("SM-G3812")) {
                return "Galaxy Win Pro" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f, 6);
            }
            if (mdl.equals("SM-G3812B")) {
                return "Galaxy S3 Slim" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.52f, 6);
            }
            if (mdl.equals("SM-G3815")) {
                return "Galaxy Express 2" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f, 6);
            }
            if (mdl.equals("SM-G3858")) {
                return "Galaxy Beam2" + batCap(2600, 1, 1, 384000, 4.66f, 6);
            }
            if (mdl.equals("SM-G386F")) {
                return "Galaxy Core LTE" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 2, 518400, 4.5f);
            }
            if (mdl.equals("SM-G386W")) {
                return "Galaxy Core LTE" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f);
            }
            if (mdl.equals("SM-G386T") || mdl.equals("SM-G386T1")) {
                return "Galaxy Avant" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 518400, 4.5f);
            }
            if (mdl.equals("SM-G388F")) {
                return "Galaxy Xcover 3" + batCap(2200, 1, 2, 384000, 4.5f);
            }
            if (mdl.equals("SM-G530AZ")) {
                return "Galaxy Grand Prime (Cricket)" + batCap(2600, 1, 1, 518400, 5.0f, 7);
            }
            if (mdl.equals("SM-G530BT")) {
                return "Galaxy Grand Prime Duos TV" + batCap(2600, 1, 1, 518400, 5.0f, 7);
            }
            if (mdl.equals("SM-G530F") || mdl.equals("SM-G530FZ") || mdl.equals("SM-G530Y")) {
                return "Galaxy Grand Prime" + batCap(2600, 1, 1, 518400, 5.0f, 7);
            }
            if (mdl.equals("SM-G530FZ/DS") || mdl.equals("SM-G530H")) {
                return "Galaxy Grand Prime Dual SIM" + batCap(2600, 1, 1, 518400, 5.0f, 7);
            }
            if (mdl.equals("SM-G531F") || mdl.equals("SM-G531Y")) {
                return "Galaxy Grand Prime VE" + batCap(2600, 1, 1, 518400, 5.0f);
            }
            if (mdl.equals("SM-G531H")) {
                return "Galaxy Grand Prime" + batCap(2600, 1, 1, 518400, 5.0f);
            }
            if (mdl.equals("SM-G5500") || mdl.equals("SM-G550F") || mdl.equals("SM-G550FY")) {
                return "Galaxy On5" + batCap(2600, 1, 1, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-G6000") || mdl.equals("SM-G600F") || mdl.equals("SM-G600FY")) {
                return "Galaxy On7" + batCap(3000, 3, 1, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-G710") || mdl.equals("SM-G7100") || mdl.equals("SM-G7106") || mdl.equals("SM-G7108") || mdl.equals("SM-G7108V") || mdl.equals("SM-G7109")) {
                return "Galaxy Grand 2" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G7102")) {
                return "Galaxy Grand 2 Dual SIM" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G7102T")) {
                return "Galaxy Grand 2 TV" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G7105") || mdl.equals("SM-G7105L")) {
                return "Galaxy Grand 2 LTE" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G7106")) {
                return "Galaxy Grand 2 Duos" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G710L")) {
                return "Galaxy Grand 2 LTE-A" + batCap(2600, 1, 1, 921600, 5.25f, 6);
            }
            if (mdl.equals("SM-G720N0")) {
                return "Galaxy Grand Max" + batCap(2500, 1, 6, 921600, 5.25f, 7);
            }
            if (mdl.equals("SM-G7508") || mdl.equals("SM-G750F")) {
                return "Galaxy Mega 2" + batCap(2800, 3, 1, 921600, 6.0f, 7);
            }
            if (mdl.equals("SM-G7508Q")) {
                return "Galaxy Mega 2 Dual SIM" + batCap(2800, 3, 1, 921600, 6.0f, 7);
            }
            if (mdl.equals("SM-G800A") || mdl.equals("SM-G800F") || mdl.equals("SM-G800H") || mdl.equals("SM-G800HQ") || mdl.equals("SM-G800M") || mdl.equals("SM-G800R4") || mdl.equals("SM-G800Y")) {
                return "Galaxy S5 mini" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.5f, 7);
            }
            if (mdl.equals("SM-G800H/DS")) {
                return "Galaxy S5 mini Duos" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.5f, 7);
            }
            if (mdl.equals("SM-G8508") || mdl.equals("SM-G8508S") || mdl.equals("SM-G850FQ") || mdl.equals("SM-G850Y")) {
                return "Galaxy Alpha" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850A")) {
                return "Galaxy Alpha (AT&T)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850F")) {
                return "Galaxy Alpha (Europe)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850M")) {
                return "Galaxy Alpha (Vodafone)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850T")) {
                return "Galaxy Alpha (T-Mobile)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850W")) {
                return "Galaxy Alpha (Canada)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G850V")) {
                return "Galaxy Alpha (Verizon)" + batCap(1860, 1, 24, 921600, 4.7f, 7);
            }
            if (mdl.equals("SM-G860P")) {
                return "Galaxy S5 Sport" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G870A") || mdl.equals("SM-G870D") || mdl.equals("SM-G870F") || mdl.equals("SM-G870W")) {
                return "Galaxy S5 Active LTE-A" + batCap(2800, 1, 25, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G890A") || mdl.equals("SM-G890F")) {
                return "Galaxy S6 active" + batCap(3500, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G900") || mdl.equals("SM-G900H")) {
                return "Galaxy S5" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900A")) {
                return "Galaxy S5 (AT&T)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900F")) {
                return "Galaxy S5 (Europe)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900FD")) {
                return "Galaxy S5 Duos" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900I")) {
                return "Galaxy S5 (Asia)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900K") || mdl.equals("SM-G900L") || mdl.equals("SM-G900S")) {
                return "Galaxy S5 (Korea)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900M")) {
                return "Galaxy S5 (Vodafone)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900P")) {
                return "Galaxy S5 CDMA (Sprint)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900R4")) {
                return "Galaxy S5 CDMA (US Cellular)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900T")) {
                return "Galaxy S5 (T-Mobile)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900V")) {
                return "Galaxy S5 CDMA (Verizon)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G900W8")) {
                return "Galaxy S5 (Canada)" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G901F")) {
                return "Galaxy S5 Plus" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G903F")) {
                return "Galaxy S5 Neo" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G903FD") || mdl.equals("SM-G903M/DS")) {
                return "Galaxy S5 Neo Duos" + batCap(2800, 1, 24, 2073600, 5.1f, 7);
            }
            if (mdl.equals("SM-G906F") || mdl.equals("SM-G906S")) {
                return "Galaxy S5 LTE-A" + batCap(2800, 1, 24, 3686400, 5.1f, 7);
            }
            if (mdl.equals("SM-G910S")) {
                return "Galaxy Round" + batCap(2800, 3, 29, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-G9198")) {
                return "SM-G9198" + batCap(InfoPage.IID_DIV_DEVICE_1ST, 1, 24, 983040, 3.9f, 7);
            }
            if (mdl.equals("SM-G9200")) {
                return "Galaxy S6 (Hong Kong)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G9208") || mdl.equals("SM-G9208/SS") || mdl.equals("SM-G9209")) {
                return "Galaxy S6 (China)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920A")) {
                return "Galaxy S6 (AT&T)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920AZ") || mdl.equals("SM-G920D") || mdl.equals("SM-G920FD") || mdl.equals("SM-G920FQ") || mdl.equals("SM-G920I") || mdl.equals("SM-G920M") || mdl.equals("SM-G920R6") || mdl.equals("SM-G920R7") || mdl.equals("SM-G920T1") || mdl.equals("SM-G920W") || mdl.equals("SM-G920X")) {
                return "Galaxy S6" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920F")) {
                return "Galaxy S6 (Europe)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920K") || mdl.equals("SM-G920L") || mdl.equals("SM-G920S")) {
                return "Galaxy S6 (Korea)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920P")) {
                return "Galaxy S6 CDMA (Sprint)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920R") || mdl.equals("SM-G920R4")) {
                return "Galaxy S6 CDMA (US Cellular)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920T")) {
                return "Galaxy S6 (T-Mobile)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920V")) {
                return "Galaxy S6 CDMA (Verizon)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G920W8")) {
                return "Galaxy S6 CDMA (Canada)" + batCap(2550, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G9250")) {
                return "Galaxy S6 edge (China)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925A")) {
                return "Galaxy S6 edge (AT&T)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925D") || mdl.equals("SM-G925I") || mdl.equals("SM-G925J") || mdl.equals("SM-G925R6") || mdl.equals("SM-G925R7") || mdl.equals("SM-G925W") || mdl.equals("SM-G925X") || mdl.equals("SM-G925Z")) {
                return "Galaxy S6 edge" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925F")) {
                return "Galaxy S6 edge (Europe)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925FQ")) {
                return "Galaxy S6 edge (Turkey)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925K") || mdl.equals("SM-G925L") || mdl.equals("SM-G925S")) {
                return "Galaxy S6 edge (Korea)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925P")) {
                return "Galaxy S6 edge CDMA (Sprint)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925R") || mdl.equals("SM-G925R4")) {
                return "Galaxy S6 edge CDMA (US Cellular)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925T")) {
                return "Galaxy S6 edge (T-Mobile)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925V")) {
                return "Galaxy S6 edge CDMA (Verizon)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G925W8")) {
                return "Galaxy S6 edge CDMA (Canada)" + batCap(2600, 1, 24, 3686400, 5.1f, 10);
            }
            if (mdl.equals("SM-G9280") || mdl.equals("SM-G9287") || mdl.equals("SM-G9287C") || mdl.equals("SM-G928C") || mdl.equals("SM-G928G") || mdl.equals("SM-G928I") || mdl.equals("SM-G928W8") || mdl.equals("SM-G928X")) {
                return "Galaxy S6 edge+" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928A")) {
                return "Galaxy S6 edge+ (AT&T)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928F")) {
                return "Galaxy S6 edge+ (Europe)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928K") || mdl.equals("SM-G928L") || mdl.equals("SM-G928S")) {
                return "Galaxy S6 edge+ (Korea)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928P")) {
                return "Galaxy S6 edge+ CDMA (Sprint)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928R") || mdl.equals("SM-G928R4")) {
                return "Galaxy S6 edge+ CDMA (US Cellular)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928T")) {
                return "Galaxy S6 edge+ (T-Mobile)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-G928V")) {
                return "Galaxy S6 edge+ CDMA (Verizon)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-GC200")) {
                return "Galaxy Camera 2" + batCap(2000, 11, 16, 921600, 4.8f, 7);
            }
            if (mdl.equals("SM-J100F") || mdl.equals("SM-J100FN")) {
                return "Galaxy J1 4G" + batCap(1850, 1, 1, 384000, 4.3f, 7);
            }
            if (mdl.equals("SM-J100H") || mdl.equals("SM-J100H/DD") || mdl.equals("SM-J100H/DS") || mdl.equals("SM-J100M") || mdl.equals("SM-J100ML") || mdl.equals("SM-J100MU") || mdl.equals("SM-J100VPP") || mdl.equals("SM-J100Y")) {
                return "Galaxy J1" + batCap(1850, 1, 1, 384000, 4.3f, 7);
            }
            if (mdl.equals("SM-J110F") || mdl.equals("SM-J110FN") || mdl.equals("SM-J110H") || mdl.equals("SM-J110G") || mdl.equals("SM-J110M")) {
                return "Galaxy J1 Ace" + batCap(1900, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SM-J110F/DS") || mdl.equals("SM-J110G/DS")) {
                return "Galaxy J1 Ace Duos" + batCap(1900, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("SM-J200F") || mdl.equals("SM-J200G") || mdl.equals("SM-J200GU") || mdl.equals("SM-J200H") || mdl.equals("SM-J200M") || mdl.equals("SM-J200Y")) {
                return "Galaxy J2" + batCap(2000, 1, 24, 518400, 4.7f, 7);
            }
            if (mdl.equals("SM-J5008")) {
                return "Galaxy J5 Duos" + batCap(2600, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-J500F") || mdl.equals("SM-J500G") || mdl.equals("SM-J500H") || mdl.equals("SM-J500M")) {
                return "Galaxy J5" + batCap(2600, 1, 24, 921600, 5.0f, 7);
            }
            if (mdl.equals("SM-J7008")) {
                return "Galaxy J7 Duos" + batCap(3000, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-J700F") || mdl.equals("SM-J700M")) {
                return "Galaxy J7 LTE" + batCap(3000, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-J700H")) {
                return "Galaxy J7 3G" + batCap(3000, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-N750")) {
                return "Galaxy Note 3 Neo 3G" + batCap(3100, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-N7502")) {
                return "Galaxy Note 3 Neo Duos" + batCap(3100, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-N7505")) {
                return "Galaxy Note 3 Neo LTE+" + batCap(3100, 3, 24, 921600, 5.5f, 7);
            }
            if (mdl.equals("SM-N900") || mdl.equals("SM-N900W8")) {
                return "Galaxy Note 3" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N9000")) {
                return "Galaxy Note 3 3G" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N9002")) {
                return "Galaxy Note 3 Duos" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N9005") || mdl.equals("SM-N900S")) {
                return "Galaxy Note 3 LTE" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N9009")) {
                return "Galaxy Note 3 CDMA" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N900A")) {
                return "Galaxy Note 3 (AT&T)" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N900P")) {
                return "Galaxy Note 3 (Sprint)" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N900R")) {
                return "Galaxy Note 3 (US Cellular)" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N900T")) {
                return "Galaxy Note 3 (T-Mobile)" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N900V")) {
                return "Galaxy Note 3 (Verizon)" + batCap(3200, 3, 24, 2073600, 5.7f, 7);
            }
            if (mdl.equals("SM-N9100")) {
                return "Galaxy Note 4 Duos" + batCap(3000, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N9106W") || mdl.equals("SM-N9108V") || mdl.equals("SM-N9109W") || mdl.equals("SM-N910CQ")) {
                return "Galaxy Note 4" + batCap(3000, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910A")) {
                return "Galaxy Note 4 CDMA (AT&T)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910C") || mdl.equals("SM-N910G") || mdl.equals("SM-N910U")) {
                return "Galaxy Note 4 LTE" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910F")) {
                return "Galaxy Note 4 LTE (Europe)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910FD")) {
                return "Galaxy Note 4 LTE (UAE)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910FQ")) {
                return "Galaxy Note 4 LTE (Turkey)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910H")) {
                return "Galaxy Note 4 3G (Asia-Pacific)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910K") || mdl.equals("SM-N910L") || mdl.equals("SM-N910S")) {
                return "Galaxy Note 4 LTE (Korea)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910M")) {
                return "Galaxy Note 4 CDMA (Vodafone)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910P")) {
                return "Galaxy Note 4 CDMA (Sprint)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910R4")) {
                return "Galaxy Note 4 CDMA (US Cellular)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910T")) {
                return "Galaxy Note 4 CDMA (T-Mobile)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910V")) {
                return "Galaxy Note 4 CDMA (Verizon)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N910W8")) {
                return "Galaxy Note 4 LTE (North America)" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N915A")) {
                return "Galaxy Note Edge (AT&T)" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N915D")) {
                return "Galaxy Note Edge (Japan)" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N915FY")) {
                return "Galaxy Note Edge (Europe)" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N915G")) {
                return "Galaxy Note Edge" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N915K") || mdl.equals("SM-N915L") || mdl.equals("SM-N915S")) {
                return "Galaxy Note Edge (Korea)" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N915T")) {
                return "Galaxy Note Edge (T-Mobile)" + batCap(3000, 3, 24, 4096000, 5.6f, 7);
            }
            if (mdl.equals("SM-N916K") || mdl.equals("SM-N916L") || mdl.equals("SM-N916S")) {
                return "Galaxy Note 4 S-LTE" + batCap(3220, 3, 24, 3686400, 5.7f, 7);
            }
            if (mdl.equals("SM-N9200")) {
                return "Galaxy Note5 (China)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N9208")) {
                return "Galaxy Note5 Duos" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920A")) {
                return "Galaxy Note5 (AT&T)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920C") || mdl.equals("SM-N920CD") || mdl.equals("SM-N920G") || mdl.equals("SM-N920W8")) {
                return "Galaxy Note5" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920F")) {
                return "Galaxy Note5 (Europe)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920I")) {
                return "Galaxy Note5 (Asia-Pacific)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920K") || mdl.equals("SM-N920L") || mdl.equals("SM-N920S")) {
                return "Galaxy Note5 (Korea)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920P")) {
                return "Galaxy Note5 CDMA (Sprint)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920R") || mdl.equals("SM-N920R4")) {
                return "Galaxy Note5 CDMA (US Cellular)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920T")) {
                return "Galaxy Note5 (T-Mobile)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-N920V")) {
                return "Galaxy Note5 CDMA (Verizon)" + batCap(3000, 3, 24, 3686400, 5.7f, 10);
            }
            if (mdl.equals("SM-P600")) {
                return "Galaxy Note 10.1 (2014 Edition) WiFi" + batCap(8220, 4, 16, 4096000, 10.1f, 7);
            }
            if (mdl.equals("SM-P601")) {
                return "Galaxy Note 10.1 (2014 Edition) 3G" + batCap(8220, 4, 16, 4096000, 10.1f, 7);
            }
            if (mdl.equals("SM-P605") || mdl.equals("SM-P607")) {
                return "Galaxy Note 10.1 (2014 Edition) LTE" + batCap(8220, 4, 16, 4096000, 10.1f, 7);
            }
            if (mdl.equals("SM-P900")) {
                return "Galaxy Note Pro 12.2 WiFi" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-P901")) {
                return "Galaxy Note Pro 12.2 3G" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-P905")) {
                return "Galaxy Note Pro 12.2 LTE" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-P550")) {
                return "Galaxy Tab A 9.7 WiFi" + batCap(6000, 4, 2, 786432, 9.7f, 7);
            }
            if (mdl.equals("SM-R350")) {
                return "Gear Fit" + batCap(210, 6, 24, 55296, 1.84f);
            }
            if (mdl.equals("SM-R380")) {
                return "Gear 2" + batCap(300, 6, 24, 102400, 1.63f);
            }
            if (mdl.equals("SM-R381")) {
                return "Gear 2 Neo" + batCap(300, 6, 24, 102400, 1.63f);
            }
            if (mdl.equals("SM-R382")) {
                return "Gear Live" + batCap(300, 6, 24, 102400, 1.63f);
            }
            if (mdl.equals("SM-R720")) {
                return "Gear S2" + batCap(300, 7, 24, 129600, 1.2f);
            }
            if (mdl.equals("SM-R750") || mdl.equals("SM-R750P")) {
                return "Gear S" + batCap(300, 6, 28, 172800, 2.0f);
            }
            if (mdl.equals("SM-S975L")) {
                return "Galaxy S4 LTE" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SM-T110") || mdl.equals("SM-T113")) {
                return "Galaxy Tab 3 Lite 7.0 WiFi" + batCap(3600, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("SM-T111") || mdl.equals("SM-T116")) {
                return "Galaxy Tab 3 Lite 7.0 3G" + batCap(3600, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("SM-T116NU")) {
                return "Galaxy Tab 3 V" + batCap(3600, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("SM-T210")) {
                return "Galaxy Tab 3 7.0 WiFi" + batCap(4000, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("SM-T211")) {
                return "Galaxy Tab 3 7.0 3G" + batCap(4000, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("SM-T215")) {
                return "Galaxy Tab 3 7.0 LTE" + batCap(4000, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("SM-T230") || mdl.equals("SM-T230NU")) {
                return "Galaxy Tab 4 7.0 Wi-Fi" + batCap(4000, 4, 1, 1024000, 7.0f, 6);
            }
            if (mdl.equals("SM-T231")) {
                return "Galaxy Tab 4 7.0 3G" + batCap(4000, 4, 1, 1024000, 7.0f, 6);
            }
            if (mdl.equals("SM-T235")) {
                return "Galaxy Tab 4 7.0 LTE" + batCap(4000, 4, 1, 1024000, 7.0f, 6);
            }
            if (mdl.equals("SM-T237P")) {
                return "Galaxy Tab 4 7.0 (Sprint)" + batCap(4000, 4, 1, 1024000, 7.0f, 6);
            }
            if (mdl.equals("SM-T255")) {
                return "Galaxy W" + batCap(3200, 4, 1, 921600, 7.0f);
            }
            if (mdl.equals("SM-T310")) {
                return "Galaxy Tab 3 8.0 WiFi" + batCap(4450, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("SM-T311")) {
                return "Galaxy Tab 3 8.0 3G" + batCap(4450, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("SM-T315")) {
                return "Galaxy Tab 3 8.0 LTE" + batCap(4450, 4, 1, 1024000, 8.0f, 6);
            }
            if (mdl.equals("SM-T320")) {
                return "Galaxy Tab Pro 8.4 WiFi" + batCap(4800, 4, 16, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T321")) {
                return "Galaxy Tab Pro 8.4 3G" + batCap(4800, 4, 16, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T325")) {
                return "Galaxy Tab Pro 8.4 LTE" + batCap(4800, 4, 16, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T330")) {
                return "Galaxy Tab 4 8.0 Wi-Fi" + batCap(4450, 4, 1, 1024000, 8.0f);
            }
            if (mdl.equals("SM-T331")) {
                return "Galaxy Tab 4 8.0 3G" + batCap(4450, 4, 1, 1024000, 8.0f);
            }
            if (mdl.equals("SM-T335")) {
                return "Galaxy Tab 4 8.0 LTE" + batCap(4450, 4, 1, 1024000, 8.0f);
            }
            if (mdl.equals("SM-T350")) {
                return "Galaxy Tab A 8.0 WiFi" + batCap(4200, 4, 1, 786432, 8.0f, 7);
            }
            if (mdl.equals("SM-T351")) {
                return "Galaxy Tab A 8.0 3G" + batCap(4200, 4, 1, 786432, 8.0f, 7);
            }
            if (mdl.equals("SM-T355")) {
                return "Galaxy Tab A 8.0 LTE" + batCap(4200, 4, 1, 786432, 8.0f, 7);
            }
            if (mdl.equals("SM-T520")) {
                return "Galaxy Tab Pro 10.1 WiFi" + batCap(8220, 4, 16, 4096000, 10.1f, 7);
            }
            if (mdl.equals("SM-T525")) {
                return "Galaxy Tab Pro 10.1 LTE" + batCap(8220, 4, 16, 4096000, 10.1f, 7);
            }
            if (mdl.equals("SM-T530")) {
                return "Galaxy Tab 4 10.1 Wi-Fi" + batCap(6800, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("SM-T531")) {
                return "Galaxy Tab 4 10.1 3G" + batCap(6800, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("SM-T533")) {
                return "Galaxy Tab 4 10.1 WiFi (2015)" + batCap(6800, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("SM-T535")) {
                return "Galaxy Tab 4 10.1 LTE" + batCap(6800, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("SM-T550")) {
                return "Galaxy Tab A 9.7 WiFi" + batCap(6000, 4, 2, 786432, 9.7f, 7);
            }
            if (mdl.equals("SM-T555")) {
                return "Galaxy Tab A 9.7 LTE" + batCap(6000, 4, 2, 786432, 9.7f, 7);
            }
            if (mdl.equals("SM-T560")) {
                return "Galaxy Tab E 9.6 WiFi" + batCap(5000, 4, 1, 1024000, 9.6f);
            }
            if (mdl.equals("SM-T561")) {
                return "Galaxy Tab E 9.6 3G" + batCap(5000, 4, 1, 1024000, 9.6f);
            }
            if (mdl.equals("SM-T670") || mdl.equals("SM-T677")) {
                return "Galaxy View" + batCap(5700, 4, 1, 2073600, 18.4f, 7);
            }
            if (mdl.equals("SM-T700")) {
                return "Galaxy Tab S 8.4 WiFi" + batCap(4900, 4, 24, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T705") || mdl.equals("SM-T705Y")) {
                return "Galaxy Tab S 8.4 LTE" + batCap(4900, 4, 24, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T705C")) {
                return "Galaxy Tab S 8.4 TD-LTE" + batCap(4900, 4, 24, 4096000, 8.4f, 7);
            }
            if (mdl.equals("SM-T710")) {
                return "Galaxy Tab S2 8.0 WiFi" + batCap(4000, 4, 24, 3145728, 8.0f, 7);
            }
            if (mdl.equals("SM-T715")) {
                return "Galaxy Tab S2 8.0 LTE" + batCap(4000, 4, 24, 3145728, 8.0f, 7);
            }
            if (mdl.equals("SM-T800")) {
                return "Galaxy Tab S 10.5 WiFi" + batCap(7900, 4, 24, 4096000, 10.5f);
            }
            if (mdl.equals("SM-T805") || mdl.equals("SM-T805W")) {
                return "Galaxy Tab S 10.5 LTE" + batCap(7900, 4, 24, 4096000, 10.5f);
            }
            if (mdl.equals("SM-T810")) {
                return "Galaxy Tab S2 9.7 WiFi" + batCap(5870, 4, 24, 3145728, 9.7f, 7);
            }
            if (mdl.equals("SM-T815")) {
                return "Galaxy Tab S2 9.7 LTE" + batCap(5870, 4, 24, 3145728, 9.7f, 7);
            }
            if (mdl.equals("SM-T900")) {
                return "Galaxy Tab Pro 12.2 WiFi" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-T901")) {
                return "Galaxy Tab Pro 12.2 3G" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-T905")) {
                return "Galaxy Tab Pro 12.2 LTE" + batCap(9500, 4, 16, 4096000, 12.2f, 7);
            }
            if (mdl.equals("SM-V700")) {
                return "Galaxy Gear" + batCap(315, 6, 24, 102400, 1.6f);
            }
        }
        if (mdl.startsWith("SPH-")) {
            if (mdl.equals("SPH-D700")) {
                return "Epic 4G (Sprint)" + batCap(1500, 1, 24, 384000, 4.0f);
            }
            if (mdl.equals("SPH-D710")) {
                return "Galaxy S II Epic 4G Touch (Sprint)" + batCap(1800, 1, 24, 384000, 4.52f, 6);
            }
            if (mdl.equals("SPH-D720")) {
                return "Nexus S 4G (Sprint)" + batCap(1500, 1, 24, 384000, 4.0f, 5);
            }
            if (mdl.equals("SPH-L300")) {
                return "Galaxy Victory 4G LTE (Sprint)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SPH-L700")) {
                return "Galaxy Nexus LTE (Sprint)" + batCap(1850, 1, 24, 921600, 4.65f, 6);
            }
            if (mdl.equals("SPH-L710") || mdl.equals("SPH-L710T")) {
                return "Galaxy S III CDMA (Sprint)" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 24, 921600, 4.8f, 6);
            }
            if (mdl.equals("SPH-L720") || mdl.equals("SPH-L720T")) {
                return "Galaxy S4 CDMA (Sprint)" + batCap(2600, 1, 24, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SPH-L900")) {
                return "Galaxy Note II CDMA (Sprint)" + batCap(3100, 3, 24, 921600, 5.5f, 6);
            }
            if (mdl.equals("SPH-M580")) {
                return "Replenish (Sprint)" + batCap(1160, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("SPH-M830")) {
                return "Galaxy Rush" + batCap(1750, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SPH-M840")) {
                return "Galaxy Prevail 2" + batCap(1750, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SPH-M910")) {
                return "Intercept" + batCap(1500, 1, 1, 96000, 3.2f);
            }
            if (mdl.equals("SPH-M920")) {
                return "Transform" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SPH-M930")) {
                return "Transform Ultra" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("SPH-M950")) {
                return "Galaxy Reverb" + batCap(1700, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("SPH-P500")) {
                return "Galaxy Tab 2 10.1 CDMA" + batCap(7000, 4, 2, 1024000, 10.1f, 6);
            }
        }*/
        if (mdl.equals("YP-G70CW")) {
            return "Galaxy S WiFi 5.0" + batCap(2500, 4, 1, 384000, 5.0f);
        }
        if (mdl.equals("YP-GB70D")) {
            return "Galaxy Player 70 Plus" + batCap(2500, 4, 1, 384000, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Sharp() {
        String mdl = getStrippedBuildModel(87);
        /*if (mdl.equals("306SH")) {
            return "Aquos Crystal" + batCap(InfoPage.IID_WIFI_IPADDR, 1, 1, 921600, 5.0f);
        }*/
        if (mdl.equals("SH05G")) {
            return "Aquos Pad SH05G" + batCap(3900, 4, 5, 2304000, 7.0f);
        }
        if (mdl.equals("SH80F")) {
            return "Aquos SH80F" + batCap(1240, 1, 20, 518400, 4.2f);
        }
        if (mdl.equals("SH530U")) {
            return "SH530U" + batCap(1950, 1, 1, 384000, 5.0f);
        }
        if (mdl.equals("SH8298U")) {
            return "Aquos SH8298U" + batCap(1240, 1, 20, 518400, 4.2f);
        }
        return "";
    }

    private static String getDevModel_SIM_Aren() {
        if (getStrippedBuildModel(DEVMANUF_SIM_AREN).equals("S7")) {
            return "S7" + batCap(0, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_SKK() {
        String mdl = getStrippedBuildModel(46);
        if (mdl.equals("AURA")) {
            return "Aura" + batCap(2800, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("CENTAUR")) {
            return "Centaur" + batCap(1800, 1);
        }
        if (mdl.equals("CHROME")) {
            return "Chrome" + batCap(1700, 1);
        }
        if (mdl.equals("CYCLOPS II")) {
            return "Cyclops II" + batCap(0, 4);
        }
        if (mdl.equals("EXTREME")) {
            return "Extreme" + batCap(6000, 4);
        }
        if (mdl.equals("GLIMPSE")) {
            return "Glimpse";
        }
        if (mdl.equals("GLIMPSE 3G")) {
            return "Glimpse 3G";
        }
        if (mdl.equals("GLIMPSE 2")) {
            return "Glimpse 2" + batCap(1500, 1);
        }
        if (mdl.equals("HELIOS")) {
            return "Helios" + batCap(2800, 4, 1, 409920, 7.0f);
        }
        if (mdl.equals("LYNX")) {
            return "Lynx" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("LYNX EDGE")) {
            return "Lynx Edge" + batCap(1750, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("LYNX LITE")) {
            return "Lynx Lite" + batCap(2500, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("MARIAN_S1")) {
            return "Marian S1" + batCap(2300, 1);
        }
        if (mdl.equals("MARIAN TAB")) {
            return "Marian Tab" + batCap(4000, 4);
        }
        if (mdl.equals("MARIAN V1")) {
            return "Marian V1" + batCap(2000, 1);
        }
        if (mdl.equals("MIRAGE_S1")) {
            return "Mirage S1";
        }
        if (mdl.equals("PHOENIX TAB 4")) {
            return "Phoenix Tab 4" + batCap(3000, 4);
        }
        /*if (mdl.equals("PLATINUM")) {
            return "Platinum" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1);
        }*/
        if (mdl.equals("SK8")) {
            return "SK8";
        }
        if (mdl.equals("SWIFT")) {
            return "Swift" + batCap(0, 1);
        }
        if (mdl.equals("TITANIUM")) {
            return "Titanium" + batCap(2400, 3);
        }
        if (mdl.equals("V2")) {
            return "V2" + batCap(2500, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("VIPER")) {
            return "Viper";
        }
        if (mdl.equals("WIND")) {
            return "Wind" + batCap(1500, 1);
        }
        return "";
    }

    private static String getDevModel_Sony_SE() {
        String mdl = getStrippedBuildModel(47);
        if (mdl.startsWith("C")) {
            if (mdl.equals("C1504") || mdl.equals("C1505")) {
                return "Xperia E" + batCap(1530, 1, 1, 153600, 3.5f, 5);
            }
            if (mdl.equals("C1604") || mdl.equals("C1605")) {
                return "Xperia E dual" + batCap(1530, 1, 1, 153600, 3.5f, 5);
            }
            if (mdl.equals("C1904") || mdl.equals("C1905")) {
                return "Xperia M" + batCap(1750, 1, 1, 409920, 4.0f);
            }
            if (mdl.equals("C2004") || mdl.equals("C2005")) {
                return "Xperia M dual" + batCap(1750, 1, 1, 409920, 4.0f);
            }
            if (mdl.equals("C2104") || mdl.equals("C2105")) {
                return "Xperia L" + batCap(1750, 1, 1, 409920, 4.3f, 6);
            }
            if (mdl.equals("C2305")) {
                return "Xperia C" + batCap(2390, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("C5302")) {
                return "Xperia SP HSPA" + batCap(2370, 1, 1, 921600, 4.6f, 6);
            }
            if (mdl.equals("C5303") || mdl.equals("C5306")) {
                return "Xperia SP LTE" + batCap(2370, 1, 1, 921600, 4.6f, 6);
            }
            if (mdl.equals("C5502") || mdl.equals("C5503")) {
                return "Xperia ZR" + batCap(2300, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("C6502") || mdl.equals("C6503") || mdl.equals("C6506")) {
                return "Xperia ZL" + batCap(2370, 1, 1, 2073600, 5.0f, 6);
            }
            if (mdl.equals("C6602") || mdl.equals("C6603")) {
                return "Xperia Z" + batCap(2330, 1, 1, 2073600, 5.0f, 6);
            }
            if (mdl.equals("C6802")) {
                return "Xperia Z Ultra HSPA+" + batCap(3050, 3, 6, 2073600, 6.4f, 7);
            }
            if (mdl.equals("C6806") || mdl.equals("C6833")) {
                return "Xperia Z Ultra LTE" + batCap(3050, 3, 6, 2073600, 6.4f);
            }
            if (mdl.equals("C6902")) {
                return "Xperia Z1 3G" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("C6903") || mdl.equals("C6906")) {
                return "Xperia Z1 4G LTE" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("C6943")) {
                return "Xperia Z1 4G LTE TV" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("C6916")) {
                return "Xperia Z1s" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
        }
        if (mdl.startsWith("D")) {
            if (mdl.equals("D2004") || mdl.equals("D2005")) {
                return "Xperia E1" + batCap(1700, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("D2104") || mdl.equals("D2105") || mdl.equals("D2114")) {
                return "Xperia E1 dual" + batCap(1750, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("D2202") || mdl.equals("D2203") || mdl.equals("D2206") || mdl.equals("D2243")) {
                return "Xperia E3" + batCap(2330, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("D2212")) {
                return "Xperia E3 dual" + batCap(2330, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("D2302")) {
                return "Xperia M2 dual" + batCap(2300, 1, 1, 518400, 4.8f);
            }
            if (mdl.equals("D2303") || mdl.equals("D2305") || mdl.equals("D2306")) {
                return "Xperia M2" + batCap(2300, 1, 1, 518400, 4.8f);
            }
            if (mdl.equals("D2403") || mdl.equals("D2406")) {
                return "Xperia M2 Aqua" + batCap(2300, 1, 6, 518400, 4.8f);
            }
            if (mdl.equals("D2502")) {
                return "Xperia C3 Dual" + batCap(2500, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("D2533")) {
                return "Xperia C3" + batCap(2500, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("D5102")) {
                return "Xperia T3 3G" + batCap(2500, 3, 6, 921600, 5.3f, 7);
            }
            if (mdl.equals("D5103") || mdl.equals("D5106")) {
                return "Xperia T3 4G LTE" + batCap(2500, 3, 6, 921600, 5.3f, 7);
            }
            if (mdl.equals("D5303") || mdl.equals("D5306")) {
                return "Xperia T2 Ultra" + batCap(3000, 3, 6, 921600, 6.0f, 7);
            }
            if (mdl.equals("D5322")) {
                return "Xperia T2 Ultra dual" + batCap(3000, 3, 6, 921600, 6.0f, 7);
            }
            if (mdl.equals("D5503")) {
                return "Xperia Z1 Compact" + batCap(2300, 1, 6, 921600, 4.3f, 7);
            }
            if (mdl.equals("D5803") || mdl.equals("D5833")) {
                return "Xperia Z3 Compact" + batCap(2600, 1, 6, 921600, 4.6f, 7);
            }
            if (mdl.equals("D6502")) {
                return "Xperia Z2 3G" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D6503")) {
                return "Xperia Z2 4G LTE" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D6543")) {
                return "Xperia Z2 TV 4G LTE" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D6563")) {
                return "Xperia Z2a" + batCap(3000, 1, 6, 2073600, 5.0f, 7);
            }
            if (mdl.equals("D6603") || mdl.equals("D6616") || mdl.equals("D6643") || mdl.equals("D6653")) {
                return "Xperia Z3" + batCap(3100, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D6633")) {
                return "Xperia Z3 dual" + batCap(3100, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("D6708")) {
                return "Xperia Z3v" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
        }
        /*if (mdl.startsWith("E")) {
            if (mdl.equals("E10A") || mdl.equals("E10I")) {
                return "Xperia X10 mini" + batCap(950, 1, 1, 76800, 2.55f);
            }
            if (mdl.equals("E15A") || mdl.equals("E15I")) {
                return "Xperia X8" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.0f);
            }
            if (mdl.equals("E2003") || mdl.equals("E2006") || mdl.equals("E2053")) {
                return "Xperia E4g" + batCap(2300, 1, 6, 518400, 4.7f, 7);
            }
            if (mdl.equals("E2033") || mdl.equals("E2043")) {
                return "Xperia E4g Dual" + batCap(2300, 1, 6, 518400, 4.7f, 7);
            }
            if (mdl.equals("E2104") || mdl.equals("E2105")) {
                return "Xperia E4" + batCap(2300, 1, 6, 518400, 5.0f, 6);
            }
            if (mdl.equals("E2114") || mdl.equals("E2115")) {
                return "Xperia E4 Dual" + batCap(2300, 1, 6, 518400, 5.0f, 6);
            }
            if (mdl.equals("E2303") || mdl.equals("E2306") || mdl.equals("E2353")) {
                return "Xperia M4 Aqua" + batCap(2400, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("E2312") || mdl.equals("E2333") || mdl.equals("E2363")) {
                return "Xperia M4 Aqua Dual" + batCap(2400, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("E5303") || mdl.equals("E5306") || mdl.equals("E5353")) {
                return "Xperia C4" + batCap(2600, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("E5333") || mdl.equals("E5343") || mdl.equals("E5363")) {
                return "Xperia C4 Dual" + batCap(2600, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("E5506") || mdl.equals("E5553")) {
                return "Xperia C5 Ultra" + batCap(2930, 3, 6, 2073600, 6.0f, 7);
            }
            if (mdl.equals("E5533") || mdl.equals("E5563")) {
                return "Xperia C5 Ultra Dual" + batCap(2930, 3, 6, 2073600, 6.0f, 7);
            }
            if (mdl.equals("E5603") || mdl.equals("E5606") || mdl.equals("E5653")) {
                return "Xperia M5" + batCap(2600, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("E5633") || mdl.equals("E5643") || mdl.equals("E5663")) {
                return "Xperia M5 Dual" + batCap(2600, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("E5803") || mdl.equals("E5823")) {
                return "Xperia Z5 Compact" + batCap(2700, 1, 6, 921600, 4.6f, 10);
            }
            if (mdl.equals("E6508")) {
                return "Xperia Z4v" + batCap(3000, 1, 6, 3686400, 5.2f, 10);
            }
            if (mdl.equals("E6533")) {
                return "Xperia Z3+ Dual" + batCap(2930, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("E6553")) {
                return "Xperia Z3+" + batCap(2930, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("E6603") || mdl.equals("E6653")) {
                return "Xperia Z5" + batCap(2900, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("E6633") || mdl.equals("E6683")) {
                return "Xperia Z5 Dual" + batCap(2900, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("E6853")) {
                return "Xperia Z5 Premium" + batCap(3430, 3, 6, 8294400, 5.5f, 10);
            }
            if (mdl.equals("E6833") || mdl.equals("E6883")) {
                return "Xperia Z5 Premium Dual" + batCap(3430, 3, 6, 8294400, 5.5f, 10);
            }
        }
        if (mdl.startsWith("L")) {
            if (mdl.equals("L39H")) {
                return "Xperia Z1 3G" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("L50W")) {
                return "Xperia Z2 3G" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("LT15A") || mdl.equals("LT15I")) {
                return "Xperia arc" + batCap(1500, 1, 1, 409920, 4.2f, 6);
            }
            if (mdl.equals("LT18A") || mdl.equals("LT18I")) {
                return "Xperia arc S" + batCap(1500, 1, 1, 409920, 4.2f, 6);
            }
            if (mdl.equals("LT22I")) {
                return "Xperia P" + batCap(1305, 1, 1, 518400, 4.0f, 6);
            }
            if (mdl.equals("LT25I")) {
                return "Xperia V" + batCap(1750, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("LT26I")) {
                return "Xperia S" + batCap(1750, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("LT26II")) {
                return "Xperia SL" + batCap(1750, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("LT26W")) {
                return "Xperia acro S" + batCap(1910, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("LT28AT")) {
                return "Xperia ion" + batCap(1900, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT28H")) {
                return "Xperia ion HSPA" + batCap(1900, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT28I")) {
                return "Xperia ion LTE" + batCap(1900, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT29I")) {
                return "Xperia TX" + batCap(1750, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT30A")) {
                return "Xperia T LTE" + batCap(1850, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT30AT")) {
                return "Xperia TL" + batCap(1850, 1, 1, 921600, 4.55f, 6);
            }
            if (mdl.equals("LT30P")) {
                return "Xperia T" + batCap(1850, 1, 1, 921600, 4.55f, 6);
            }
        }
        if (mdl.startsWith("M")) {
            if (mdl.equals("MK16A") || mdl.equals("MK16I")) {
                return "Xperia pro" + batCap(1500, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MT11A") || mdl.equals("MT11I")) {
                return "Xperia neo V" + batCap(1500, 1, 1, 409920, 3.7f, 6);
            }
            if (mdl.equals("MT15A") || mdl.equals("MT15I")) {
                return "Xperia neo" + batCap(1500, 1, 1, 409920, 3.7f);
            }
            if (mdl.equals("MT25I")) {
                return "Xperia neo L" + batCap(1500, 1, 1, 409920, 4.0f);
            }
            if (mdl.equals("MT27I")) {
                return "Xperia sola" + batCap(1320, 1, 1, 409920, 3.7f);
            }
        }
        if (mdl.equals("R800A") || mdl.equals("R800AT") || mdl.equals("R800X") || mdl.equals("R88I")) {
            return "Xperia Play" + batCap(1500, 1, 1, 409920, 4.0f, 6);
        }
        if (mdl.startsWith("S")) {
            if (mdl.equals("SGP311") || mdl.equals("SGP312")) {
                return "Xperia Tablet Z WiFi" + batCap(6000, 4, 1, 2304000, 10.1f, 6);
            }
            if (mdl.equals("SGP321") || mdl.equals("SGP351")) {
                return "Xperia Tablet Z LTE" + batCap(6000, 4, 1, 2304000, 10.1f, 6);
            }
            if (mdl.equals("SGP511") || mdl.equals("SGP512")) {
                return "Xperia Z2 Tablet WiFi" + batCap(6000, 4, 1, 2304000, 10.1f, 7);
            }
            if (mdl.equals("SGP521") || mdl.equals("SGP541") || mdl.equals("SGP551")) {
                return "Xperia Z2 Tablet" + batCap(6000, 4, 1, 2304000, 10.1f, 7);
            }
            if (mdl.equals("SGP621") || mdl.equals("SGP641")) {
                return "Xperia Z3 Tablet Compact" + batCap(4500, 4, 1, 2304000, 8.0f, 7);
            }
            if (mdl.equals("SGP712") || mdl.equals("SGP771")) {
                return "Xperia Z4 Tablet" + batCap(6000, 4, 1, 4096000, 10.1f, 10);
            }
            if (mdl.equals("SGPT12")) {
                return "Xperia Tablet S" + batCap(6000, 4, 1, 1024000, 9.4f, 1);
            }
            if (mdl.equals("SGPT13")) {
                return "Xperia Tablet S 3G" + batCap(6000, 4, 1, 1024000, 9.4f, 1);
            }
            if (mdl.equals("SK17") || mdl.equals("SK17I")) {
                return "Xperia mini pro" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.0f, 6);
            }
            if (mdl.equals("SO-01B")) {
                return "Xperia X10 (NTT DoCoMo)" + batCap(1500, 1, 1, 409920, 4.0f);
            }
            if (mdl.equals("SO-01C")) {
                return "Xperia arc (NTT DoCoMo)" + batCap(1500, 1, 1, 409920, 4.2f, 6);
            }
            if (mdl.equals("SO-01D")) {
                return "Xperia Play (NTT DoCoMo)" + batCap(1500, 1, 1, 409920, 4.0f, 6);
            }
            if (mdl.equals("SO-01E")) {
                return "Xperia AX (NTT DoCoMo)" + batCap(1750, 1, 1, 921600, 4.3f, 6);
            }
            if (mdl.equals("SO-01F")) {
                return "Xperia Z1 (NTT DoCoMo)" + batCap(3000, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("SO-01G")) {
                return "Xperia Z3 (NTT DoCoMo)" + batCap(3100, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("SO-01H")) {
                return "Xperia Z5 (NTT DoCoMo)" + batCap(2900, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("SO-03D")) {
                return "Xperia acro HD (NTT DoCoMo)" + batCap(1900, 1, 1, 921600, 4.3f);
            }
            if (mdl.equals("SO-03E")) {
                return "Xperia Tablet Z LTE (NTT DoCoMo)" + batCap(6000, 4, 1, 2304000, 10.1f, 6);
            }
            if (mdl.equals("SO-03F")) {
                return "Xperia Z2 (NTT DoCoMo)" + batCap(3200, 1, 6, 2073600, 5.2f, 7);
            }
            if (mdl.equals("SO-03G")) {
                return "Xperia Z4 (NTT DoCoMo)" + batCap(2930, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("SO-03H")) {
                return "Xperia Z5 Premium (NTT DoCoMo)" + batCap(3430, 3, 6, 8294400, 5.5f, 10);
            }
            if (mdl.equals("SO-04D")) {
                return "Xperia GX (NTT DoCoMo)" + batCap(1700, 1, 1, 921600, 4.6f);
            }
            if (mdl.equals("SO-04E")) {
                return "Xperia A (NTT DoCoMo)" + batCap(2300, 1, 1, 921600, 4.6f);
            }
            if (mdl.equals("SO-04F")) {
                return "Xperia A2 (NTT DoCoMo)" + batCap(2300, 1, 1, 921600, 4.3f, 7);
            }
            if (mdl.equals("SO-04G")) {
                return "Xperia A4 (NTT DoCoMo)" + batCap(2600, 1, 1, 921600, 4.6f, 7);
            }
            if (mdl.equals("SO-05D")) {
                return "Xperia SX (NTT DoCoMo)" + batCap(1500, 1, 1, 518400, 3.7f, 6);
            }
            if (mdl.equals("SO-05F")) {
                return "Xperia Z2 Tablet (NTT DoCoMo)" + batCap(6000, 4, 1, 2304000, 10.1f, 7);
            }
            if (mdl.equals("SO-05G")) {
                return "Xperia Z4 Tablet (NTT DoCoMo)" + batCap(6000, 4, 1, 4096000, 10.1f, 10);
            }
            if (mdl.equals("SO-I12")) {
                return "Xperia acro HD (Japan)" + batCap(1900, 1, 1, 921600, 4.3f);
            }
            if (mdl.equals("SOV31")) {
                return "Xperia Z4" + batCap(2930, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("ST15A") || mdl.equals("ST15I")) {
                return "Xperia mini" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.0f, 6);
            }
            if (mdl.equals("ST17A") || mdl.equals("ST17I")) {
                return "Xperia active" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.0f, 6);
            }
            if (mdl.equals("ST18A") || mdl.equals("ST18I")) {
                return "Xperia ray" + batCap(1500, 1, 1, 409920, 3.3f, 6);
            }
            if (mdl.equals("ST21A") || mdl.equals("ST21I")) {
                return "Xperia tipo" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("ST21A2") || mdl.equals("ST21I2")) {
                return "Xperia tipo dual" + batCap(1500, 1, 1, 153600, 3.2f);
            }
            if (mdl.equals("ST23A") || mdl.equals("ST23I")) {
                return "Xperia miro" + batCap(1500, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("ST25A") || mdl.equals("ST25I")) {
                return "Xperia U" + batCap(1320, 1, 1, 409920, 3.5f, 6);
            }
            if (mdl.equals("ST26A") || mdl.equals("ST26I")) {
                return "Xperia J" + batCap(1750, 1, 1, 409920, 4.0f, 5);
            }
            if (mdl.equals("ST27A") || mdl.equals("ST27I")) {
                return "Xperia go" + batCap(1305, 1, 1, 153600, 3.5f, 6);
            }
        }
        if (mdl.equals("U20A") || mdl.equals("U20I")) {
            return "Xperia X10 mini pro" + batCap(930, 1, 1, 76800, 2.55f);
        }
        if (mdl.equals("WT19A") || mdl.equals("WT19I")) {
            return "Live with Walkman" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.2f, 6);
        }*/
        if (mdl.equals("X10A") || mdl.equals("X10I")) {
            return "Xperia X10" + batCap(1500, 1, 1, 409920, 4.0f);
        }
        if (mdl.equals("XPERIA PRO")) {
            return "Xperia pro" + batCap(1500, 1, 1, 409920, 3.7f, 6);
        }
        return "";
    }

    private static String getDevModel_Starway() {
        String mdl = getStrippedBuildModel(DEVMANUF_STARWAY);
        if (mdl.equals("ANDROMEDA S840")) {
            return "Andromeda S840" + batCap(4200, 4, 6, 786432, 7.9f);
        }
        if (mdl.equals("VEGA T2")) {
            return "Vega T2" + batCap(1750, 1, 1, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Storex() {
        if (getStrippedBuildModel(DEVMANUF_STOREX).equals("EZEE'TAB785")) {
            return "eZee'Tab785" + batCap(3500, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Supra() {
        String mdl = getStrippedBuildModel(DEVMANUF_SUPRA);
        if (mdl.equals("M121G")) {
            return "M121G" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("M12AG")) {
            return "M12AG" + batCap(5500, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("M12BG")) {
            return "M12BG" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("M141")) {
            return "M141" + batCap(5500, 4, 1, 614400, 10.1f);
        }
        /*if (mdl.equals("M141G")) {
            return "M141G" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M142G")) {
            return "M142G" + batCap(7000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M143G")) {
            return "M143G" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M145G")) {
            return "M145G" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M147G")) {
            return "M147G" + batCap(6800, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("M14AG")) {
            return "M14AG" + batCap(4000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("M621G")) {
            return "M621G" + batCap(2500, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("M622G")) {
            return "M622G" + batCap(2500, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("M720G")) {
            return "M720G" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M722")) {
            return "M722" + batCap(RemoteMediaPlayer.STATUS_FAILED, 4, 1, 384000, 7.0f);
        }*/
        if (mdl.equals("M722G")) {
            return "M722G" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M724G")) {
            return "M724G" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M725G")) {
            return "M725G" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M727G")) {
            return "M727G" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M728G")) {
            return "M728G" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M729G")) {
            return "M729G" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M72KG")) {
            return "M72KG" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M741")) {
            return "M741" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M742")) {
            return "M742" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M742G")) {
            return "M742G" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("M748G")) {
            return "M748G" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("M74AG")) {
            return "M74AG" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M74BG")) {
            return "M74BG" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("M74CG")) {
            return "M74CG" + batCap(2000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("M74DG")) {
            return "M74DG" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M74LG")) {
            return "M74LG" + batCap(2000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("M74MG")) {
            return "M74MG" + batCap(2600, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("M826G")) {
            return "M826G" + batCap(3000, 4, 1, 786432, 7.85f);
        }
        if (mdl.equals("M843G")) {
            return "M843G" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("M844")) {
            return "M844" + batCap(3500, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("M845G")) {
            return "M845G" + batCap(4000, 4, 1, 786432, 7.85f);
        }
        if (mdl.equals("M846G")) {
            return "M846G" + batCap(4000, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("M847G")) {
            return "M847G" + batCap(4000, 4, 6, 786432, 7.85f);
        }
        if (mdl.equals("M848G")) {
            return "M848G" + batCap(3800, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("M941G")) {
            return "M941G" + batCap(6000, 4, 6, 786432, 9.7f);
        }
//        if (mdl.equals("M942G")) {
//            return "M942G" + batCap(GamesStatusCodes.STATUS_MATCH_ERROR_INVALID_PARTICIPANT_STATE, 4, 6, 2304000, 8.9f);
//        }
        if (mdl.equals("M945G")) {
            return "M945G" + batCap(6700, 4, 1, 786432, 9.7f);
        }
        if (mdl.equals("M94AG")) {
            return "M94AG" + batCap(4000, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("M94BG")) {
            return "M94BG" + batCap(5500, 4, 6, 1024000, 9.6f);
        }
        return "";
    }

    private static String getDevModel_TabletExpress() {
        String mdl = getStrippedBuildModel(106);
        if (mdl.equals("A93")) {
            return "Dragon Touch A93" + batCap(0, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("E70")) {
            return "Dragon Touch E70" + batCap(0, 4, 6, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_TCL() {
        if (getStrippedBuildModel(DEVMANUF_TCL).equals("M3G")) {
            return "M3G" + batCap(3000, 1, 1, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Teclast() {
        String mdl = getStrippedBuildModel(49);
        if (mdl.startsWith("A78 QUAD-CORE(")) {
            return "A78 Quad-core" + batCap(0, 4);
        }
        if (mdl.startsWith("P19HD(")) {
            return "P19HD" + batCap(7500, 4);
        }
        if (mdl.startsWith("P70H(")) {
            return "P70h" + batCap(0, 4);
        }
        if (mdl.startsWith("P79HD(")) {
            return "P79HD" + batCap(3500, 4);
        }
        if (mdl.startsWith("P79HD 3G(")) {
            return "P79HD 3G" + batCap(3500, 4);
        }
        if (mdl.startsWith("P80 3G OCTA-CORE(")) {
            return "P80 3G Octa-core" + batCap(0, 4);
        }
        if (mdl.startsWith("P89 3G OCTA-CORE(")) {
            return "P89 3G Octa-core" + batCap(5000, 4);
        }
        if (mdl.startsWith("P89MINI(")) {
            return "P89mini" + batCap(0, 4);
        }
        if (mdl.startsWith("P89S(")) {
            return "P89s" + batCap(0, 4);
        }
        if (mdl.startsWith("P90HD(")) {
            return "P90HD" + batCap(0, 4);
        }
        if (mdl.startsWith("P98 3G OCTA-CORE(")) {
            return "P98 3G Octa-core" + batCap(0, 4);
        }
        if (mdl.startsWith("P98 AIR OCTA-CORE(")) {
            return "P98 Air Octa-core" + batCap(0, 4);
        }
        if (mdl.startsWith("X70 3G(")) {
            return "X70 3G" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.startsWith("X80H(")) {
            return "X80h" + batCap(0, 4);
        }
        if (mdl.startsWith("X80HD(")) {
            return "X80HD" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.startsWith("X89HD(")) {
            return "X89HD" + batCap(6000, 4);
        }
        if (mdl.startsWith("X98 3G(")) {
            return "X98 3G" + batCap(8500, 4);
        }
        if (mdl.startsWith("X98 AIR(")) {
            return "X98 Air" + batCap(8500, 4);
        }
        if (mdl.startsWith("X98 AIR 3G(")) {
            return "X98 Air 3G" + batCap(8500, 4);
        }
        return "";
    }

    private static String getDevModel_teXet() {
        String mdl = getStrippedBuildModel(74);
        if (mdl.startsWith("X-PAD SHINE 8.1 3G")) {
            return "X-pad Shine 8.1 3G" + batCap(3800, 4, 6, 786432, 7.85f);
        }
        if (mdl.startsWith("TM-8048_")) {
            return "X-force 8 3G" + batCap(4400, 4, 6, 1024000, 8.0f);
        }
        return "";
    }

    private static String getDevModel_THL() {
        String mdl = getStrippedBuildModel(50);
        if (mdl.equals("2015")) {
            return "2015" + batCap(2700, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("2015A")) {
            return "2015A" + batCap(2700, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("4000")) {
            return "4000" + batCap(4000, 1, 6, 518400, 4.7f);
        }
        if (mdl.equals("4400")) {
            return "4400" + batCap(4400, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("5000")) {
            return "5000" + batCap(5000, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("5000T")) {
            return "5000T" + batCap(5000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("A1")) {
            return "A1" + batCap(1100, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("A2")) {
            return "A2" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        /*if (mdl.equals("A3")) {
            return "A3" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 6, 384000, 3.5f, 6);
        }*/
        if (mdl.equals("I95")) {
            return "I95" + batCap(1750, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("L968")) {
            return "L968" + batCap(2200, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("L969")) {
            return "L969" + batCap(2700, 1, 1, 409920, 5.0f);
        }
        if (mdl.startsWith("T")) {
            if (mdl.equals("T5")) {
                return "T5" + batCap(1950, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("T5S")) {
                return "T5S" + batCap(1950, 1, 1, 518400, 4.7f);
            }
            if (mdl.equals("T6 PRO")) {
                return "T6 Pro" + batCap(1900, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("T6S")) {
                return "T6S" + batCap(1900, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("T11")) {
                return "T11" + batCap(2300, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("T12")) {
                return "T12" + batCap(1800, 1, 6, 921600, 4.5f);
            }
            if (mdl.equals("T100S")) {
                return "T100s" + batCap(2750, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("T200")) {
                return "T200" + batCap(2500, 3, 1, 2073600, 6.0f);
            }
            if (mdl.equals("T200C")) {
                return "T200C" + batCap(2500, 3, 6, 921600, 6.0f, 7);
            }
        }
        if (mdl.startsWith("V")) {
            if (mdl.equals("V7")) {
                return "V7" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("V8")) {
                return "V8" + batCap(1100, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("V9")) {
                return "V9" + batCap(1550, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("V11")) {
                return "V11" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("V12")) {
                return "V12" + batCap(1300, 1, 6, 409920, 4.0f);
            }
            if (mdl.equals("V12+")) {
                return "V12+" + batCap(1300, 1, 6, 409920, 4.0f);
            }
        }
        if (mdl.startsWith("W")) {
            if (mdl.equals("W1")) {
                return "W1" + batCap(1550, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W1+")) {
                return "W1+" + batCap(1550, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W2")) {
                return "W2" + batCap(3000, 1, 1, 518400, 4.3f);
            }
            if (mdl.equals("W3")) {
                return "W3" + batCap(2000, 1, 6, 921600, 4.5f);
            }
            if (mdl.equals("W5")) {
                return "W5" + batCap(2000, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("W6")) {
                return "W6" + batCap(2300, 3, 6, 518400, 5.3f);
            }
            if (mdl.equals("W7")) {
                return "W7" + batCap(2300, 3, 1, 921600, 5.7f);
            }
            if (mdl.equals("W7S")) {
                return "W7S" + batCap(2300, 3, 1, 921600, 5.7f);
            }
            if (mdl.equals("W8")) {
                return "W8" + batCap(2000, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W8+")) {
                return "W8+" + batCap(2000, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W8E")) {
                return "W8e" + batCap(2000, 1, 1, 921600, 5.0f);
            }
            if (mdl.equals("W8S")) {
                return "W8S" + batCap(2000, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W9")) {
                return "W9" + batCap(2300, 3, 1, 2073600, 5.7f);
            }
            if (mdl.equals("W11")) {
                return "W11" + batCap(2000, 1, 1, 2073600, 5.0f);
            }
            if (mdl.equals("W100")) {
                return "W100" + batCap(1800, 1, 1, 518400, 4.5f);
            }
            if (mdl.equals("W100S")) {
                return "W100S" + batCap(1800, 1, 1, 518400, 4.5f);
            }
            if (mdl.equals("W200")) {
                return "W200" + batCap(1800, 1, 1, 921600, 5.0f);
            }
            if (mdl.equals("W200C")) {
                return "W200C" + batCap(1800, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("W200S")) {
                return "W200S" + batCap(2000, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("W300")) {
                return "W300" + batCap(3300, 3, 1, 2073600, 6.5f);
            }
        }
        return "";
    }

    private static String getDevModel_Torque() {
        String mdl = getStrippedBuildModel(51);
        if (mdl.startsWith("DROIDZ")) {
            if (mdl.equals("DROIDZ ACTIVE 3G")) {
                return "Droidz Active 3G" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ ATOM S")) {
                return "Droidz Atom S" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ ATOM X")) {
                return "Droidz Atom X" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ AVATAR TV")) {
                return "Droidz Avatar TV" + batCap(0, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("DROIDZ BEAT TV")) {
                return "Droidz Beat TV" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DROIDZ BLAST")) {
                return "Droidz Blast" + batCap(0, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DROIDZ BLAST X")) {
                return "Droidz Blast X" + batCap(0, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DROIDZ DASH X")) {
                return "Droidz Dash X" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DRIVE I")) {
                return "Droidz Drive i" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DRIVE S")) {
                return "Droidz Drive S" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DRIVE SLIM")) {
                return "Droidz Drive Slim" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DUO")) {
                return "Droidz Duo" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DUO +")) {
                return "Droidz Duo +" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DUO SLIM")) {
                return "Droidz Duo Slim" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ DUO TV")) {
                return "Droidz Duo TV" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ EASY")) {
                return "Droidz Easy" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DROIDZ EDGE")) {
                return "Droidz Edge" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ EDGE +")) {
                return "Droidz Edge +" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ FORCE")) {
                return "Droidz Force" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ INSPIRE")) {
                return "Droidz Inspire" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ LIFE HD")) {
                return "Droidz Life HD" + batCap(0, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("DROIDZ MARVEL HD")) {
                return "Droidz Marvel HD" + batCap(0, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("DROIDZ MATCH TV")) {
                return "Droidz Match TV" + batCap(0, 1, 1, 153600, 3.8f);
            }
            if (mdl.equals("DROIDZ MINI D")) {
                return "Droidz Mini D" + batCap(0, 4, 1, 786432, 7.85f);
            }
            if (mdl.equals("DROIDZ MINI Q")) {
                return "Droidz Mini Q" + batCap(0, 4, 6, 786432, 7.85f);
            }
            if (mdl.equals("DROIDZ MOTION")) {
                return "Droidz Motion" + batCap(0, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("DROIDZ PLAY 3G")) {
                return "Droidz Play 3G" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DROIDZ POP 3G")) {
                return "Droidz Pop 3G" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DROIDZ PORTAL X")) {
                return "Droidz Portal X" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("DROIDZ PUSH +")) {
                return "Droidz Push +" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ PUSH I")) {
                return "Droidz Push i" + batCap(0, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("DROIDZ QUAD")) {
                return "Droidz Quad" + batCap(0, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DROIDZ SMART")) {
                return "Droidz Smart" + batCap(0, 1, 1, 409920, 5.0f);
            }
            if (mdl.equals("DROIDZ SPACE 3G")) {
                return "Droidz Space 3G" + batCap(0, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("DROIDZ SPAN")) {
                return "Droidz Span" + batCap(0, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("DROIDZ SPORT")) {
                return "Droidz Sport" + batCap(0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("DROIDZ STARK")) {
                return "Droidz Stark" + batCap(0, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("DROIDZ TREND")) {
                return "Droidz Trend" + batCap(0, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("DROIDZ ULTIMATE")) {
                return "Droidz Ultimate" + batCap(0, 4, 1, 786432, 9.7f);
            }
            if (mdl.equals("DROIDZ ZAP")) {
                return "Droidz Zap" + batCap(0, 1, 1, 153600, 3.5f);
            }
        }
        return "";
    }

    private static String getDevModel_Toshiba() {
        if (getStrippedBuildModel(DEVMANUF_TOSHIBA).equals("AT10LE-A")) {
            return "Excite AT10LE-A" + batCap(0, 4, 6, 4096000, 10.1f);
        }
        return "";
    }

    private static String getDevModel_TrekStor() {
        String mdl = getStrippedBuildModel(DEVMANUF_TREKSTOR);
        if (mdl.equals("SURFTAB BREEZE 7.0 QUAD")) {
            return "SurfTab breeze 7.0 quad" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("SURFTAB XIRON 7.0 3G")) {
            return "SurfTab xiron 7.0 3G" + batCap(0, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Tronfy() {
        if (getStrippedBuildModel(DEVMANUF_TRONFY).equals("MXIV TELOS")) {
            return "MXIV Telos" + batCap(0, 9);
        }
        return "";
    }

    private static String getDevModel_TTEM() {
        if (!getStrippedBuildModel(DEVMANUF_TTEM).equals("A909")) {
            return "";
        }
        String hw = build_Hardware().toUpperCase();
        if (hw.equals("MT6582")) {
            return "A909 Quad Core" + batCap(3100, 3, 6, 921600, 5.5f);
        }
        if (hw.equals("MT6592")) {
            return "A909 Octa Core" + batCap(3100, 3, 6, 2073600, 5.5f);
        }
        return "A909" + batCap(3100, 3, 6, 921600, 5.5f);
    }

    private static String getDevModel_Uhappy() {
        if (getStrippedBuildModel(DEVMANUF_UHAPPY).equals("UP550")) {
            return "N9776" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Ulefone() {
        String mdl = getStrippedBuildModel(DEVMANUF_ULEFONE);
        if (mdl.equals("BE ONE")) {
            return "Be One" + batCap(2350, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("BE PRO")) {
            return "Be Pro" + batCap(2600, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("BE PURE")) {
            return "Be Pure" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("BE TOUCH")) {
            return "Be Touch" + batCap(2550, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("BE TOUCH 2")) {
            return "Be Touch 2" + batCap(3050, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("BE_X")) {
            return "Be X" + batCap(1900, 1, 6, 518400, 4.5f);
        }
        if (mdl.equals("L55")) {
            return "L55" + batCap(2600, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("E1911_V77_GQ2000_A41_6628_V20")) {
            return "N9776" + batCap(2300, 3, 1, 409920, 6.0f);
        }
        if (mdl.equals("P6")) {
            return "P6" + batCap(2800, 3, 6, 921600, 6.0f);
        }
        if (mdl.equals("P6+")) {
            return "P6+" + batCap(2800, 3, 6, 2073600, 6.0f);
        }
        if (mdl.equals("PARIS")) {
            return "Paris" + batCap(2250, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("U5")) {
            return "U5" + batCap(2400, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("U650")) {
            return "U650" + batCap(3800, 3, 6, 2073600, 6.5f);
        }
        if (mdl.equals("U650+")) {
            return "U650+" + batCap(3800, 3, 6, 2073600, 6.5f);
        }
        if (mdl.equals("U69")) {
            return "U69" + batCap(3500, 4, 6, 2304000, 7.0f);
        }
        if (mdl.equals("U692")) {
            return "U692" + batCap(3800, 3, 6, 921600, 6.5f);
        }
        if (mdl.equals("U7")) {
            return "U7" + batCap(3500, 4, 6, 2304000, 7.0f);
        }
        if (mdl.equals("U9592")) {
            return "U9592" + batCap(2800, 1, 6, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_UMI() {
        String mdl = getStrippedBuildModel(52);
        if (mdl.equals("C1")) {
            return "C1" + batCap(2430, 3, 1, 921600, 5.5f);
        }
        if (mdl.equals("CROSS1")) {
            return "Cross" + batCap(4180, 3, 6, 2073600, 6.44f);
        }
        if (mdl.equals("EMAX")) {
            return "eMax" + batCap(3780, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("EMAX-MINI")) {
            return "eMax mini" + batCap(3050, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("FAIR")) {
            return "Fair" + batCap(2000, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("HAMMER")) {
            return "Hammer" + batCap(2250, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("HAMMER S")) {
            return "Hammer S" + batCap(3200, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("IRON")) {
            return "Iron" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("IRON-PRO")) {
            return "Iron Pro" + batCap(3100, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X1-PRO")) {
            return "X1 Pro" + batCap(2150, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("X2")) {
            return "X2" + batCap(2500, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("X2S")) {
            return "X2S" + batCap(2500, 1, 1, 2073600, 5.0f);
        }
        if (mdl.equals("X3")) {
            return "X3" + batCap(3150, 3, 1, 2073600, 5.5f);
        }
        if (mdl.equals("ZERO")) {
            return "Zero" + batCap(2780, 1, 24, 2073600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Utok() {
        String mdl = getStrippedBuildModel(94);
        /*if (mdl.equals("351D")) {
            return "351D" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        if (mdl.equals("400Q")) {
            return "400Q" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("401D")) {
            return "401D" + batCap(1300, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("430Q")) {
            return "430Q" + batCap(1600, 1, 6, 518400, 4.3f);
        }
        if (mdl.equals("450Q")) {
            return "450Q" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("451D")) {
            return "451D" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("470Q")) {
            return "470Q" + batCap(2000, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("500D")) {
            return "500D" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("500Q HD")) {
            return "500Q HD" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("500Q HD DELUXE EDITION")) {
            return "500Q HD Deluxe Edition" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("700Q HD")) {
            return "700Q HD" + batCap(2800, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("700Q SATIN")) {
            return "700Q Satin" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("700Q ULTRA")) {
            return "700Q Ultra" + batCap(2700, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("701D")) {
            return "701D" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("702Q")) {
            return "702Q" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("800Q")) {
            return "800Q" + batCap(4000, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("900Q")) {
            return "900Q" + batCap(5200, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("1005D")) {
            return "1005D" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("1005Q")) {
            return "1005Q" + batCap(5200, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("1010_Q")) {
            return "1010Q" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("D35W")) {
            return "D35w" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("D40")) {
            return "D40" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("D40 XS")) {
            return "D40 XS" + batCap(1450, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("D45")) {
            return "D45" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("D45W")) {
            return "D45w" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("DOREL 3")) {
            return "Dorel 3" + batCap(2000, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("EXPLORER 3")) {
            return "Explorer 3" + batCap(2000, 1, 6, 153600, 3.5f);
        }
        if (mdl.equals("FURY")) {
            return "Fury" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("HELLO 7D")) {
            return "Hello 7D" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("HELLO 7K")) {
            return "Hello 7K" + batCap(3000, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("HELLO 7Q")) {
            return "Hello 7Q" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("HELLO 8Q HD")) {
            return "Hello 8Q HD" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("HELLO 10Q")) {
            return "Hello 10Q" + batCap(6000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("HELLO 10Q HD")) {
            return "Hello 10Q HD" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("I700")) {
            return "i700" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("IQ700")) {
            return "iQ700" + batCap(3000, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("IQ1000")) {
            return "iQ1000" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("Q45")) {
            return "Q45" + batCap(1650, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Q50")) {
            return "Q50" + batCap(2000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("STELLAR ELITE")) {
            return "Stellar Elite" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Vega() {
        String mdl = getStrippedBuildModel(DEVMANUF_VEGA);
        if (mdl.equals("C3124")) {
            return "C3124" + batCap(0, 4, 6, 384000, 7.0f);
        }
        if (mdl.equals("D7124")) {
            return "D7124" + batCap(0, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_verykool() {
        /*if (getStrippedBuildModel(DEVMANUF_VERYKOOL).equals("S354")) {
            return "S354" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        return "";
    }

    private static String getDevModel_Vestel() {
        String mdl = getStrippedBuildModel(77);
        if (mdl.equals("VSP250G")) {
            return "Venus 5.0 (VSP250g)" + batCap(2200, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("VSP355G")) {
            return "VSP355g" + batCap(2000, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Videocon() {
        if (getStrippedBuildModel(DEVMANUF_VIDEOCON).equals("INFINIUM Z51 NOVA")) {
            return "Infinium Z51 Nova" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        return "";
    }

    private static String getDevModel_ViewSonic() {
        if (getStrippedBuildModel(DEVMANUF_VIEWSONIC).equals("VIEWPAD7")) {
            return "ViewPad 7" + batCap(3240, 1, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Vivax() {
        if (getStrippedBuildModel(67).equals("TPC-7151")) {
            return "TPC-7151" + batCap(3700, 4, 6, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Vivo() {
        String mdl = getStrippedBuildModel(DEVMANUF_VIVO);
        if (mdl.equals("X3S")) {
            return "X3S" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X5")) {
            return "X5" + batCap(2250, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("X5MAX")) {
            return "X5Max" + batCap(2300, 3, 24, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X5MAX+")) {
            return "X5Max+" + batCap(2300, 3, 24, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X5MAX F")) {
            return "X5Max F" + batCap(2300, 3, 24, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X5MAX L")) {
            return "X5Max L" + batCap(2000, 3, 24, 2073600, 5.5f);
        }
        if (mdl.equals("X5MAX V")) {
            return "X5Max V" + batCap(2300, 3, 24, 2073600, 5.5f, 7);
        }
        if (mdl.equals("X5PRO D")) {
            return "X5Pro" + batCap(2300, 1, 24, 2073600, 5.2f, 7);
        }
        if (mdl.equals("XPLAY3S")) {
            return "Xplay3S" + batCap(3200, 3, 6, 3686400, 6.0f);
        }
        if (mdl.equals("XSHOT")) {
            return "Xshot" + batCap(2600, 1, 6, 2073600, 5.2f);
        }
        if (mdl.equals("Y15")) {
            return "Y15" + batCap(1900, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Y22")) {
            return "Y22" + batCap(1900, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("Y27")) {
            return "Y27" + batCap(2260, 1, 6, 921600, 4.7f);
        }
       /* if (mdl.equals("Y28")) {
            return "Y28" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.7f);
        }*/
        if (mdl.equals("Y29")) {
            return "Y29" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        return "";
    }

    private static String getDevModel_Vkworld() {
        String mdl = getStrippedBuildModel(DEVMANUF_VKWORLD);
        if (mdl.equals("VK560")) {
            return "VK560" + batCap(2850, 3, 1, 518400, 5.5f);
        }
        if (mdl.equals("VK700")) {
            return "VK700" + batCap(3200, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Vodafone() {
        String mdl = getStrippedBuildModel(89);
        if (mdl.equals("785")) {
            return "Smart 4 mini" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("695")) {
            return "Smart first 6" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("889N") || mdl.equals("890N")) {
            return "Smart 4 Turbo" + batCap(1880, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("895N")) {
            return "Smart prime 6" + batCap(2500, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("975")) {
            return "Smart III" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("975N")) {
            return "Smart III NFC" + batCap(1500, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("985N")) {
            return "Smart 4 power" + batCap(3000, 1, 6, 518400, 5.0f);
        }
        if (mdl.equals("1497")) {
            return "Tab prime 6" + batCap(4600, 4, 6, 1024000, 9.6f, 7);
        }
        if (mdl.equals("SMART 4 MAX")) {
            return "Smart 4 max" + batCap(3000, 3, 6, 921600, 6.0f);
        }
        return "";
    }

    private static String getDevModel_vPhone() {
        if (getStrippedBuildModel(53).equals("I6")) {
            return "i6" + batCap(2800, 1, 6, 921600, 4.7f);
        }
        return "";
    }

    private static String getDevModel_WayteQ() {
        String mdl = getStrippedBuildModel(54);
        if (mdl.equals("TALK-5H")) {
            return "Talk 5H" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        if (mdl.equals("XTAB-100DCI-3G")) {
            return "xTAB-100dci 3G" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("XTAB-100QCR")) {
            return "xTAB-100qcr" + batCap(SOC_TI, 4, 6, 3145728, 9.7f);
        }
        if (mdl.equals("XTAB-7Q-GPS")) {
            return "xTAB 7Q GPS" + batCap(2400, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("XTAB-7X")) {
            return "xTAB 7x" + batCap(2700, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("XTAB-7X-QUAD")) {
            return "xTAB 7X Quad" + batCap(2700, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("XTAB-8Q-GPS")) {
            return "xTAB 8Q GPS" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("XTAB-9")) {
            return "xTAB 9" + batCap(5200, 4, 2, 2457600, 9.0f);
        }
        return "";
    }

    private static String getDevModel_Wexler() {
        String mdl = getStrippedBuildModel(75);
        if (mdl.equals("MOBI 7 LTE")) {
            return "Mobi 7 LTE" + batCap(3500, 4, 6, 921600, 7.0f, 7);
        }
        if (mdl.startsWith("TAB")) {
            if (mdl.equals("TAB 7D")) {
                return "Tab 7d" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB 7ID")) {
                return "Tab 7iD" + batCap(4000, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB 7IQ")) {
                return "Tab 7iQ" + batCap(3000, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB 7IS")) {
                return "Tab 7iS" + batCap(4000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("TAB 7T") || mdl.equals("TAB-7T")) {
                return "Tab 7t" + batCap(4500, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("TAB 8IQ")) {
                return "Tab 8iQ" + batCap(4000, 4, 6, 1024000, 8.0f, 7);
            }
            if (mdl.equals("TAB 8IQ+")) {
                return "Tab 8iQ+" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("TAB 8IQ OCTA")) {
                return "Tab 8iQ Octa" + batCap(4000, 4, 6, 1024000, 8.0f);
            }
            if (mdl.equals("TAB 8Q")) {
                return "Tab 8Q" + batCap(4000, 4, 6, 786432, 7.85f, 7);
            }
            if (mdl.equals("TAB 10IQ")) {
                return "Tab 10iQ" + batCap(8000, 4, 6, 1049088, 10.1f);
            }
            if (mdl.equals("TAB 10IS")) {
                return "Tab 10iS" + batCap(8000, 4, 6, 1049088, 10.1f);
            }
            if (mdl.equals("TAB 10Q")) {
                return "Tab 10Q" + batCap(6000, 4, 6, 1024000, 10.1f, 7);
            }
            if (mdl.equals("TAB 7100")) {
                return "Tab 7100" + batCap(4000, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB 7200")) {
                return "Tab 7200" + batCap(4000, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB A720")) {
                return "Tab A720" + batCap(2500, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("TAB A722")) {
                return "Tab A722" + batCap(2500, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB A740")) {
                return "Tab A740" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB A742")) {
                return "Tab A742" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB A744")) {
                return "Tab A744" + batCap(2800, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("TAB A746")) {
                return "Tab A746" + batCap(2800, 4, 6, 614400, 7.0f);
            }
            if (mdl.equals("TAB I70")) {
                return "Tab i70" + batCap(3000, 4, 6, 614400, 7.0f);
            }
        }
        if (mdl.startsWith("ULTIMA")) {
            if (mdl.equals("ULTIMA 7")) {
                return "Ultima 7" + batCap(3000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("ULTIMA 7+")) {
                return "Ultima 7+" + batCap(3000, 4, 6, 1024000, 7.0f);
            }
            if (mdl.equals("ULTIMA 7 OCTA")) {
                return "Ultima 7 Octa" + batCap(3400, 4, 6, 2304000, 7.0f, 7);
            }
            if (mdl.equals("ULTIMA 7 TWIST")) {
                return "Ultima 7 Twist" + batCap(2600, 4, 6, 1024000, 7.0f);
            }
        }
        if (mdl.startsWith("ZEN")) {
            if (mdl.equals("ZEN 4.5")) {
                return "Zen 4.5" + batCap(2000, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("ZEN 4.7")) {
                return "Zen 4.7" + batCap(1800, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("ZEN 5")) {
                return "Zen 5" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("ZEN 5+")) {
                return "Zen 5+" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
            }
        }
        return "";
    }

    private static String getDevModel_Wiko() {
        String mdl = getStrippedBuildModel(71);
        if (mdl.equals("BARRY")) {
            return "Barry" + batCap(2000, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("BIRDY 4G")) {
            return "Birdy 4G" + batCap(2000, 1, 6, 409920, 4.5f);
        }
        if (mdl.equals("BLOOM")) {
            return "Bloom" + batCap(2000, 1, 6, 384000, 4.7f);
        }
        if (mdl.equals("BLOOM 2")) {
            return "Bloom 2" + batCap(2120, 1, 1, 384000, 4.7f);
        }
        if (mdl.equals("CINK FIVE")) {
            return "Cink Five" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("CINK SLIM 2")) {
            return "Cink Slim 2" + batCap(1600, 1, 6, 384000, 4.0f, 6);
        }
        if (mdl.equals("DARKFULL")) {
            return "Darkfull" + batCap(2000, 1, 6, 2073600, 5.0f, 6);
        }
        if (mdl.equals("DARKMOON")) {
            return "Darkmoon" + batCap(1800, 1, 6, 921600, 4.7f);
        }
        if (mdl.equals("DARKNIGHT")) {
            return "Darknight" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("DARKSIDE")) {
            return "Darkside" + batCap(2600, 3, 6, 921600, 5.7f);
        }
        if (mdl.equals("GETAWAY")) {
            return "Getaway" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("GOA")) {
            return "Goa" + batCap(1300, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("HIGHWAY")) {
            return "Highway" + batCap(2350, 1, 6, 2073600, 5.0f);
        }
        if (mdl.equals("HIGHWAY 4G")) {
            return "Highway 4G" + batCap(2350, 1, 6, 2073600, 5.0f, 9);
        }
        if (mdl.equals("HIGHWAY PURE")) {
            return "Highway Pure" + batCap(2000, 1, 23, 921600, 4.8f);
        }
        if (mdl.equals("HIGHWAY PURE 4G")) {
            return "Highway Pure 4G" + batCap(2000, 1, 23, 921600, 4.8f, 7);
        }
        if (mdl.equals("HIGHWAY SIGNS")) {
            return "Highway Signs" + batCap(2000, 1, 1, 921600, 4.7f);
        }
        if (mdl.equals("HIGHWAY STAR")) {
            return "Highway Star" + batCap(2450, 1, 23, 921600, 5.0f);
        }
        if (mdl.equals("HIGHWAY STAR 4G")) {
            return "Highway Star 4G" + batCap(2450, 1, 23, 921600, 5.0f, 7);
        }
        if (mdl.equals("JIMMY")) {
            return "Jimmy" + batCap(1700, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("KITE 4G")) {
            return "Kite 4G" + batCap(1800, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("LENNY")) {
            return "Lenny" + batCap(1800, 1, 1, 409920, 5.0f, 6);
        }
        if (mdl.equals("LENNY 2")) {
            return "Lenny 2" + batCap(1800, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("RAINBOW")) {
            return "Rainbow" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RAINBOW 4G")) {
            return "Rainbow 4G" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RAINBOW JAM")) {
            return "Rainbow Jam" + batCap(2000, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RAINBOW JAM 4G")) {
            return "Rainbow Jam 4G" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RAINBOW LITE")) {
            return "Rainbow Lite" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("RAINBOW LITE 4G")) {
            return "Rainbow Lite 4G" + batCap(2000, 1, 6, 409920, 5.0f);
        }
        if (mdl.equals("RAINBOW UP")) {
            return "Rainbow Up" + batCap(2800, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("RAINBOW UP 4G")) {
            return "Rainbow Up 4G" + batCap(2800, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("RIDGE")) {
            return "Ridge" + batCap(2400, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("RIDGE 4G")) {
            return "Ridge 4G" + batCap(2400, 1, 6, 921600, 5.0f, 7);
        }
        if (mdl.equals("RIDGE FAB 4G")) {
            return "Ridge Fab 4G" + batCap(2820, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("SELFY 4G")) {
            return "Selfy 4G" + batCap(2300, 1, 23, 921600, 4.8f, 7);
        }
        if (mdl.equals("SLIDE")) {
            return "Slide" + batCap(2350, 3, 6, 518400, 5.5f);
        }
        if (mdl.equals("STAIRWAY")) {
            return "Stairway" + batCap(2000, 1, 6, 921600, 5.0f, 6);
        }
        if (mdl.equals("SUNSET")) {
            return "Sunset" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("SUNSET 2")) {
            return "Sunset 2" + batCap(1300, 1, 1, 384000, 4.0f, 6);
        }
        if (mdl.equals("WAX")) {
            return "WAX" + batCap(2000, 1, 6, 921600, 4.7f, 9);
        }
        return "";
    }

    private static String getDevModel_Xiaomi() {
        String mdl = getStrippedBuildModel(55);
        String dev = Build.DEVICE.trim().toUpperCase();
        if (mdl.equals("2013023") && dev.equals("HM2013023")) {
            return "Redmi" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("HM 1SC")) {
            return "Redmi 1S" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("HM 1STD")) {
            return "Redmi 1S TD-LTE" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("HM 1SW")) {
            return "Redmi 1S WCDMA" + batCap(2000, 1, 6, 921600, 4.7f, 6);
        }
        if (mdl.equals("HM NOTE 1C")) {
            return "Redmi Note" + batCap(3100, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("HM NOTE 1LTE")) {
            return "Redmi Note 4G" + batCap(3100, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("HM NOTE 1TD")) {
            return "Redmi Note TD-LTE" + batCap(3100, 3, 6, 921600, 5.5f, 7);
        }
        if (mdl.equals("HM NOTE 1W")) {
            return "Redmi Note WCDMA" + batCap(3100, 3, 6, 921600, 5.5f, 7);
        }
//        if (mdl.equals("MI 2A")) {
//            return "Mi 2A" + batCap(InfoPage.IID_CELL_DATAACT_SIM1, 1, 6, 921600, 4.5f, 6);
//        }
        if (mdl.equals("MI 2S")) {
            return "Mi 2S" + batCap(2000, 1, 6, 921600, 4.3f, 7);
        }
        if (mdl.equals("MI 3C")) {
            return "Mi 3" + batCap(3050, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 3TD")) {
            return "Mi 3 TD-LTE" + batCap(3050, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 3W")) {
            return "Mi 3 WCDMA" + batCap(3050, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 4C") || mdl.equals("MI-4C")) {
            return "Mi 4" + batCap(3080, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 4LTE")) {
            return "Mi 4 LTE" + batCap(3080, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 4TD")) {
            return "Mi 4 TD-LTE" + batCap(3080, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 4W")) {
            return "Mi 4 WCDMA" + batCap(3080, 1, 6, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MI 4I")) {
            return "Mi 4i" + batCap(3120, 1, 1, 2073600, 5.0f, 7);
        }
        if (mdl.equals("MIBOX_MINI")) {
            return "Mi Box Mini" + batCap(0, 9);
        }
        if (mdl.equals("MI NOTE")) {
            return "Mi Note" + batCap(3000, 3, 6, 2073600, 5.7f, 7);
        }
        if (mdl.equals("MI NOTE PLUS")) {
            return "Mi Note Plus" + batCap(3000, 3, 6, 3686400, 5.7f, 10);
        }
        if (mdl.equals("MI NOTE PRO")) {
            return "Mi Note Pro" + batCap(3000, 3, 6, 3686400, 5.7f, 10);
        }
        if (mdl.equals("MI PAD")) {
            return "Mi Pad" + batCap(6700, 4, 6, 3145728, 7.9f, 2);
        }
        if (mdl.equals("REDMI 2") || mdl.equals("HM2014811") || mdl.equals("HM2014813") || mdl.equals("2014811") || mdl.equals("2014813")) {
            return "Redmi 2" + batCap(2200, 1, 6, 921600, 4.7f, 7);
        }
        if (mdl.equals("REDMI 2A") || mdl.equals("HM 2A")) {
            return "Redmi 2A" + batCap(2200, 1, 6, 921600, 4.7f, 7);
        }
        if (mdl.equals("REDMI NOTE 2")) {
            return "Redmi Note 2" + batCap(3100, 3, 6, 921600, 5.5f, 7);
        }
        return "";
    }

    private static String getDevModel_Xolo() {
        String mdl = getStrippedBuildModel(79);
        if (mdl.equals("8X-1020")) {
            return "8X-1020" + batCap(2500, 1, 6, 921600, 5.0f);
        }
        if (mdl.startsWith("A")) {
            if (mdl.equals("A500")) {
                return "A500" + batCap(1500, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("A500 CLUB")) {
                return "A500 Club" + batCap(1400, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("A500L")) {
                return "A500L" + batCap(1500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("A500S")) {
                return "A500s" + batCap(1400, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("A500S IPS")) {
                return "A500s IPS" + batCap(1400, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("A500S LITE")) {
                return "A500s Lite" + batCap(1400, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("A510S")) {
                return "A510s" + batCap(1400, 1, 6, 409920, 4.0f, 6);
            }
            if (mdl.equals("A550S IPS")) {
                return "A550s IPS" + batCap(1400, 1, 6, 384000, 4.0f, 6);
            }
            if (mdl.equals("A600")) {
                return "A600" + batCap(1900, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("A700S")) {
                return "A700s" + batCap(1900, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("A1000S")) {
                return "A1000s" + batCap(2000, 1, 1, 409920, 5.0f, 6);
            }
            if (mdl.equals("A1010")) {
                return "A1010" + batCap(2500, 1, 6, 409920, 5.0f, 6);
            }
        }
        if (mdl.equals("BLACK")) {
            return "Black" + batCap(3200, 3, 6, 2073600, 5.5f, 7);
        }
        /*if (mdl.equals("CUBE 5.0")) {
            return "Cube 5.0" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("ERA")) {
            return "Era" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 409920, 5.0f);
        }*/
        if (mdl.equals("HIVE 8X-1000")) {
            return "Hive 8X-1000" + batCap(1920, 1, 6, 921600, 5.0f);
        }
        if (mdl.equals("LT900")) {
            return "LT900" + batCap(1810, 1, 6, 921600, 4.3f, 6);
        }
        if (mdl.equals("LT2000")) {
            return "LT2000" + batCap(2920, 3, 6, 921600, 5.5f, 7);
        }
        /*if (mdl.startsWith("O")) {
            if (mdl.equals("OMEGA 5.0")) {
                return "Omega 5.0" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("OMEGA 5.5")) {
                return "Omega 5.5" + batCap(2600, 3, 6, 921600, 5.5f);
            }
            if (mdl.equals("ONE")) {
                return "One" + batCap(1700, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("OPUS 3")) {
                return "Opus 3" + batCap(2500, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("OPUS HD")) {
                return "Opus HD" + batCap(2500, 1, 6, 921600, 4.99f);
            }
        }
        if (mdl.startsWith("P")) {
            if (mdl.equals("PLAY")) {
                return "Play" + batCap(2000, 1, 6, 921600, 4.7f, 6);
            }
            if (mdl.equals("PLAY 6X-1000")) {
                return "Play 6X-1000" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PLAY 8X-1100")) {
                return "Play 8X-1100" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("PLAY 8X-1200")) {
                return "Play 8X-1200" + batCap(2300, 1, 6, 2073600, 5.0f);
            }
            if (mdl.equals("PLAY TAB 7.0")) {
                return "Play Tab 7.0" + batCap(4000, 4, 6, 1024000, 7.0f, 1);
            }
            if (mdl.equals("PLAY TEGRA NOTE")) {
                return "Play Tegra Note" + batCap(4100, 4, 6, 1024000, 7.0f, 7);
            }
            if (mdl.equals("PRIME")) {
                return "Prime" + batCap(1800, 1, 6, 409920, 4.5f);
            }
        }
        if (mdl.startsWith("Q")) {
            if (mdl.equals("Q500")) {
                return "Q500" + batCap(1450, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("Q500S IPS")) {
                return "Q500s IPS" + batCap(1500, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("Q510S")) {
                return "Q510s" + batCap(1500, 1, 6, 307200, 4.0f);
            }
            if (mdl.equals("Q520S")) {
                return "Q520s" + batCap(1820, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("Q600")) {
                return "Q600" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("Q600S")) {
                return "Q600s" + batCap(2000, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("Q610S")) {
                return "Q610s" + batCap(1700, 1, 6, 409920, 4.5f);
            }
            if (mdl.equals("Q700")) {
                return "Q700" + batCap(2400, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("Q700 CLUB")) {
                return "Q700 Club" + batCap(2000, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("Q700I")) {
                return "Q700i" + batCap(2400, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("Q700S")) {
                return "Q700s" + batCap(1800, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("Q700S PLUS")) {
                return "Q700s plus" + batCap(1800, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("Q710S")) {
                return "Q710s" + batCap(2000, 1, 6, 518400, 4.5f, 6);
            }
            if (mdl.equals("Q800")) {
                return "Q800" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("Q800 X-EDITION")) {
                return "Q800 X-Edition" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 518400, 4.5f);
            }
            if (mdl.equals("Q900")) {
                return "Q900" + batCap(1800, 1, 1, 921600, 4.7f, 6);
            }
            if (mdl.equals("Q900S")) {
                return "Q900s" + batCap(1800, 1, 6, 518400, 4.7f);
            }
            if (mdl.equals("Q900S PLUS")) {
                return "Q900s Plus" + batCap(1800, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("Q900T")) {
                return "Q900T" + batCap(1800, 1, 6, 921600, 4.7f);
            }
            if (mdl.equals("Q1000")) {
                return "Q1000" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1000 OPUS")) {
                return "Q1000 Opus" + batCap(2000, 1, 6, 409920, 5.0f, 6);
            }
            if (mdl.equals("Q1000 OPUS2")) {
                return "Q1000 Opus2" + batCap(2000, 1, 6, 518400, 5.0f);
            }
            if (mdl.equals("Q1000S")) {
                return "Q1000s" + batCap(2500, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1000S PLUS")) {
                return "Q1000s plus" + batCap(3000, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("Q1001")) {
                return "Q1001" + batCap(2000, 1, 6, 409920, 5.0f);
            }
            if (mdl.equals("Q1010")) {
                return "Q1010" + batCap(2250, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1010I")) {
                return "Q1010i" + batCap(2250, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1011")) {
                return "Q1011" + batCap(2250, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1020")) {
                return "Q1020" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("Q1100")) {
                return "Q1100" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("Q1200")) {
                return "Q1200" + batCap(2000, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("Q2000")) {
                return "Q2000" + batCap(2600, 3, 6, 921600, 5.5f, 6);
            }
            if (mdl.equals("Q2000L")) {
                return "Q2000L" + batCap(2500, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("Q2100")) {
                return "Q2100" + batCap(2800, 3, 6, 921600, 5.5f, 6);
            }
            if (mdl.equals("Q2500")) {
                return "Q2500" + batCap(3000, 3, 6, 921600, 6.0f, 6);
            }
            if (mdl.equals("Q3000")) {
                return "Q3000" + batCap(4000, 3, 6, 2073600, 5.7f, 6);
            }
        }*/
        if (mdl.equals("TAB")) {
            return "Tab" + batCap(4000, 4, 6, 786432, 8.0f);
        }
        if (mdl.equals("X500")) {
            return "X500" + batCap(1500, 1, 6, 153600, 3.5f, 6);
        }
        if (mdl.equals("X910")) {
            return "X910" + batCap(2000, 1, 6, 518400, 4.3f, 6);
        }
        if (mdl.equals("X1000")) {
            return "X1000" + batCap(1900, 1, 1, 921600, 4.7f, 6);
        }
        return "";
    }

    private static String getDevModel_Yarvik() {
        String mdl = getStrippedBuildModel(56);
        if (mdl.equals("LUNA TAB07-100")) {
            return "Luna Tab07-100" + batCap(2500, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB07-101")) {
            return "Luna Tab07-101" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB07-150")) {
            return "Luna Tab07-150" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB07-151")) {
            return "Luna Tab07-151" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB07-152")) {
            return "Luna Tab07-152" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB09-100")) {
            return "Luna Tab09-100" + batCap(4000, 4, 1, 384000, 9.0f);
        }
        if (mdl.equals("LUNA TAB10-150")) {
            return "Luna Tab10-150" + batCap(5200, 4, 1, 614400, 10.0f);
        }
        if (mdl.equals("LUNA TAB274EUK")) {
            return "Luna TAB274EUK" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("LUNA TAB374EUK")) {
            return "Luna TAB374EUK" + batCap(4000, 4, 1, 480000, 8.0f);
        }
        if (mdl.equals("LUNA TAB474EUK")) {
            return "Luna TAB474EUK" + batCap(6000, 4, 1, 614400, 10.0f);
        }
        if (mdl.equals("NOBLE TAB07-400")) {
            return "Noble Tab07-400" + batCap(2250, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("NOBLE TAB07-485")) {
            return "Noble Tab07-485" + batCap(4700, 4, 1, 786432, 7.85f);
        }
        if (mdl.equals("NOBLE TAB09-410")) {
            return "Noble Tab09-410" + batCap(8000, 4, 1, 3145728, 9.7f);
        }
        if (mdl.equals("NOBLE TAB10-400")) {
            return "Noble Tab10-400" + batCap(5500, 4, 1, 614400, 10.0f);
        }
        if (mdl.equals("NOBLE TAB10-410")) {
            return "Noble Tab10-410" + batCap(7000, 4, 1, 1024000, 10.1f);
        }
        if (mdl.equals("XENTA TAB07-200")) {
            return "Xenta Tab07-200" + batCap(3400, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("XENTA TAB07-210")) {
            return "Xenta Tab07-210" + batCap(2500, 4, 1, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_YonesToptech() {
        String mdl = getStrippedBuildModel(DEVMANUF_YONESTOPTECH);
        if (mdl.equals("BD1005")) {
            return "BD1005" + batCap(4000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("BD4301")) {
            return "BD4301" + batCap(1600, 4, 1, 384000, 4.3f);
        }
        if (mdl.equals("BD7013")) {
            return "BD7013" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("BD7016")) {
            return "BD7016" + batCap(2800, 4, 1, 320000, 7.0f);
        }
        if (mdl.equals("BD7016I")) {
            return "BD7016I" + batCap(0, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("BD9002")) {
            return "BD9002" + batCap(4000, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("BS1008I")) {
            return "BS1008I" + batCap(4000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("BS1015R")) {
            return "BS1015R" + batCap(4000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("BS1078")) {
            return "BS1078" + batCap(6800, 4, 1, 614400, 10.0f);
        }
        if (mdl.equals("BS7013")) {
            return "BS7013" + batCap(3000, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("BT1008I")) {
            return "BT1008I" + batCap(0, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("BT1077")) {
            return "BT1077" + batCap(0, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("BT7013")) {
            return "BT7013" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("IT7007")) {
            return "IT7007" + batCap(2800, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("KID4")) {
            return "Kid4" + batCap(1600, 4, 1, 384000, 4.3f);
        }
        if (mdl.equals("KID7")) {
            return "Kid7" + batCap(2200, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("KID9")) {
            return "Kid9" + batCap(4000, 4, 1, 614400, 9.0f);
        }
        if (mdl.equals("MA1000")) {
            return "MA1000" + batCap(0, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("MD6031I")) {
            return "MD6031I" + batCap(2600, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("MD6531I")) {
            return "MD6531I" + batCap(3000, 3, 1, 614400, 6.95f);
        }
        if (mdl.equals("MD7033")) {
            return "MD7033" + batCap(2800, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("MD9031")) {
            return "MD9031" + batCap(4000, 4);
        }
        if (mdl.equals("MD9730")) {
            return "MD9730" + batCap(4000, 4, 1, 786432, 9.7f);
        }
        if (mdl.equals("MO7038")) {
            return "MO7038" + batCap(3000, 4, 6, 2304000, 7.0f);
        }
        if (mdl.equals("MQ1030I")) {
            return "MQ1030I" + batCap(6000, 4, 6, 1024000, 10.0f);
        }
        if (mdl.equals("MQ6033I")) {
            return "MQ6033I" + batCap(0, 3, 6, 518400, 6.0f);
        }
        if (mdl.equals("MQ7031I")) {
            return "MQ7031I" + batCap(0, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("MQ7036R")) {
            return "MQ7036R" + batCap(2800, 4, 6, 1024000, 7.0f);
        }
        if (mdl.equals("MQ8031I")) {
            return "MQ8031I" + batCap(0, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("MQ9631I")) {
            return "MQ9631I" + batCap(0, 4, 6, 1024000, 9.6f);
        }
        if (mdl.equals("MS1005")) {
            return "MS1005" + batCap(0, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("MT1031")) {
            return "MT1031" + batCap(4000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("NF1001I")) {
            return "NF1001I" + batCap(0, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("NF1038I")) {
            return "NF1038I" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("NF1108I")) {
            return "NF1108I" + batCap(0, 4, 6, 2073600, 11.6f);
        }
        if (mdl.equals("NF8001I")) {
            return "NF8001I" + batCap(4200, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NF8902I")) {
            return "NF8902I" + batCap(5600, 4, 6, 1024000, 8.95f);
        }
        if (mdl.equals("NG1007I")) {
            return "NG1007I" + batCap(6000, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("NG7013I")) {
            return "NG7013I" + batCap(0, 4, 6, 614400, 7.0f);
        }
        if (mdl.equals("NG8001I")) {
            return "NG8001I" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NG8002I")) {
            return "NG8002I" + batCap(4500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NG8007I")) {
            return "NG8007I" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NG8033I")) {
            return "NG8033I" + batCap(3500, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NG8036I")) {
            return "NG8036I" + batCap(3700, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("NG8038I")) {
            return "NG8038I" + batCap(4000, 4, 6, 1024000, 8.0f);
        }
        if (mdl.equals("PC7")) {
            return "PC7" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        if (mdl.equals("PC101")) {
            return "PC101" + batCap(4000, 4, 1, 614400, 10.1f);
        }
        if (mdl.equals("PC133")) {
            return "PC133" + batCap(6000, 4, 6, 1024000, 13.3f);
        }
        if (mdl.equals("QQ1041I")) {
            return "QQ1041I" + batCap(0, 4, 6, 1024000, 10.1f);
        }
        if (mdl.equals("QQ7041")) {
            return "QQ7041" + batCap(0, 4, 1, 614400, 7.0f);
        }
        if (mdl.equals("RUGGED7")) {
            return "Rugged7" + batCap(SOC_STE, 4, 6, 614400, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Yota() {
        String mdl = getStrippedBuildModel(57);
        if (mdl.equals("C9660")) {
            return "YotaPhone" + batCap(1800, 1, 6, 921600, 4.3f, 6);
        }
        if (mdl.equals("YD201")) {
            return "YotaPhone 2" + batCap(2500, 1, 23, 2073600, 5.0f, 7);
        }
        return "";
    }

    private static String getDevModel_Yu() {
        if (getStrippedBuildModel(DEVMANUF_YU).equals("AO5510")) {
            return "Yureka AO5510" + batCap(2500, 3, 6, 921600, 5.5f);
        }
        return "";
    }

    private static String getDevModel_Yuntab() {
        if (getStrippedBuildModel(DEVMANUF_YUNTAB).equals("Q88")) {
            return "Q88" + batCap(2200, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Zeepad() {
        if (getStrippedBuildModel(124).equals("7DRK")) {
            return "7DRK" + batCap(3000, 4, 1, 384000, 7.0f);
        }
        return "";
    }

    private static String getDevModel_Zidoo() {
        if (getStrippedBuildModel(86).equals("X9")) {
            return "X9" + batCap(0, 9);
        }
        return "";
    }

    private static String getDevModel_Zifro() {
        String mdl = getStrippedBuildModel(84);
        if (mdl.equals("ZS-6500")) {
            return "Vivid ZS-6500" + batCap(3170, 3, 6, 2073600, 6.5f);
        }
        if (mdl.equals("ZT-7800")) {
            return "ZT-7800" + batCap(5500, 4, 6, 786432, 7.85f);
        }
        return "";
    }

    private static String getDevModel_Zonda() {
        /*if (getStrippedBuildModel(DEVMANUF_ZONDA).equals("ZA705")) {
            return "ZA705" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
        }*/
        return "";
    }

    private static String getDevModel_Zopo() {
        String mdl = getStrippedBuildModel(58);
        if (mdl.equals("C3")) {
            return "C3" + batCap(2000, 1, 1, 2073600, 5.0f, 6);
        }
        if (mdl.equals("MAGIC")) {
            return "ZP920 Magic" + batCap(2300, 1, 1, 2073600, 5.0f, 7);
        }
        if (mdl.equals("FOCUS")) {
            return "ZP720 Focus" + batCap(2330, 3, 6, 921600, 5.3f, 7);
        }
        if (mdl.equals("W100")) {
            return "W100";
        }
//        if (mdl.startsWith("ZP")) {
//            if (mdl.equals("ZP100")) {
//                return "ZP100 Pilot" + batCap(1650, 1, 1, 518400, 4.3f);
//            }
//            if (mdl.equals("ZP200")) {
//                return "ZP200 Shining" + batCap(1250, 1, 4, 518400, 4.3f);
//            }
//            if (mdl.equals("ZP200+")) {
//                return "ZP200+ Shining Plus" + batCap(1250, 1, 4, 518400, 4.3f);
//            }
//            if (mdl.equals("ZP300")) {
//                return "ZP300 Field" + batCap(1800, 1, 1, 921600, 4.5f);
//            }
//            if (mdl.equals("ZP300+")) {
//                return "ZP300+ Field" + batCap(1800, 1, 6, 921600, 4.5f);
//            }
//            if (mdl.equals("ZP320")) {
//                return "ZP320" + batCap(2300, 1, 6, 518400, 5.0f);
//            }
//            if (mdl.equals("ZP320+")) {
//                return "ZP320+" + batCap(2300, 1, 6, 518400, 5.0f);
//            }
//            if (mdl.equals("ZP330")) {
//                return "ZP330 Color C" + batCap(1700, 1, 6, 409920, 4.5f, 7);
//            }
//            if (mdl.equals("ZP350")) {
//                return "ZP350 Color E" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 7);
//            }
//            if (mdl.equals("ZP3X")) {
//                return "ZP3X" + batCap(2700, 3, 6, 2073600, 5.5f);
//            }
//            if (mdl.equals("ZP500")) {
//                return "ZP500 Libero" + batCap(1300, 1, 1, 384000, 4.0f);
//            }
//            if (mdl.equals("ZP500+")) {
//                return "ZP500+ Libero" + batCap(1300, 1, 1, 409920, 4.0f);
//            }
//            if (mdl.equals("ZP520")) {
//                return "ZP520" + batCap(2400, 3, 6, 518400, 5.5f);
//            }
//            if (mdl.equals("ZP520+")) {
//                return "ZP520+" + batCap(2400, 3, 6, 518400, 5.5f);
//            }
//            if (mdl.equals("ZP530")) {
//                return "ZP530 Touch" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f, 7);
//            }
//            if (mdl.equals("ZP580")) {
//                return "ZP580" + batCap(1700, 1, 1, 518400, 4.5f, 6);
//            }
//            if (mdl.equals("ZP590")) {
//                return "ZP590" + batCap(1700, 1, 1, 518400, 4.5f);
//            }
//            if (mdl.equals("ZP600")) {
//                return "ZP600" + batCap(1640, 1, 1, 518400, 4.3f);
//            }
//            if (mdl.equals("ZP600+")) {
//                return "ZP600+ Infinity" + batCap(1640, 1, 1, 518400, 4.3f, 7);
//            }
//            if (mdl.equals("ZP700")) {
//                return "ZP700 Cuppy" + batCap(1750, 1, 6, 518400, 4.7f, 6);
//            }
//            if (mdl.equals("ZP720")) {
//                return "ZP720 Focus" + batCap(2330, 3, 6, 921600, 5.3f, 7);
//            }
//            if (mdl.equals("ZP780")) {
//                return "ZP780" + batCap(1800, 1, 1, 518400, 5.0f, 6);
//            }
//            if (mdl.equals("ZP780+")) {
//                return "ZP780+" + batCap(1800, 1, 6, 518400, 5.0f);
//            }
//            if (mdl.equals("ZP800")) {
//                return "ZP800 Libero HD" + batCap(2000, 1, 6, 518400, 5.0f);
//            }
//            if (mdl.equals("ZP800H")) {
//                return "ZP800H Libero HD" + batCap(2000, 1, 6, 921600, 5.0f, 6);
//            }
//            if (mdl.equals("ZP810")) {
//                return "ZP810" + batCap(2000, 1, 6, 921600, 5.0f);
//            }
//            if (mdl.equals("ZP820")) {
//                return "ZP820 Raiden" + batCap(2000, 1, 6, 518400, 5.0f, 6);
//            }
//            if (mdl.equals("ZP890")) {
//                return "ZP890";
//            }
//            if (mdl.equals("ZP890+")) {
//                return "ZP890+";
//            }
//            if (mdl.equals("ZP900")) {
//                return "ZP900 Leader" + batCap(2300, 3, 6, 518400, 5.3f);
//            }
//            if (mdl.equals("ZP910")) {
//                return "ZP910 Leader" + batCap(2300, 3, 6, 518400, 5.3f, 6);
//            }
//            if (mdl.equals("ZP920")) {
//                return "ZP920 Magic" + batCap(2300, 1, 1, 2073600, 5.2f, 7);
//            }
//            if (mdl.equals("ZP951")) {
//                return "ZP951 Speed 7" + batCap(2500, 1, 6, 2073600, 5.0f);
//            }
//            if (mdl.equals("ZP952")) {
//                return "ZP952 Speed 7+" + batCap(3000, 3, 6, 2073600, 5.5f);
//            }
//            if (mdl.equals("ZP980")) {
//                return "ZP980" + batCap(2000, 1, 1, 2073600, 5.0f, 6);
//            }
//            if (mdl.equals("ZP980+")) {
//                return "ZP980+" + batCap(2000, 1, 1, 2073600, 5.0f);
//            }
//            if (mdl.equals("ZP990")) {
//                return "ZP990 Captain S" + batCap(3000, 3, 1, 2073600, 6.0f, 6);
//            }
//            if (mdl.equals("ZP990+")) {
//                return "ZP990+" + batCap(3000, 3, 6, 2073600, 5.95f, 7);
//            }
//            if (mdl.equals("ZP998")) {
//                return "ZP998" + batCap(2400, 3, 6, 2073600, 5.5f, 7);
//            }
//            if (mdl.equals("ZP999")) {
//                return "ZP999 Lion Heart" + batCap(2700, 3, 6, 2073600, 5.5f, 7);
//            }
//            if (mdl.equals("ZP1000")) {
//                return "ZP1000" + batCap(2000, 1, 6, 921600, 5.0f);
//            }
//            if (mdl.equals("ZP1000S")) {
//                return "ZP1000S" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 6, 921600, 5.0f);
//            }
//        }
        return "";
    }

    private static String getDevModel_ZTE() {
        String mdl = getStrippedBuildModel(59);
        if (mdl.equals("AMAZING A5S")) {
            return "Amazing A5S" + batCap(1850, 1, 1, 409920, 4.5f);
        }
        if (mdl.equals("AXON")) {
            return "Axon" + batCap(3000, 3, 6, 2073600, 5.5f, 7);
        }
//        if (mdl.startsWith("BLADE")) {
//            if (mdl.equals("BLADE")) {
//                return "Blade" + batCap(1250, 1, 1, 384000, 3.5f);
//            }
//            if (mdl.equals("BLADE C")) {
//                return "Blade C" + batCap(1600, 1, 1, 384000, 4.0f, 6);
//            }
//            if (mdl.equals("BLADE G")) {
//                return "Blade G" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 384000, 4.0f, 6);
//            }
//            if (mdl.equals("BLADE G LUX")) {
//                return "Blade G Lux" + batCap(1850, 1, 1, 409920, 4.5f, 6);
//            }
//            if (mdl.equals("BLADE G2")) {
//                return "Blade G2" + batCap(2000, 1, 6, 409920, 4.5f);
//            }
//            if (mdl.equals("BLADE II")) {
//                return "Blade II" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 24, 384000, 3.5f);
//            }
//            if (mdl.equals("BLADE III")) {
//                return "Blade III" + batCap(1600, 1, 1, 384000, 4.0f);
//            }
//            if (mdl.equals("BLADE III PRO")) {
//                return "Blade III Pro" + batCap(1600, 1, 1, 384000, 4.0f);
//            }
//            if (mdl.equals("BLADE L2")) {
//                return "Blade L2" + batCap(2000, 1, 1, 409920, 5.0f, 6);
//            }
//            if (mdl.equals("BLADE L3")) {
//                return "Blade L3" + batCap(2000, 1, 1, 409920, 5.0f, 6);
//            }
//            if (mdl.equals("BLADE Q")) {
//                return "Blade Q" + batCap(1800, 1, 6, 409920, 4.5f, 6);
//            }
//            if (mdl.equals("BLADE Q+")) {
//                return "Blade Q+" + batCap(2000, 1, 1, 409920, 4.5f, 7);
//            }
//            if (mdl.equals("BLADE Q LUX 4G")) {
//                return "Blade Q Lux 4G" + batCap(2200, 1, 6, 409920, 4.5f, 7);
//            }
//            if (mdl.equals("BLADE Q MAXI")) {
//                return "Blade Q Maxi" + batCap(2000, 1, 6, 409920, 5.0f, 6);
//            }
//            if (mdl.equals("BLADE Q MINI")) {
//                return "Blade Q Mini" + batCap(1500, 1, 6, 384000, 4.0f, 6);
//            }
//            if (mdl.equals("BLADE S6")) {
//                return "Blade S6" + batCap(2400, 1, 6, 921600, 5.0f, 7);
//            }
//            if (mdl.equals("BLADE S6 LUX")) {
//                return "Blade S6 Lux" + batCap(3000, 3, 13, 2073600, 5.5f, 7);
//            }
//            if (mdl.equals("BLADE S6 PLUS")) {
//                return "Blade S6 Plus" + batCap(3000, 3, 13, 921600, 5.5f, 7);
//            }
//            if (mdl.equals("BLADE S6 TD-LTE")) {
//                return "Blade S6 TD-LTE" + batCap(2400, 1, 6, 921600, 5.0f, 7);
//            }
//            if (mdl.equals("BLADE S7")) {
//                return "Blade S7" + batCap(2500, 1, 6, 2073600, 5.0f, 7);
//            }
//            if (mdl.equals("BLADE V")) {
//                return "Blade V" + batCap(1800, 1, 1, 384000, 4.0f);
//            }
//            if (mdl.equals("BLADE V6")) {
//                return "Blade V6" + batCap(2200, 1, 6, 921600, 5.0f, 7);
//            }
//            if (mdl.equals("BLADE VEC 3G")) {
//                return "Blade Vec 3G" + batCap(2300, 1, 1, 921600, 5.0f);
//            }
//            if (mdl.equals("BLADE VEC 4G")) {
//                return "Blade Vec 4G" + batCap(2300, 1, 1, 921600, 5.0f);
//            }
//            if (mdl.equals("BLADE VEC PRO")) {
//                return "Blade Vec Pro" + batCap(2200, 1, 6, 921600, 5.0f);
//            }
//        }
        if (mdl.equals("D930")) {
            return "Chorus" + batCap(1000, 1, 1, 96000, 3.2f);
        }
        if (mdl.startsWith("GRAND")) {
            if (mdl.equals("GRAND MEMO")) {
                return "Grand Memo" + batCap(3200, 3, 1, 921600, 5.7f, 7);
            }
            if (mdl.equals("GRAND MEMO LTE")) {
                return "Grand Memo LTE" + batCap(3200, 3, 1, 921600, 5.7f);
            }
            if (mdl.equals("GRAND MEMO TD-LTE")) {
                return "Grand Memo TD-LTE" + batCap(3200, 3, 1, 921600, 5.7f, 1);
            }
            if (mdl.equals("GRAND MEMO II LTE")) {
                return "Grand Memo II LTE" + batCap(3200, 3, 6, 921600, 6.0f);
            }
            if (mdl.equals("GRAND S")) {
                return "Grand S" + batCap(1780, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("GRAND S II DUAL")) {
                return "Grand S II Dual" + batCap(3000, 3, 1, 2073600, 5.5f, 7);
            }
            if (mdl.equals("GRAND S II LTE")) {
                return "Grand S II LTE" + batCap(3100, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("GRAND S II TD")) {
                return "Grand S II TD" + batCap(3000, 3, 1, 2073600, 5.5f, 7);
            }
            if (mdl.equals("GRAND S FLEX")) {
                return "Grand S Flex" + batCap(2300, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("GRAND S3")) {
                return "Grand S3" + batCap(3100, 3, 6, 2073600, 5.5f, 7);
            }
            if (mdl.equals("GRAND X")) {
                return "Grand X" + batCap(1600, 1, 6, 518400, 4.3f, 6);
            }
            if (mdl.equals("GRAND X 2")) {
                return "Grand X 2" + batCap(2480, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("GRAND X IN")) {
                return "Grand X In" + batCap(1650, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("GRAND X MAX")) {
                return "Grand X Max" + batCap(3200, 3, 1, 921600, 6.0f, 6);
            }
            if (mdl.equals("GRAND X MAX+")) {
                return "Grand X Max+" + batCap(3200, 3, 1, 921600, 6.0f);
            }
            if (mdl.equals("GRAND X PLUS")) {
                return "Grand X Plus" + batCap(2300, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("GRAND X PRO")) {
                return "Grand X Pro" + batCap(2000, 1, 1, 921600, 4.5f);
            }
            if (mdl.equals("GRAND X QUAD")) {
                return "Grand X Quad" + batCap(2500, 1, 1, 921600, 5.0f, 6);
            }
            if (mdl.equals("GRAND X2 IN")) {
                return "Grand X2 In" + batCap(2000, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("GRAND XMAX")) {
                return "Grand Xmax" + batCap(3200, 3, 1, 921600, 6.0f, 6);
            }
        }
        if (mdl.equals("IMPERIAL II")) {
            return "Imperial II" + batCap(2300, 1, 1, 518400, 5.0f);
        }
        if (mdl.equals("KIS II")) {
            return "Kis II" + batCap(1400, 1, 1, 153600, 3.5f);
        }
        if (mdl.equals("KIS II MAX")) {
            return "Kis II Max" + batCap(1400, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("KIS 3")) {
            return "Kis 3" + batCap(1400, 1, 6, 384000, 4.0f);
        }
        if (mdl.equals("KIS 3 MAX")) {
            return "Kis 3 Max" + batCap(1850, 1, 1, 409920, 4.5f, 6);
        }
        if (mdl.equals("MS4A")) {
            return "Megafon 4G Turbo" + batCap(1780, 1, 6, 921600, 4.5f);
        }
        if (mdl.startsWith("N")) {
            if (mdl.equals("N721")) {
                return "N721" + batCap(1100, 1, 1, 76800, 2.8f);
            }
            if (mdl.equals("N800")) {
                return "Awe" + batCap(1650, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("N810")) {
                return "Reef" + batCap(1650, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("N850")) {
                return "Fury" + batCap(1500, 1, 6, 153600, 3.5f);
            }
            if (mdl.equals("N850L")) {
                return "Director" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("N860")) {
                return "Warp" + batCap(1600, 1, 1, 384000, 4.3f);
            }
            if (mdl.equals("N861")) {
                return "Warp Sequent" + batCap(1650, 1, 1, 518400, 4.3f, 6);
            }
            if (mdl.equals("N880E")) {
                return "N880E" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("N910")) {
                return "Anthem 4G" + batCap(1780, 1, 1, 384000, 4.3f, 6);
            }
            if (mdl.equals("N5620")) {
                return "Boost Max" + batCap(3200, 3, 6, 921600, 5.7f, 6);
            }
            if (mdl.equals("N8000")) {
                return "Engage LT/MT" + batCap(1900, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("N9100")) {
                return "Force" + batCap(1730, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("N9101")) {
                return "Imperial" + batCap(2500, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("N9120")) {
                return "Avid 4G" + batCap(1735, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("N9130")) {
                return "Speed" + batCap(2000, 1, 1, 518400, 4.5f, 7);
            }
            if (mdl.equals("N9500")) {
                return "Flash" + batCap(1780, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("N9510")) {
                return "Warp 4G" + batCap(2070, 1, 6, 921600, 4.5f, 6);
            }
            if (mdl.equals("N9511")) {
                return "Source" + batCap(2070, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("N9515")) {
                return "Warp Sync" + batCap(2300, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("N9520")) {
                return "Max" + batCap(3200, 3, 6, 921600, 5.7f);
            }
            if (mdl.equals("N9810")) {
                return "Vital" + batCap(2500, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("N9835")) {
                return "Grand S Pro" + batCap(2300, 1, 6, 921600, 5.0f, 7);
            }
            if (mdl.equals("NX403A")) {
                return "Nubia Z5S mini" + batCap(2000, 1, 5, 921600, 4.7f, 7);
            }
            if (mdl.equals("NX405H")) {
                return "Nubia Z5S mini LTE" + batCap(2000, 1, 5, 921600, 4.7f);
            }
            if (mdl.equals("NX501")) {
                return "Nubia Z5" + batCap(2300, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("NX503A")) {
                return "Nubia Z5S" + batCap(2300, 1, 5, 2073600, 5.0f, 7);
            }
            if (mdl.equals("NX505J")) {
                return "Nubia Z7 Max" + batCap(3100, 3, 1, 2073600, 5.5f, 7);
            }
            if (mdl.equals("NX506J")) {
                return "Nubia Z7" + batCap(3000, 3, 1, 3686400, 5.5f, 7);
            }
            if (mdl.equals("NX507J")) {
                return "Nubia Z7 mini" + batCap(2300, 1, 1, 2073600, 5.0f, 7);
            }
            if (mdl.equals("NX508J")) {
                return "Nubia Z9" + batCap(2900, 1, 6, 2073600, 5.2f, 10);
            }
            if (mdl.equals("NX510J") || mdl.equals("NX512J")) {
                return "Nubia Z9 Max" + batCap(3100, 3, 1, 2073600, 5.5f, 10);
            }
            if (mdl.equals("NX511J")) {
                return "Nubia Z9 mini" + batCap(2300, 1, 1, 2073600, 5.0f, 7);
            }
        }
        if (mdl.equals("PF100")) {
            return "PF100" + batCap(0, 4, 1, 983040, 10.1f);
        }
        if (mdl.equals("PF200")) {
            return "PF200" + batCap(0, 1, 1, 518400, 4.3f);
        }
        if (mdl.equals("Q207T")) {
            return "Q207T" + batCap(0, 1, 1, 921600, 5.0f);
        }
        if (mdl.equals("S221")) {
            return "Grand S II TD" + batCap(3000, 3, 1, 2073600, 5.5f, 7);
        }
        if (mdl.equals("S252")) {
            return "Grand S II Dual" + batCap(3000, 3, 1, 2073600, 5.5f, 7);
        }
        if (mdl.equals("S291")) {
            return "Grand S II" + batCap(3100, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("2004")) {
            return "Grand S3" + batCap(3100, 3, 6, 2073600, 5.5f, 7);
        }
        if (mdl.equals("SKATE")) {
            return "Skate" + batCap(1400, 1, 1, 384000, 4.3f);
        }
        if (mdl.equals("SKATE ACQUA")) {
            return "Skate Acqua" + batCap(1600, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("T82")) {
            return "Grand X LTE" + batCap(1900, 1, 1, 518400, 4.3f);
        }
        if (mdl.equals("T98")) {
            return "T98" + batCap(0, 4, 1, 983040, 7.0f);
        }
        if (mdl.equals("U880E")) {
            return "U880E" + batCap(0, 1, 1, 384000, 4.0f);
        }
        if (mdl.equals("U889")) {
            return "U889" + batCap(2000, 1, 1, 409920, 5.0f);
        }
        if (mdl.equals("U895")) {
            return "Grand Era" + batCap(1800, 1, 1, 921600, 4.5f, 6);
        }
        if (mdl.equals("U900")) {
            return "U900" + batCap(0, 1, 1, 384000, 3.5f);
        }
        if (mdl.equals("U988S")) {
            return "Geek" + batCap(2300, 1, 6, 921600, 5.0f, 7);
        }
        /*if (mdl.startsWith("V")) {
            if (mdl.equals("V9")) {
                return "V9" + batCap(3400, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("V9+")) {
                return "V9+" + batCap(0, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("V9A")) {
                return "Light Tab 2" + batCap(3400, 4, 1, 614400, 7.0f);
            }
            if (mdl.equals("V9C")) {
                return "Light Tab" + batCap(3400, 4, 1, 384000, 7.0f);
            }
            if (mdl.equals("V9S")) {
                return "Light Tab 3" + batCap(4000, 4, 1, 1024000, 7.0f);
            }
            if (mdl.equals("V55")) {
                return "Optik" + batCap(4000, 4, 1, 1024000, 7.0f);
            }
            if (mdl.equals("V72C")) {
                return "Optik 2" + batCap(4000, 4, 1, 614400, 7.0f, 6);
            }
            if (mdl.equals("V81")) {
                return "V81" + batCap(3700, 4, 1, 786432, 8.0f);
            }
            if (mdl.equals("V96")) {
                return "V96" + batCap(0, 4, 1, 1024000, 10.1f);
            }
            if (mdl.equals("V768")) {
                return "Concord" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("V788")) {
                return "Kis" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("V790")) {
                return "Kis III" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("V807")) {
                return "Blade C" + batCap(1600, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("V811W")) {
                return "Kis 3" + batCap(1400, 1, 6, 384000, 4.0f);
            }
            if (mdl.equals("V815W")) {
                return "Blade G" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("V821")) {
                return "V821" + batCap(0, 1, 1, 76800, 2.3f);
            }
            if (mdl.equals("V880+")) {
                return "Blade II" + batCap(InfoPage.IID_TEMPSENSOR_HWMON0, 1, 24, 384000, 3.5f);
            }
            if (mdl.equals("V880E")) {
                return "V880E" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("V880G")) {
                return "Blade G" + batCap(2000, 1, 6, 409920, 4.5f, 6);
            }
            if (mdl.equals("V887")) {
                return "V887" + batCap(2000, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("V889M")) {
                return "V889M" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("V970") || mdl.equals("V970M")) {
                return "Grand X" + batCap(1600, 1, 6, 518400, 4.3f, 6);
            }
            if (mdl.equals("V975")) {
                return "Geek" + batCap(2300, 1, 6, 921600, 5.0f, 6);
            }
            if (mdl.equals("V983")) {
                return "Grand X Pro" + batCap(2000, 1, 1, 921600, 4.5f);
            }
            if (mdl.equals("V987")) {
                return "Grand X Quad" + batCap(2500, 1, 1, 921600, 5.0f, 6);
            }
            if (mdl.equals("V988")) {
                return "Grand S" + batCap(1780, 1, 6, 2073600, 5.0f, 6);
            }
            if (mdl.equals("V8000")) {
                return "Engage" + batCap(1900, 1, 1, 384000, 5.0f);
            }
            if (mdl.equals("V9180")) {
                return "V5" + batCap(2400, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("V9815")) {
                return "Grand Memo" + batCap(3200, 3, 1, 921600, 5.7f, 7);
            }
        }
        if (mdl.startsWith("X")) {
            if (mdl.equals("X500")) {
                return "Score" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("X500M")) {
                return "Score M" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("X501")) {
                return "Groove" + batCap(1500, 1, 1, 153600, 3.2f, 5);
            }
            if (mdl.equals("X9180")) {
                return "V5" + batCap(2400, 1, 6, 921600, 5.0f);
            }
        }
        if (mdl.startsWith("Z")) {
            if (mdl.equals("Z660G")) {
                return "Whirl" + batCap(1300, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z665C")) {
                return "Valet" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z667")) {
                return "Prelude 2" + batCap(1500, 1, 1, 153600, 3.5f, 6);
            }
            if (mdl.equals("Z730")) {
                return "Concord II" + batCap(1820, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("Z740")) {
                return "Radiant" + batCap(1735, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("Z740G")) {
                return "Sonata 4G" + batCap(1785, 1, 1, 384000, 4.0f, 6);
            }
            if (mdl.equals("Z750C")) {
                return "Savvy" + batCap(1600, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("Z755")) {
                return "Sonata 2" + batCap(1650, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("Z768G")) {
                return "Midnight" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z777")) {
                return "Grand X" + batCap(2300, 1, 1, 518400, 5.0f, 6);
            }
            if (mdl.equals("Z787")) {
                return "Grand X Max" + batCap(3200, 3, 1, 921600, 6.0f, 6);
            }
            if (mdl.equals("Z788G")) {
                return "Illustra" + batCap(1400, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z795G")) {
                return "Solar" + batCap(2070, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("Z796C")) {
                return "Majesty" + batCap(2000, 1, 1, 409920, 4.5f);
            }
            if (mdl.equals("Z797C")) {
                return "Quartz" + batCap(3400, 3, 6, 518400, 5.5f);
            }
            if (mdl.equals("Z812")) {
                return "Maven" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.5f, 7);
            }
            if (mdl.equals("Z813")) {
                return "Overture 2" + batCap(RemoteMediaPlayer.STATUS_FAILED, 1, 1, 409920, 4.5f, 7);
            }
            if (mdl.equals("Z820")) {
                return "Obsidian" + batCap(1980, 1, 1, 409920, 4.5f, 7);
            }
            if (mdl.equals("Z826")) {
                return "Grand X Plus" + batCap(2300, 1, 6, 921600, 5.0f);
            }
            if (mdl.equals("Z830")) {
                return "Compel" + batCap(1820, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("Z930L")) {
                return "Unico LTE" + batCap(2070, 1, 1, 518400, 4.5f, 6);
            }
            if (mdl.equals("Z932L")) {
                return "Rapido LTE" + batCap(2070, 1, 1, 921600, 4.5f, 6);
            }
            if (mdl.equals("Z936L")) {
                return "Lever" + batCap(3200, 3, 6, 921600, 6.0f, 7);
            }
            if (mdl.equals("Z970")) {
                return "ZMax" + batCap(3400, 3, 1, 921600, 5.7f);
            }
            if (mdl.equals("Z980L")) {
                return "Grand Memo II LTE" + batCap(3200, 3, 6, 921600, 6.0f);
            }
            if (mdl.equals("Z987")) {
                return "Grand X Max+" + batCap(3200, 3, 1, 921600, 6.0f);
            }
            if (mdl.equals("Z990")) {
                return "Avail" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z990G")) {
                return "Merit" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z992")) {
                return "Avail 2" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z993")) {
                return "Prelude" + batCap(1500, 1, 1, 153600, 3.5f);
            }
            if (mdl.equals("Z995")) {
                return "Overture" + batCap(1780, 1, 1, 384000, 4.0f);
            }
            if (mdl.equals("Z998")) {
                return "Z998" + batCap(2070, 1, 1, 518400, 4.5f);
            }
        }*/
        return "";
    }

    private static String getDevModel_ZUK() {
        if (getStrippedBuildModel(DEVMANUF_ZUK).equals("Z1")) {
            return "Z1" + batCap(4100, 3, 6, 2073600, 5.5f);
        }
        return "";
    }

    public static String getDeviceModel() {
        switch (getDevManufacturer()) {
            case 1:
                return "Android Emulator";
            case 2:
                String devmdl = getDevModel_Keneksi();
                if (devmdl.length() > 0) {
                    return "Keneksi " + devmdl;
                }
                return devmdl;
            case 3:
                String devmdl2 = getDevModel_Komu();
                if (devmdl2.length() > 0) {
                    return "Komu " + devmdl2;
                }
                return devmdl2;
            case 4:
                String devmdl3 = getDevModel_RCA();
                if (devmdl3.length() > 0) {
                    return "RCA " + devmdl3;
                }
                return devmdl3;
            case 5:
                String devmdl4 = getDevModel_Acer();
                if (devmdl4.length() > 0) {
                    return "Acer " + devmdl4;
                }
                return devmdl4;
            case 6:
                String devmdl5 = getDevModel_Allview();
                if (devmdl5.length() > 0) {
                    return "Allview " + devmdl5;
                }
                return devmdl5;
            case 7:
                String devmdl6 = getDevModel_Asus();
                if (devmdl6.length() > 0) {
                    return "Asus " + devmdl6;
                }
                return devmdl6;
            case 8:
                String devmdl7 = getDevModel_BlackBerry();
                if (devmdl7.length() > 0) {
                    return "BlackBerry " + devmdl7;
                }
                return devmdl7;
            case 9:
                String devmdl8 = getDevModel_Blackview();
                if (devmdl8.length() > 0) {
                    return "Blackview " + devmdl8;
                }
                return devmdl8;
            case 10:
                String devmdl9 = getDevModel_BLU();
                if (devmdl9.length() > 0) {
                    return "BLU " + devmdl9;
                }
                return devmdl9;
            case 11:
                String devmdl10 = getDevModel_Cherry();
                if (devmdl10.length() > 0) {
                    return "Cherry " + devmdl10;
                }
                return devmdl10;
            case 12:
                String devmdl11 = getDevModel_CloudFone();
                if (devmdl11.length() > 0) {
                    return "CloudFone " + devmdl11;
                }
                return devmdl11;
            case 13:
                String devmdl12 = getDevModel_Cubot();
                if (devmdl12.length() > 0) {
                    return "Cubot " + devmdl12;
                }
                return devmdl12;
            case 14:
                String devmdl13 = getDevModel_Doogee();
                if (devmdl13.length() > 0) {
                    return "Doogee " + devmdl13;
                }
                return devmdl13;
            case 15:
                String devmdl14 = getDevModel_Fly();
                if (devmdl14.length() > 0) {
                    return "Fly " + devmdl14;
                }
                return devmdl14;
            case 16:
                String devmdl15 = getDevModel_Gigabyte();
                if (devmdl15.length() > 0) {
                    return "Gigabyte " + devmdl15;
                }
                return devmdl15;
            case 17:
                String devmdl16 = getDevModel_Gionee();
                if (devmdl16.length() > 0) {
                    return "Gionee " + devmdl16;
                }
                return devmdl16;
            case 18:
                String devmdl17 = getDevModel_HardKernel();
                if (devmdl17.length() > 0) {
                    return "HardKernel " + devmdl17;
                }
                return devmdl17;
            case 19:
                String devmdl18 = getDevModel_Hisense();
                if (devmdl18.length() > 0) {
                    return "Hisense " + devmdl18;
                }
                return devmdl18;
            case 20:
                String devmdl19 = getDevModel_HTC();
                if (devmdl19.length() > 0) {
                    return "HTC " + devmdl19;
                }
                return devmdl19;
            case 21:
                String devmdl20 = getDevModel_Huawei();
                if (devmdl20.length() > 0) {
                    return "Huawei " + devmdl20;
                }
                return devmdl20;
            case 22:
                String devmdl21 = getDevModel_InFocus();
                if (devmdl21.length() > 0) {
                    return "InFocus " + devmdl21;
                }
                return devmdl21;
            case 23:
                String devmdl22 = getDevModel_iOcean();
                if (devmdl22.length() > 0) {
                    return "iOcean " + devmdl22;
                }
                return devmdl22;
            case 24:
                String devmdl23 = getDevModel_JiaYu();
                if (devmdl23.length() > 0) {
                    return "JiaYu " + devmdl23;
                }
                return devmdl23;
            case 25:
                String devmdl24 = getDevModel_Karbonn();
                if (devmdl24.length() > 0) {
                    return "Karbonn " + devmdl24;
                }
                return devmdl24;
            case 26:
                String devmdl25 = getDevModel_Kazam();
                if (devmdl25.length() > 0) {
                    return "Kazam " + devmdl25;
                }
                return devmdl25;
            case 27:
                String devmdl26 = getDevModel_Kata();
                if (devmdl26.length() > 0) {
                    return "Kata " + devmdl26;
                }
                return devmdl26;
            case 28:
                String devmdl27 = getDevModel_Leagoo();
                if (devmdl27.length() > 0) {
                    return "Leagoo " + devmdl27;
                }
                return devmdl27;
            case 29:
                String devmdl28 = getDevModel_Lenovo();
                if (devmdl28.length() > 0) {
                    return "Lenovo " + devmdl28;
                }
                return devmdl28;
            case 30:
                String devmdl29 = getDevModel_LG();
                if (devmdl29.length() > 0) {
                    return "LG " + devmdl29;
                }
                return devmdl29;
            case 31:
                String devmdl30 = getDevModel_Meizu();
                if (devmdl30.length() > 0) {
                    return "Meizu " + devmdl30;
                }
                return devmdl30;
            case 32:
                String devmdl31 = getDevModel_Minix();
                if (devmdl31.length() > 0) {
                    return "Minix " + devmdl31;
                }
                return devmdl31;
            case 33:
                String devmdl32 = getDevModel_Motorola();
                if (devmdl32.length() > 0) {
                    return "Motorola " + devmdl32;
                }
                return devmdl32;
            case 34:
                String devmdl33 = getDevModel_MyPhone();
                if (devmdl33.length() > 0) {
                    return "MyPhone " + devmdl33;
                }
                return devmdl33;
            case 35:
                String devmdl34 = getDevModel_MyWiGo();
                if (devmdl34.length() > 0) {
                    return "MyWiGo " + devmdl34;
                }
                return devmdl34;
            case 36:
                String devmdl35 = getDevModel_No1();
                if (devmdl35.length() > 0) {
                    return "No.1 " + devmdl35;
                }
                return devmdl35;
            case 37:
                String devmdl36 = getDevModel_Nokia();
                if (devmdl36.length() > 0) {
                    return "Nokia " + devmdl36;
                }
                return devmdl36;
            case 38:
                String devmdl37 = getDevModel_nVIDIA();
                if (devmdl37.length() > 0) {
                    return "nVIDIA " + devmdl37;
                }
                return devmdl37;
            case 39:
                String devmdl38 = getDevModel_OPlus();
                if (devmdl38.length() > 0) {
                    return "O+ " + devmdl38;
                }
                return devmdl38;
            case 40:
                String devmdl39 = getDevModel_OnePlus();
                if (devmdl39.length() > 0) {
                    return "OnePlus " + devmdl39;
                }
                return devmdl39;
            case 41:
                String devmdl40 = getDevModel_Oppo();
                if (devmdl40.length() > 0) {
                    return "Oppo " + devmdl40;
                }
                return devmdl40;
            case 42:
                String devmdl41 = getDevModel_Pantech();
                if (devmdl41.length() > 0) {
                    return "Pantech " + devmdl41;
                }
                return devmdl41;
            case 43:
                String devmdl42 = getDevModel_Philips();
                if (devmdl42.length() > 0) {
                    return "Philips " + devmdl42;
                }
                return devmdl42;
            case 44:
                String devmdl43 = getDevModel_Prestigio();
                if (devmdl43.length() > 0) {
                    return "Prestigio " + devmdl43;
                }
                return devmdl43;
            case 45:
                String devmdl44 = getDevModel_Samsung();
                if (devmdl44.length() > 0) {
                    return "Samsung " + devmdl44;
                }
                return devmdl44;
            case 46:
                String devmdl45 = getDevModel_SKK();
                if (devmdl45.length() > 0) {
                    return "SKK " + devmdl45;
                }
                return devmdl45;
            case 47:
                String devmdl46 = getDevModel_Sony_SE();
                if (devmdl46.length() > 0) {
                    return "Sony " + devmdl46;
                }
                return devmdl46;
            case 48:
                String devmdl47 = getDevModel_Sony_SE();
                if (devmdl47.length() > 0) {
                    return "Sony Ericsson " + devmdl47;
                }
                return devmdl47;
            case 49:
                String devmdl48 = getDevModel_Teclast();
                if (devmdl48.length() > 0) {
                    return "Teclast " + devmdl48;
                }
                return devmdl48;
            case 50:
                String devmdl49 = getDevModel_THL();
                if (devmdl49.length() > 0) {
                    return "THL " + devmdl49;
                }
                return devmdl49;
            case 51:
                String devmdl50 = getDevModel_Torque();
                if (devmdl50.length() > 0) {
                    return "Torque " + devmdl50;
                }
                return devmdl50;
            case 52:
                String devmdl51 = getDevModel_UMI();
                if (devmdl51.length() > 0) {
                    return "UMI " + devmdl51;
                }
                return devmdl51;
            case 53:
                String devmdl52 = getDevModel_vPhone();
                if (devmdl52.length() > 0) {
                    return "vPhone " + devmdl52;
                }
                return devmdl52;
            case 54:
                String devmdl53 = getDevModel_WayteQ();
                if (devmdl53.length() > 0) {
                    return "WayteQ " + devmdl53;
                }
                return devmdl53;
            case 55:
                String devmdl54 = getDevModel_Xiaomi();
                if (devmdl54.length() > 0) {
                    return "Xiaomi " + devmdl54;
                }
                return devmdl54;
            case 56:
                String devmdl55 = getDevModel_Yarvik();
                if (devmdl55.length() > 0) {
                    return "Yarvik " + devmdl55;
                }
                return devmdl55;
            case 57:
                String devmdl56 = getDevModel_Yota();
                if (devmdl56.length() > 0) {
                    return "Yota " + devmdl56;
                }
                return devmdl56;
            case 58:
                String devmdl57 = getDevModel_Zopo();
                if (devmdl57.length() > 0) {
                    return "Zopo " + devmdl57;
                }
                return devmdl57;
            case 59:
                String devmdl58 = getDevModel_ZTE();
                if (devmdl58.length() > 0) {
                    return "ZTE " + devmdl58;
                }
                return devmdl58;
            case 60:
                String devmdl59 = getDevModel_CAT();
                if (devmdl59.length() > 0) {
                    return "CAT " + devmdl59;
                }
                return devmdl59;
            case 61:
                String devmdl60 = getDevModel_ConCorde();
                if (devmdl60.length() > 0) {
                    return "ConCorde " + devmdl60;
                }
                return devmdl60;
            case 62:
                String devmdl61 = getDevModel_Alcatel();
                if (devmdl61.length() > 0) {
                    return "Alcatel " + devmdl61;
                }
                return devmdl61;
            case 63:
                String devmdl62 = getDevModel_DTC();
                if (devmdl62.length() > 0) {
                    return "DTC " + devmdl62;
                }
                return devmdl62;
            case 64:
                String devmdl63 = getDevModel_MeLE();
                if (devmdl63.length() > 0) {
                    return "MeLE " + devmdl63;
                }
                return devmdl63;
            case 65:
                String devmdl64 = getDevModel_Pipo();
                if (devmdl64.length() > 0) {
                    return "Pipo " + devmdl64;
                }
                return devmdl64;
            case 66:
                String devmdl65 = getDevModel_Onda();
                if (devmdl65.length() > 0) {
                    return "Onda " + devmdl65;
                }
                return devmdl65;
            case 67:
                String devmdl66 = getDevModel_Vivax();
                if (devmdl66.length() > 0) {
                    return "Vivax " + devmdl66;
                }
                return devmdl66;
            case 68:
                String devmdl67 = getDevModel_Amazon();
                if (devmdl67.length() > 0) {
                    return "Amazon " + devmdl67;
                }
                return devmdl67;
            case 69:
                String devmdl68 = getDevModel_Inhon();
                if (devmdl68.length() > 0) {
                    return "Inhon " + devmdl68;
                }
                return devmdl68;
            case 70:
                String devmdl69 = getDevModel_Kiano();
                if (devmdl69.length() > 0) {
                    return "Kiano " + devmdl69;
                }
                return devmdl69;
            case 71:
                String devmdl70 = getDevModel_Wiko();
                if (devmdl70.length() > 0) {
                    return "Wiko " + devmdl70;
                }
                return devmdl70;
            case 72:
                String devmdl71 = getDevModel_Dell();
                if (devmdl71.length() > 0) {
                    return "Dell " + devmdl71;
                }
                return devmdl71;
            case 73:
                String devmdl72 = getDevModel_Haipai();
                if (devmdl72.length() > 0) {
                    return "Haipai " + devmdl72;
                }
                return devmdl72;
            case 74:
                String devmdl73 = getDevModel_teXet();
                if (devmdl73.length() > 0) {
                    return "teXet " + devmdl73;
                }
                return devmdl73;
            case 75:
                String devmdl74 = getDevModel_Wexler();
                if (devmdl74.length() > 0) {
                    return "Wexler " + devmdl74;
                }
                return devmdl74;
            case 76:
                String devmdl75 = getDevModel_Dexp();
                if (devmdl75.length() > 0) {
                    return "Dexp " + devmdl75;
                }
                return devmdl75;
            case 77:
                String devmdl76 = getDevModel_Vestel();
                if (devmdl76.length() > 0) {
                    return "Vestel " + devmdl76;
                }
                return devmdl76;
            case 78:
                String devmdl77 = getDevModel_Kyocera();
                if (devmdl77.length() > 0) {
                    return "Kyocera " + devmdl77;
                }
                return devmdl77;
            case 79:
                String devmdl78 = getDevModel_Xolo();
                if (devmdl78.length() > 0) {
                    return "Xolo " + devmdl78;
                }
                return devmdl78;
            case 80:
                String devmdl79 = getDevModel_MTC();
                if (devmdl79.length() > 0) {
                    return "MTC " + devmdl79;
                }
                return devmdl79;
            case 81:
                String devmdl80 = getDevModel_Coolpad();
                if (devmdl80.length() > 0) {
                    return "Coolpad " + devmdl80;
                }
                return devmdl80;
            case 82:
                String devmdl81 = getDevModel_Freelander();
                if (devmdl81.length() > 0) {
                    return "Freelander " + devmdl81;
                }
                return devmdl81;
            case 83:
                String devmdl82 = getDevModel_Elephone();
                if (devmdl82.length() > 0) {
                    return "Elephone " + devmdl82;
                }
                return devmdl82;
            case 84:
                String devmdl83 = getDevModel_Zifro();
                if (devmdl83.length() > 0) {
                    return "Zifro " + devmdl83;
                }
                return devmdl83;
            case 85:
                String devmdl84 = getDevModel_POV();
                if (devmdl84.length() > 0) {
                    return "POV " + devmdl84;
                }
                return devmdl84;
            case 86:
                String devmdl85 = getDevModel_Zidoo();
                if (devmdl85.length() > 0) {
                    return "Zidoo " + devmdl85;
                }
                return devmdl85;
            case 87:
                String devmdl86 = getDevModel_Sharp();
                if (devmdl86.length() > 0) {
                    return "Sharp " + devmdl86;
                }
                return devmdl86;
            case 88:
                String devmdl87 = getDevModel_Op3nDott();
                if (devmdl87.length() > 0) {
                    return "Op3n Dott " + devmdl87;
                }
                return devmdl87;
            case 89:
                String devmdl88 = getDevModel_Vodafone();
                if (devmdl88.length() > 0) {
                    return "Vodafone " + devmdl88;
                }
                return devmdl88;
            case 90:
                String devmdl89 = getDevModel_Allwinner();
                if (devmdl89.length() > 0) {
                    return "Allwinner " + devmdl89;
                }
                return devmdl89;
            case 91:
                String devmdl90 = getDevModel_Micromax();
                if (devmdl90.length() > 0) {
                    return "Micromax " + devmdl90;
                }
                return devmdl90;
            case 92:
                String devmdl91 = getDevModel_MSI();
                if (devmdl91.length() > 0) {
                    return "MSI " + devmdl91;
                }
                return devmdl91;
            case 93:
                String devmdl92 = getDevModel_Faea();
                if (devmdl92.length() > 0) {
                    return "Faea " + devmdl92;
                }
                return devmdl92;
            case 94:
                String devmdl93 = getDevModel_Utok();
                if (devmdl93.length() > 0) {
                    return "Utok " + devmdl93;
                }
                return devmdl93;
            case 95:
                String devmdl94 = getDevModel_EnergySistem();
                if (devmdl94.length() > 0) {
                    return "Energy Sistem " + devmdl94;
                }
                return devmdl94;
            case 96:
                String devmdl95 = getDevModel_KingSing();
                if (devmdl95.length() > 0) {
                    return "KingSing " + devmdl95;
                }
                return devmdl95;
            case 97:
                String devmdl96 = getDevModel_KingZone();
                if (devmdl96.length() > 0) {
                    return "KingZone " + devmdl96;
                }
                return devmdl96;
            case 98:
                String devmdl97 = getDevModel_Eachine();
                if (devmdl97.length() > 0) {
                    return "Eachine " + devmdl97;
                }
                return devmdl97;
            case 99:
                String devmdl98 = getDevModel_iNew();
                if (devmdl98.length() > 0) {
                    return "iNew " + devmdl98;
                }
                return devmdl98;
            case 100:
                String devmdl99 = getDevModel_Explay();
                if (devmdl99.length() > 0) {
                    return "Explay " + devmdl99;
                }
                return devmdl99;
            case 101:
                String devmdl100 = getDevModel_HTM();
                if (devmdl100.length() > 0) {
                    return "HTM " + devmdl100;
                }
                return devmdl100;
            case 102:
                String devmdl101 = getDevModel_bq();
                if (devmdl101.length() > 0) {
                    return "bq " + devmdl101;
                }
                return devmdl101;
            case 103:
                String devmdl102 = getDevModel_Colorfly();
                if (devmdl102.length() > 0) {
                    return "Colorfly " + devmdl102;
                }
                return devmdl102;
            case 104:
                String devmdl103 = getDevModel_Impression();
                if (devmdl103.length() > 0) {
                    return "Impression " + devmdl103;
                }
                return devmdl103;
            case 105:
                String devmdl104 = getDevModel_Anycool();
                if (devmdl104.length() > 0) {
                    return "Anycool " + devmdl104;
                }
                return devmdl104;
            case 106:
                String devmdl105 = getDevModel_TabletExpress();
                if (devmdl105.length() > 0) {
                    return "Tablet Express " + devmdl105;
                }
                return devmdl105;
            case 107:
                String devmdl106 = getDevModel_Cube();
                if (devmdl106.length() > 0) {
                    return "Cube " + devmdl106;
                }
                return devmdl106;
            case 108:
                String devmdl107 = getDevModel_Ampe();
                if (devmdl107.length() > 0) {
                    return "Ampe " + devmdl107;
                }
                return devmdl107;
            case 109:
                String devmdl108 = getDevModel_iJoy();
                if (devmdl108.length() > 0) {
                    return "i-Joy " + devmdl108;
                }
                return devmdl108;
            case DEVMANUF_BL /*{ENCODED_INT: 110}*/:
                String devmdl109 = getDevModel_BL();
                if (devmdl109.length() > 0) {
                    return "BL " + devmdl109;
                }
                return devmdl109;
            case DEVMANUF_MEDION /*{ENCODED_INT: 111}*/:
                String devmdl110 = getDevModel_Medion();
                if (devmdl110.length() > 0) {
                    return "Medion " + devmdl110;
                }
                return devmdl110;
            case DEVMANUF_ECOO /*{ENCODED_INT: 112}*/:
                String devmdl111 = getDevModel_Ecoo();
                if (devmdl111.length() > 0) {
                    return "Ecoo " + devmdl111;
                }
                return devmdl111;
            case DEVMANUF_VIVO /*{ENCODED_INT: 113}*/:
                String devmdl112 = getDevModel_Vivo();
                if (devmdl112.length() > 0) {
                    return "Vivo " + devmdl112;
                }
                return devmdl112;
            case DEVMANUF_ORANGE /*{ENCODED_INT: 114}*/:
                String devmdl113 = getDevModel_Orange();
                if (devmdl113.length() > 0) {
                    return "Orange " + devmdl113;
                }
                return devmdl113;
            case DEVMANUF_LEADER /*{ENCODED_INT: 115}*/:
                String devmdl114 = getDevModel_Leader();
                if (devmdl114.length() > 0) {
                    return "Leader " + devmdl114;
                }
                return devmdl114;
            case DEVMANUF_STARWAY /*{ENCODED_INT: 116}*/:
                String devmdl115 = getDevModel_Starway();
                if (devmdl115.length() > 0) {
                    return "Starway " + devmdl115;
                }
                return devmdl115;
            case DEVMANUF_GIGASET /*{ENCODED_INT: 117}*/:
                String devmdl116 = getDevModel_Gigaset();
                if (devmdl116.length() > 0) {
                    return "Gigaset " + devmdl116;
                }
                return devmdl116;
            case DEVMANUF_VERYKOOL /*{ENCODED_INT: 118}*/:
                String devmdl117 = getDevModel_verykool();
                if (devmdl117.length() > 0) {
                    return "verykool " + devmdl117;
                }
                return devmdl117;
            case DEVMANUF_MEDIACOM /*{ENCODED_INT: 119}*/:
                String devmdl118 = getDevModel_Mediacom();
                if (devmdl118.length() > 0) {
                    return "Mediacom " + devmdl118;
                }
                return devmdl118;
            case DEVMANUF_OVERMAX /*{ENCODED_INT: 120}*/:
                String devmdl119 = getDevModel_Overmax();
                if (devmdl119.length() > 0) {
                    return "Overmax " + devmdl119;
                }
                return devmdl119;
            case DEVMANUF_TOSHIBA /*{ENCODED_INT: 121}*/:
                String devmdl120 = getDevModel_Toshiba();
                if (devmdl120.length() > 0) {
                    return "Toshiba " + devmdl120;
                }
                return devmdl120;
            case DEVMANUF_ASSISTANT /*{ENCODED_INT: 122}*/:
                String devmdl121 = getDevModel_Assistant();
                if (devmdl121.length() > 0) {
                    return "Assistant " + devmdl121;
                }
                return devmdl121;
            case DEVMANUF_MLAIS /*{ENCODED_INT: 123}*/:
                String devmdl122 = getDevModel_Mlais();
                if (devmdl122.length() > 0) {
                    return "Mlais " + devmdl122;
                }
                return devmdl122;
            case 124:
                String devmdl123 = getDevModel_Zeepad();
                if (devmdl123.length() > 0) {
                    return "Zeepad " + devmdl123;
                }
                return devmdl123;
            case DEVMANUF_ULEFONE /*{ENCODED_INT: 125}*/:
                String devmdl124 = getDevModel_Ulefone();
                if (devmdl124.length() > 0) {
                    return "Ulefone " + devmdl124;
                }
                return devmdl124;
            case 126:
                String devmdl125 = getDevModel_Innos();
                if (devmdl125.length() > 0) {
                    return "Innos " + devmdl125;
                }
                return devmdl125;
            case 127:
                String devmdl126 = getDevModel_CKK();
                if (devmdl126.length() > 0) {
                    return "CKK " + devmdl126;
                }
                return devmdl126;
            case 128:
                String devmdl127 = getDevModel_MPIE();
                if (devmdl127.length() > 0) {
                    return "MPIE " + devmdl127;
                }
                return devmdl127;
            case DEVMANUF_STOREX /*{ENCODED_INT: 129}*/:
                String devmdl128 = getDevModel_Storex();
                if (devmdl128.length() > 0) {
                    return "Storex " + devmdl128;
                }
                return devmdl128;
            case 130:
                String devmdl129 = getDevModel_Archos();
                if (devmdl129.length() > 0) {
                    return "Archos " + devmdl129;
                }
                return devmdl129;
            case 131:
                String devmdl130 = getDevModel_Lanix();
                if (devmdl130.length() > 0) {
                    return "Lanix " + devmdl130;
                }
                return devmdl130;
            case DEVMANUF_YONESTOPTECH /*{ENCODED_INT: 132}*/:
                String devmdl131 = getDevModel_YonesToptech();
                if (devmdl131.length() > 0) {
                    return "YonesToptech " + devmdl131;
                }
                return devmdl131;
            case DEVMANUF_VIDEOCON /*{ENCODED_INT: 133}*/:
                String devmdl132 = getDevModel_Videocon();
                if (devmdl132.length() > 0) {
                    return "Videocon " + devmdl132;
                }
                return devmdl132;
            case DEVMANUF_JUST5 /*{ENCODED_INT: 134}*/:
                String devmdl133 = getDevModel_Just5();
                if (devmdl133.length() > 0) {
                    return "Just5 " + devmdl133;
                }
                return devmdl133;
            case DEVMANUF_KINGELON /*{ENCODED_INT: 135}*/:
                String devmdl134 = getDevModel_Kingelon();
                if (devmdl134.length() > 0) {
                    return "Kingelon " + devmdl134;
                }
                return devmdl134;
            case DEVMANUF_VIEWSONIC /*{ENCODED_INT: 136}*/:
                String devmdl135 = getDevModel_ViewSonic();
                if (devmdl135.length() > 0) {
                    return "ViewSonic " + devmdl135;
                }
                return devmdl135;
            case DEVMANUF_MIJUE /*{ENCODED_INT: 137}*/:
                String devmdl136 = getDevModel_Mijue();
                if (devmdl136.length() > 0) {
                    return "Mijue " + devmdl136;
                }
                return devmdl136;
            case DEVMANUF_NAVCITY /*{ENCODED_INT: 138}*/:
                String devmdl137 = getDevModel_NavCity();
                if (devmdl137.length() > 0) {
                    return "NavCity " + devmdl137;
                }
                return devmdl137;
            case DEVMANUF_DPS /*{ENCODED_INT: 139}*/:
                String devmdl138 = getDevModel_DPS();
                if (devmdl138.length() > 0) {
                    return "DPS " + devmdl138;
                }
                return devmdl138;
            case DEVMANUF_LAVA /*{ENCODED_INT: 140}*/:
                String devmdl139 = getDevModel_Lava();
                if (devmdl139.length() > 0) {
                    return "Lava " + devmdl139;
                }
                return devmdl139;
            case DEVMANUF_UHAPPY /*{ENCODED_INT: 141}*/:
                String devmdl140 = getDevModel_Uhappy();
                if (devmdl140.length() > 0) {
                    return "Uhappy " + devmdl140;
                }
                return devmdl140;
            case DEVMANUF_VKWORLD /*{ENCODED_INT: 142}*/:
                String devmdl141 = getDevModel_Vkworld();
                if (devmdl141.length() > 0) {
                    return "Vkworld " + devmdl141;
                }
                return devmdl141;
            case DEVMANUF_YUNTAB /*{ENCODED_INT: 143}*/:
                String devmdl142 = getDevModel_Yuntab();
                if (devmdl142.length() > 0) {
                    return "Yuntab " + devmdl142;
                }
                return devmdl142;
            case DEVMANUF_REKAM /*{ENCODED_INT: 144}*/:
                String devmdl143 = getDevModel_Rekam();
                if (devmdl143.length() > 0) {
                    return "Rekam " + devmdl143;
                }
                return devmdl143;
            case DEVMANUF_DNS /*{ENCODED_INT: 145}*/:
                String devmdl144 = getDevModel_DNS();
                if (devmdl144.length() > 0) {
                    return "DNS " + devmdl144;
                }
                return devmdl144;
            case DEVMANUF_QBEX /*{ENCODED_INT: 146}*/:
                String devmdl145 = getDevModel_Qbex();
                if (devmdl145.length() > 0) {
                    return "Qbex " + devmdl145;
                }
                return devmdl145;
            case DEVMANUF_IRU /*{ENCODED_INT: 147}*/:
                String devmdl146 = getDevModel_iRU();
                if (devmdl146.length() > 0) {
                    return "iRU " + devmdl146;
                }
                return devmdl146;
            case DEVMANUF_KINGTOP /*{ENCODED_INT: 148}*/:
                String devmdl147 = getDevModel_KingTop();
                if (devmdl147.length() > 0) {
                    return "KingTop " + devmdl147;
                }
                return devmdl147;
            case DEVMANUF_ZONDA /*{ENCODED_INT: 149}*/:
                String devmdl148 = getDevModel_Zonda();
                if (devmdl148.length() > 0) {
                    return "Zonda " + devmdl148;
                }
                return devmdl148;
            case DEVMANUF_DIGMA /*{ENCODED_INT: 150}*/:
                String devmdl149 = getDevModel_Digma();
                if (devmdl149.length() > 0) {
                    return "Digma " + devmdl149;
                }
                return devmdl149;
            case DEVMANUF_LANDVO /*{ENCODED_INT: 151}*/:
                String devmdl150 = getDevModel_Landvo();
                if (devmdl150.length() > 0) {
                    return "Landvo " + devmdl150;
                }
                return devmdl150;
            case DEVMANUF_NAVON /*{ENCODED_INT: 152}*/:
                String devmdl151 = getDevModel_Navon();
                if (devmdl151.length() > 0) {
                    return "Navon " + devmdl151;
                }
                return devmdl151;
            case DEVMANUF_CHUWI /*{ENCODED_INT: 153}*/:
                String devmdl152 = getDevModel_Chuwi();
                if (devmdl152.length() > 0) {
                    return "Chuwi " + devmdl152;
                }
                return devmdl152;
            case DEVMANUF_IONIK /*{ENCODED_INT: 154}*/:
                String devmdl153 = getDevModel_ionik();
                if (devmdl153.length() > 0) {
                    return "i.onik " + devmdl153;
                }
                return devmdl153;
            case DEVMANUF_HAIER /*{ENCODED_INT: 155}*/:
                String devmdl154 = getDevModel_Haier();
                if (devmdl154.length() > 0) {
                    return "Haier " + devmdl154;
                }
                return devmdl154;
            case DEVMANUF_ODYS /*{ENCODED_INT: 156}*/:
                String devmdl155 = getDevModel_Odys();
                if (devmdl155.length() > 0) {
                    return "Odys " + devmdl155;
                }
                return devmdl155;
            case DEVMANUF_TCL /*{ENCODED_INT: 157}*/:
                String devmdl156 = getDevModel_TCL();
                if (devmdl156.length() > 0) {
                    return "TCL " + devmdl156;
                }
                return devmdl156;
            case DEVMANUF_GPLUS /*{ENCODED_INT: 158}*/:
                String devmdl157 = getDevModel_GPlus();
                if (devmdl157.length() > 0) {
                    return "G+ " + devmdl157;
                }
                return devmdl157;
            case DEVMANUF_VEGA /*{ENCODED_INT: 159}*/:
                String devmdl158 = getDevModel_Vega();
                if (devmdl158.length() > 0) {
                    return "Vega " + devmdl158;
                }
                return devmdl158;
            case DEVMANUF_HIGHSCREEN /*{ENCODED_INT: 160}*/:
                String devmdl159 = getDevModel_Highscreen();
                if (devmdl159.length() > 0) {
                    return "Highscreen " + devmdl159;
                }
                return devmdl159;
            case DEVMANUF_KNC /*{ENCODED_INT: 161}*/:
                String devmdl160 = getDevModel_KNC();
                if (devmdl160.length() > 0) {
                    return "KNC " + devmdl160;
                }
                return devmdl160;
            case DEVMANUF_YU /*{ENCODED_INT: 162}*/:
                String devmdl161 = getDevModel_Yu();
                if (devmdl161.length() > 0) {
                    return "Yu " + devmdl161;
                }
                return devmdl161;
            case DEVMANUF_AXGIO /*{ENCODED_INT: 163}*/:
                String devmdl162 = getDevModel_Axgio();
                if (devmdl162.length() > 0) {
                    return "Axgio " + devmdl162;
                }
                return devmdl162;
            case DEVMANUF_IRBIS /*{ENCODED_INT: 164}*/:
                String devmdl163 = getDevModel_Irbis();
                if (devmdl163.length() > 0) {
                    return "Irbis " + devmdl163;
                }
                return devmdl163;
            case DEVMANUF_SUPRA /*{ENCODED_INT: 165}*/:
                String devmdl164 = getDevModel_Supra();
                if (devmdl164.length() > 0) {
                    return "Supra " + devmdl164;
                }
                return devmdl164;
            case DEVMANUF_IMOBILE /*{ENCODED_INT: 166}*/:
                String devmdl165 = getDevModel_iMobile();
                if (devmdl165.length() > 0) {
                    return "i-mobile " + devmdl165;
                }
                return devmdl165;
            case DEVMANUF_ESCORT /*{ENCODED_INT: 167}*/:
                String devmdl166 = getDevModel_Escort();
                if (devmdl166.length() > 0) {
                    return "Escort " + devmdl166;
                }
                return devmdl166;
            case DEVMANUF_POCKETBOOK /*{ENCODED_INT: 168}*/:
                String devmdl167 = getDevModel_PocketBook();
                if (devmdl167.length() > 0) {
                    return "PocketBook " + devmdl167;
                }
                return devmdl167;
            case DEVMANUF_HIMAX /*{ENCODED_INT: 169}*/:
                String devmdl168 = getDevModel_Himax();
                if (devmdl168.length() > 0) {
                    return "Himax " + devmdl168;
                }
                return devmdl168;
            case DEVMANUF_TREKSTOR /*{ENCODED_INT: 170}*/:
                String devmdl169 = getDevModel_TrekStor();
                if (devmdl169.length() > 0) {
                    return "TrekStor " + devmdl169;
                }
                return devmdl169;
            case DEVMANUF_PHICOMM /*{ENCODED_INT: 171}*/:
                String devmdl170 = getDevModel_Phicomm();
                if (devmdl170.length() > 0) {
                    return "Phicomm " + devmdl170;
                }
                return devmdl170;
            case DEVMANUF_BLAUPUNKT /*{ENCODED_INT: 172}*/:
                String devmdl171 = getDevModel_Blaupunkt();
                if (devmdl171.length() > 0) {
                    return "Blaupunkt " + devmdl171;
                }
                return devmdl171;
            case DEVMANUF_BN /*{ENCODED_INT: 173}*/:
                String devmdl172 = getDevModel_BN();
                if (devmdl172.length() > 0) {
                    return "Barnes & Noble " + devmdl172;
                }
                return devmdl172;
            case DEVMANUF_AINOL /*{ENCODED_INT: 174}*/:
                String devmdl173 = getDevModel_Ainol();
                if (devmdl173.length() > 0) {
                    return "Ainol " + devmdl173;
                }
                return devmdl173;
            case DEVMANUF_HP /*{ENCODED_INT: 175}*/:
                String devmdl174 = getDevModel_HP();
                if (devmdl174.length() > 0) {
                    return "HP " + devmdl174;
                }
                return devmdl174;
            case DEVMANUF_ECS /*{ENCODED_INT: 176}*/:
                String devmdl175 = getDevModel_ECS();
                if (devmdl175.length() > 0) {
                    return "ECS " + devmdl175;
                }
                return devmdl175;
            case DEVMANUF_GOCLEVER /*{ENCODED_INT: 177}*/:
                String devmdl176 = getDevModel_Goclever();
                if (devmdl176.length() > 0) {
                    return "Goclever " + devmdl176;
                }
                return devmdl176;
            case DEVMANUF_OUKITEL /*{ENCODED_INT: 178}*/:
                String devmdl177 = getDevModel_Oukitel();
                if (devmdl177.length() > 0) {
                    return "Oukitel " + devmdl177;
                }
                return devmdl177;
            case DEVMANUF_CELKON /*{ENCODED_INT: 179}*/:
                String devmdl178 = getDevModel_Celkon();
                if (devmdl178.length() > 0) {
                    return "Celkon " + devmdl178;
                }
                return devmdl178;
            case DEVMANUF_TRONFY /*{ENCODED_INT: 180}*/:
                String devmdl179 = getDevModel_Tronfy();
                if (devmdl179.length() > 0) {
                    return "Tronfy " + devmdl179;
                }
                return devmdl179;
            case DEVMANUF_LARK /*{ENCODED_INT: 181}*/:
                String devmdl180 = getDevModel_Lark();
                if (devmdl180.length() > 0) {
                    return "Lark " + devmdl180;
                }
                return devmdl180;
            case DEVMANUF_BLUEGO /*{ENCODED_INT: 182}*/:
                String devmdl181 = getDevModel_Bluego();
                if (devmdl181.length() > 0) {
                    return "Bluego " + devmdl181;
                }
                return devmdl181;
            case DEVMANUF_CASIO /*{ENCODED_INT: 183}*/:
                String devmdl182 = getDevModel_Casio();
                if (devmdl182.length() > 0) {
                    return "Casio " + devmdl182;
                }
                return devmdl182;
            case DEVMANUF_QMOBILE /*{ENCODED_INT: 184}*/:
                String devmdl183 = getDevModel_QMobile();
                if (devmdl183.length() > 0) {
                    return "QMobile " + devmdl183;
                }
                return devmdl183;
            case DEVMANUF_G /*{ENCODED_INT: 185}*/:
                String devmdl184 = getDevModel_G();
                if (devmdl184.length() > 0) {
                    return "G " + devmdl184;
                }
                return devmdl184;
            case DEVMANUF_POMP /*{ENCODED_INT: 186}*/:
                String devmdl185 = getDevModel_Pomp();
                if (devmdl185.length() > 0) {
                    return "Pomp " + devmdl185;
                }
                return devmdl185;
            case DEVMANUF_IRULU /*{ENCODED_INT: 187}*/:
                String devmdl186 = getDevModel_iRULU();
                if (devmdl186.length() > 0) {
                    return "iRULU " + devmdl186;
                }
                return devmdl186;
            case DEVMANUF_JOLLA /*{ENCODED_INT: 188}*/:
                String devmdl187 = getDevModel_Jolla();
                if (devmdl187.length() > 0) {
                    return "Jolla " + devmdl187;
                }
                return devmdl187;
            case DEVMANUF_CUBIEBOARD /*{ENCODED_INT: 189}*/:
                String devmdl188 = getDevModel_Cubieboard();
                if (devmdl188.length() > 0) {
                    return "Cubieboard " + devmdl188;
                }
                return devmdl188;
            case DEVMANUF_ATONGM /*{ENCODED_INT: 190}*/:
                String devmdl189 = getDevModel_Atongm();
                if (devmdl189.length() > 0) {
                    return "Atongm " + devmdl189;
                }
                return devmdl189;
            case DEVMANUF_LETV /*{ENCODED_INT: 191}*/:
                String devmdl190 = getDevModel_LeTV();
                if (devmdl190.length() > 0) {
                    return "LeTV " + devmdl190;
                }
                return devmdl190;
            case DEVMANUF_ZUK /*{ENCODED_INT: 192}*/:
                String devmdl191 = getDevModel_ZUK();
                if (devmdl191.length() > 0) {
                    return "ZUK " + devmdl191;
                }
                return devmdl191;
            case DEVMANUF_BEELINE /*{ENCODED_INT: 193}*/:
                String devmdl192 = getDevModel_Beeline();
                if (devmdl192.length() > 0) {
                    return "Beeline " + devmdl192;
                }
                return devmdl192;
            case DEVMANUF_SIM_AREN /*{ENCODED_INT: 194}*/:
                String devmdl193 = getDevModel_SIM_Aren();
                if (devmdl193.length() > 0) {
                    return "SIM-Aren " + devmdl193;
                }
                return devmdl193;
            case DEVMANUF_NYX /*{ENCODED_INT: 195}*/:
                String devmdl194 = getDevModel_Nyx();
                if (devmdl194.length() > 0) {
                    return "Nyx " + devmdl194;
                }
                return devmdl194;
            case DEVMANUF_ACTIONS /*{ENCODED_INT: 196}*/:
                String devmdl195 = getDevModel_Actions();
                if (devmdl195.length() > 0) {
                    return "Actions " + devmdl195;
                }
                return devmdl195;
            case DEVMANUF_RIKOMAGIC /*{ENCODED_INT: 197}*/:
                String devmdl196 = getDevModel_Rikomagic();
                if (devmdl196.length() > 0) {
                    return "Rikomagic " + devmdl196;
                }
                return devmdl196;
            case DEVMANUF_TTEM /*{ENCODED_INT: 198}*/:
                String devmdl197 = getDevModel_TTEM();
                if (devmdl197.length() > 0) {
                    return "TTEM " + devmdl197;
                }
                return devmdl197;
            default:
                return "";
        }
    }

    public static String getDeviceCodename() {
        int devManuf = getDevManufacturer();
        String mdl = getStrippedBuildModel(devManuf);
        switch (devManuf) {
            case 7:
                if (mdl.equals("NEXUS 7")) {
                    SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
                    String prod = Build.PRODUCT.trim().toUpperCase();
                    if (prod.startsWith("NAKASI") || sysinfo.CPUInfo_ARM_CPUInfo.impl == 65) {
                        return "Nakasi";
                    }
                    if (prod.startsWith("RAZOR") || sysinfo.CPUInfo_ARM_CPUInfo.impl == 81) {
                        return "Razor";
                    }
                }
                if (mdl.equals("NEXUS PLAYER")) {
                    return "Fugu";
                }
                break;
            case 20:
                if (mdl.equals("NEXUS 9")) {
                    return "Volantis";
                }
                break;
            case 21:
                if (mdl.equals("NEXUS 6P")) {
                    return "Angler";
                }
                break;
            case 30:
                if (mdl.equals("NEXUS 4")) {
                    return "Occam";
                }
                if (mdl.equals("NEXUS 5")) {
                    return "Hammerhead";
                }
                if (mdl.equals("NEXUS 5X")) {
                    return "Bullhead";
                }
                break;
            case 33:
                if (mdl.equals("MOTO 360")) {
                    String brd = Build.BOARD.trim().toUpperCase();
                    if (brd.equals("MINNOW")) {
                        return "Minnow";
                    }
                    if (brd.equals("SMELT")) {
                        return "Smelt";
                    }
                }
                if (mdl.equals("NEXUS 6")) {
                    return "Shamu";
                }
                break;
            case 45:
                if (mdl.equals("GT-I9020") || mdl.equals("GT-I9020A") || mdl.equals("GT-I9020T") || mdl.equals("GT-I9023") || mdl.equals("NEXUS S")) {
                    return "Crespo";
                }
                if (mdl.equals("GT-I9250") || mdl.equals("GT-I9250M")) {
                    return "Maguro";
                }
                if (mdl.equals("GT-P8110") || mdl.equals("NEXUS 10")) {
                    return "Mantaray";
                }
                if (mdl.equals("SCH-I515") || mdl.equals("SCH-I516")) {
                    return "Toro";
                }
                if (mdl.startsWith("SM-G920") || mdl.equals("SGH-N520")) {
                    return "Zero F";
                }
                if (mdl.startsWith("SM-G925") || mdl.equals("SGH-N516") || mdl.equals("SGH-V504")) {
                    return "Zero";
                }
                if (mdl.startsWith("SM-G928")) {
                    return "Zen";
                }
                if (mdl.startsWith("SM-N910")) {
                    return "Muscat";
                }
                if (mdl.startsWith("SM-N920")) {
                    return "Noble";
                }
                if (mdl.equals("SPH-L700")) {
                    return "Toro Plus";
                }
                break;
        }
        return "";
    }

    private static long getBatteryCapacity_PowerProfile(Activity activity) {
        Object mPowerProfile_ = null;
        try {
            mPowerProfile_ = Class.forName("com.android.internal.os.PowerProfile").getConstructor(Context.class).newInstance(activity);
        } catch (Exception e) {
        }
        try {
            return Math.round(((Double) Class.forName("com.android.internal.os.PowerProfile").getMethod("getAveragePower", String.class).invoke(mPowerProfile_, "battery.capacity")).doubleValue());
        } catch (Exception e2) {
            return 0;
        }
    }

    private static long getBatteryCapacity_DevModelDB() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (sysinfo.DB_Battery_Capacity <= 0) {
            getDeviceModel();
        }
        return (long) sysinfo.DB_Battery_Capacity;
    }

    public static long[] getBatteryCapacity(Activity activity) {
        long capProf;
        if (activity == null) {
            capProf = 0;
        } else {
            capProf = getBatteryCapacity_PowerProfile(activity);
            if (capProf == 1000) {
                capProf = 0;
            }
        }
        return new long[]{capProf, getBatteryCapacity_DevModelDB()};
    }

    private static int getBatteryChargeRateMultiplier() {
        if (isBQAquarisM5() || isLenovoYogaTablet2_8() || isLGG2mini() || isLGG3S() || isLGL90() || isLGNexus4() || isLGNexus5() || isMotorolaMotoG() || isMotorolaMotoG2014() || isMotorolaMotoX() || isMotorolaMotoX2014() || isSamsungGalaxyS3Neo() || isSonyXperiaM()) {
            return -1;
        }
        if (isLGG3() || isMeizuM2Note()) {
            return 100;
        }
        if (isLGG2()) {
            return -10;
        }
        if (isAsusMeMOPad7_ME572C() || isAsusMeMOPad8_ME581CL() || isAsusNexus7() || isHuaweiP8Lite() || isOppoFind7() || isSamsungGalaxyAlpha() || isSamsungGalaxyJ5() || isSamsungGalaxyNote3() || isSamsungGalaxyNote3LTE() || isSamsungGalaxyNote4() || isSamsungGalaxyNote5() || isSamsungGalaxyNote10_1() || isSamsungGalaxyNotePro12_2() || isSamsungGalaxySIII() || isSamsungGalaxyS4() || isSamsungGalaxyS4CDMA() || isSamsungGalaxyS5() || isSamsungGalaxyS6() || isSamsungGalaxyS6Edge() || isSamsungGalaxyS6EdgePlus() || isSamsungGalaxyTab4_10_1() || isSamsungGalaxyTabS_8_4() || isSamsungGalaxyTabS_10_5()) {
            return 1000;
        }
        if (isOnePlusOne() || isSamsungGalaxyS4Active() || isSamsungGalaxyS4VE()) {
            return -1000;
        }
        return 1;
    }

    private static int getBatteryChargeRateMultiplier_Cached() {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.BattChgRate_Multiplier == -1) {
            sysInfoST.BattChgRate_Multiplier = getBatteryChargeRateMultiplier();
        }
        return sysInfoST.BattChgRate_Multiplier;
    }

    private static int getBatteryChargeRate_batt_current_now() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/power_supply/battery/batt_current_now");
        if (valStr.length() == 0) {
            return Integer.MIN_VALUE;
        }
        return strToInt(valStr);
    }

    private static int getBatteryChargeRate_current_now() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/power_supply/battery/current_now");
        if (valStr.length() == 0) {
            return Integer.MIN_VALUE;
        }
        return strToInt(valStr);
    }

    private static int getOldBatteryChargeRate_uA() {
        int cr_uA;
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.BattChgRate_Method == 0) {
            sysInfoST.BattChgRate_Method = 1;
            if (isAsusMeMOPad8_ME581C() || isAsusNexus7_2013()) {
                int cr_uA2 = getBatteryChargeRate_current_now();
                if (!(cr_uA2 == Integer.MIN_VALUE || cr_uA2 == 0)) {
                    sysInfoST.BattChgRate_Method = 6;
                }
            } else if (isHTCNexus9()) {
                int cr_uA3 = getBatteryChargeRate_current_now();
                if (!(cr_uA3 == Integer.MIN_VALUE || cr_uA3 == 0)) {
                    sysInfoST.BattChgRate_Method = 4;
                }
            } else if (isHTCOneE8_M8()) {
                int cr_uA4 = getBatteryChargeRate_batt_current_now();
                if (!(cr_uA4 == Integer.MIN_VALUE || cr_uA4 == 0)) {
                    sysInfoST.BattChgRate_Method = 2;
                }
            } else if (!(!isLGNexus5() || (cr_uA = getBatteryChargeRate_current_now()) == Integer.MIN_VALUE || cr_uA == 0)) {
                sysInfoST.BattChgRate_Method = 5;
            }
        }
        switch (sysInfoST.BattChgRate_Method) {
            case 2:
                int cr_uA5 = getBatteryChargeRate_batt_current_now();
                if (!(cr_uA5 == Integer.MIN_VALUE || cr_uA5 == 0)) {
                    return -cr_uA5;
                }
            case 4:
                int cr_uA6 = getBatteryChargeRate_current_now();
                if (!(cr_uA6 == Integer.MIN_VALUE || cr_uA6 == 0)) {
                    return cr_uA6;
                }
            case 5:
                int cr_uA7 = getBatteryChargeRate_current_now();
                if (!(cr_uA7 == Integer.MIN_VALUE || cr_uA7 == 0)) {
                    return -cr_uA7;
                }
            case 6:
                int cr_uA8 = getBatteryChargeRate_current_now();
                if (!(cr_uA8 == Integer.MIN_VALUE || cr_uA8 == 0)) {
                    return cr_uA8 * 1000;
                }
        }
        return Integer.MIN_VALUE;
    }

    private static int getBatteryChargeCounter_charge_counter() {
        String valStr = readFirstLineFromSystemFile_Str("/sys/class/power_supply/battery/charge_counter");
        if (valStr.length() == 0) {
            return Integer.MIN_VALUE;
        }
        return strToInt(valStr);
    }

    private static int getOldBatteryChargeCounter_uAh() {
        int cc_uAh;
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.BattChgCnt_Method == 0) {
            sysInfoST.BattChgCnt_Method = 1;
            switch (Build.VERSION.SDK_INT) {
                case 23:
                    if (!(!isHTCNexus9() || (cc_uAh = getBatteryChargeCounter_charge_counter()) == Integer.MIN_VALUE || cc_uAh == 0)) {
                        sysInfoST.BattChgCnt_Method = 2;
                        break;
                    }
            }
        }
        switch (sysInfoST.BattChgRate_Method) {
            case 2:
                int cc_uAh2 = getBatteryChargeCounter_charge_counter();
                if (!(cc_uAh2 == Integer.MIN_VALUE || cc_uAh2 == 0)) {
                    return cc_uAh2;
                }
        }
        return Integer.MIN_VALUE;
    }

    private static String chargeRateToStr(float cr_mA, boolean debugMode) {
        if (debugMode) {
            if (cr_mA < 10.0f) {
                return Float.toString(((float) Math.round(cr_mA * 100.0f)) / 100.0f);
            }
            if (cr_mA < 100.0f) {
                return Float.toString(((float) Math.round(cr_mA * 10.0f)) / 10.0f);
            }
            return Integer.toString(Math.round(cr_mA));
        } else if (cr_mA < 10.0f) {
            return String.format("%.2f", Float.valueOf(cr_mA));
        } else if (cr_mA < 100.0f) {
            return String.format("%.1f", Float.valueOf(cr_mA));
        } else {
            return String.format("%d", Integer.valueOf(Math.round(cr_mA)));
        }
    }

    public static BatteryInfo getBatteryInfo(Activity activity, int tempSetting, boolean debugMode) {
        Intent batteryStatus;
        int cc_uAh;
        int cr_uA;
        BatteryManager bmgr;
        if (activity == null) {
            return null;
        }
        BatteryInfo res = new BatteryInfo();
        if (Build.VERSION.SDK_INT >= 21 && (bmgr = (BatteryManager) activity.getSystemService("batterymanager")) != null) {
            int cr_uA2 = bmgr.getIntProperty(2);
            if (!(cr_uA2 == Integer.MIN_VALUE || cr_uA2 == 0)) {
                res.chargeRate_uA = getBatteryChargeRateMultiplier_Cached() * cr_uA2;
                res.chargeRate_Str = chargeRateToStr(((float) Math.abs(res.chargeRate_uA)) / 1000.0f, debugMode);
            }
            int cc_uAh2 = bmgr.getIntProperty(1);
            if (!(cc_uAh2 == Integer.MIN_VALUE || cc_uAh2 == 0)) {
                res.chargeCnt_uAh = cc_uAh2;
                res.chargeCnt_Str = String.format("%d", Integer.valueOf(cc_uAh2 / 1000));
            }
            long enecnt = bmgr.getLongProperty(5);
            if (!(enecnt == Long.MIN_VALUE || enecnt == 0)) {
                res.energyCnt_Str = String.format("%d", Long.valueOf(enecnt / 1000000));
            }
        }
        if (!(res.chargeRate_uA != Integer.MIN_VALUE || (cr_uA = getOldBatteryChargeRate_uA()) == Integer.MIN_VALUE || cr_uA == 0)) {
            res.chargeRate_uA = cr_uA;
            res.chargeRate_Str = chargeRateToStr(((float) Math.abs(res.chargeRate_uA)) / 1000.0f, debugMode);
        }
        if (!(res.chargeCnt_uAh != Integer.MIN_VALUE || (cc_uAh = getOldBatteryChargeCounter_uAh()) == Integer.MIN_VALUE || cc_uAh == 0)) {
            res.chargeCnt_uAh = cc_uAh;
            res.chargeCnt_Str = String.format("%d", Integer.valueOf(cc_uAh / 1000));
        }
        IntentFilter ifilter = new IntentFilter("android.intent.action.BATTERY_CHANGED");
        if (ifilter == null || (batteryStatus = activity.registerReceiver(null, ifilter)) == null) {
            return null;
        }
        res.status = batteryStatus.getIntExtra("status", -1);
        res.health = batteryStatus.getIntExtra("health", -1);
        int level = batteryStatus.getIntExtra("level", -1);
        int scale = batteryStatus.getIntExtra("scale", -1);
        if (scale == 0) {
            res.level = "Unknown";
        } else if (debugMode) {
            res.level = Math.round((((float) level) / ((float) scale)) * 100.0f) + " %";
        } else {
            res.level = String.format("%d %%", Integer.valueOf(Math.round((((float) level) / ((float) scale)) * 100.0f)));
        }
        res.powerSource = batteryStatus.getIntExtra("plugged", -1);
        String tech = batteryStatus.getStringExtra("technology");
        if (tech != null) {
            res.tech = tech;
            int devManuf = getDevManufacturer();
            switch (devManuf) {
                case 7:
                    if (getStrippedBuildModel(devManuf).equals("NEXUS 7")) {
                        res.tech = "Li-Po";
                        break;
                    }
                    break;
                case 20:
                    if (getStrippedBuildModel(devManuf).equals("NEXUS 9")) {
                        res.tech = "Li-Po";
                        break;
                    }
                    break;
                case 30:
                    String mdl = getStrippedBuildModel(devManuf);
                    if (mdl.equals("NEXUS 4") || mdl.equals("NEXUS 5")) {
                        res.tech = "Li-Po";
                        break;
                    }
                case 33:
                    if (getStrippedBuildModel(devManuf).equals("NEXUS 6")) {
                        res.tech = "Li-Po";
                        break;
                    }
                    break;
                case 45:
                    if (getStrippedBuildModel(devManuf).startsWith("SM-N920")) {
                        res.tech = "Li-Po";
                        break;
                    }
                    break;
                case 77:
                    if (getStrippedBuildModel(devManuf).equals("VSP355G")) {
                        res.tech = "Li-Po";
                        break;
                    }
                    break;
            }
        }
        int temp = batteryStatus.getIntExtra("temperature", -1);
        if (temp > 0) {
            if (isLenovoYogaTablet10HDPlus()) {
                res.temp = tempToStr((float) temp, tempSetting);
            } else {
                res.temp = tempToStr(((float) temp) / 10.0f, tempSetting);
            }
        }
        int volt = batteryStatus.getIntExtra("voltage", -1);
        if (volt <= 0) {
            return res;
        }
        res.volt = String.format("%.3f V", Float.valueOf(((float) volt) / 1000.0f));
        return res;
    }

    private static String getKernelVersion_proc_version() {
        String res = "";
        File version = new File("/proc/version");
        if (version != null && version.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(version));
                if (br != null) {
                    String aLine = br.readLine();
                    if (aLine != null && aLine.startsWith("Linux version")) {
                        res = aLine.substring(14);
                    }
                    br.close();
                }
            } catch (IOException e) {
            }
        }
        return res;
    }

    public static String getKernelVersion() {
        String res = getKernelVersion_proc_version();
        if (res.length() != 0) {
            return res;
        }
        String res2 = System.getProperty("os.version");
        if (res2 == null) {
            return "";
        }
        return res2;
    }

    public static String decodeAndroidRelease(String rel) {
        if (rel.equals("1.5") || rel.startsWith("1.5.") || rel.startsWith("1.5-")) {
            return "Cupcake";
        }
        if (rel.equals("1.6") || rel.startsWith("1.6.") || rel.startsWith("1.6-")) {
            return "Donut";
        }
        if (rel.equals("2.0") || rel.startsWith("2.0.") || rel.startsWith("2.0-") || rel.equals("2.1") || rel.startsWith("2.1.") || rel.startsWith("2.1-")) {
            return "Eclair";
        }
        if (rel.equals("2.2") || rel.startsWith("2.2.") || rel.startsWith("2.2-")) {
            return "Froyo";
        }
        if (rel.equals("2.3") || rel.startsWith("2.3.") || rel.startsWith("2.3-")) {
            return "Gingerbread";
        }
        if (rel.equals("3.0") || rel.startsWith("3.0.") || rel.startsWith("3.0-") || rel.equals("3.1") || rel.startsWith("3.1.") || rel.startsWith("3.1-") || rel.equals("3.2") || rel.startsWith("3.2.") || rel.startsWith("3.2-")) {
            return "Honeycomb";
        }
        if (rel.equals("4.0") || rel.startsWith("4.0.") || rel.startsWith("4.0-")) {
            return "Ice Cream Sandwich";
        }
        if (rel.equals("4.1") || rel.startsWith("4.1.") || rel.startsWith("4.1-") || rel.equals("4.2") || rel.startsWith("4.2.") || rel.startsWith("4.2-") || rel.equals("4.3") || rel.startsWith("4.3.") || rel.startsWith("4.3-")) {
            return "Jelly Bean";
        }
        if (rel.equals("4.4") || rel.startsWith("4.4.") || rel.startsWith("4.4-")) {
            return "KitKat";
        }
        if (rel.equals("4.4W") || rel.startsWith("4.4W.") || rel.startsWith("4.4W-")) {
            return "KitKat for Watches";
        }
        if (rel.equals("5.0") || rel.startsWith("5.0.") || rel.startsWith("5.0-") || rel.equals("5.1") || rel.startsWith("5.1.") || rel.startsWith("5.1-")) {
            return "Lollipop";
        }
        if (rel.equals("6.0") || rel.startsWith("6.0.") || rel.startsWith("6.0-")) {
            return "Marshmallow";
        }
        return "";
    }

    public static int getProcessesCount(Activity activity) {
        if (activity == null) {
            return -1;
        }
        ActivityManager actmgr = (ActivityManager) activity.getSystemService("activity");
        if (actmgr == null) {
            return -1;
        }
        List<ActivityManager.RunningAppProcessInfo> procList = actmgr.getRunningAppProcesses();
        if (procList != null && procList.size() > 0) {
            for (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : procList) {
            }
        }
        if (procList == null || procList.size() < 0) {
            return -1;
        }
        return procList.size();
    }

    public static int getServicesCount(Activity activity) {
        if (activity == null) {
            return -1;
        }
        ActivityManager actmgr = (ActivityManager) activity.getSystemService("activity");
        if (actmgr == null) {
            return -1;
        }
        List<ActivityManager.RunningServiceInfo> srvList = actmgr.getRunningServices(1000);
        if (srvList != null && srvList.size() > 0) {
            for (ActivityManager.RunningServiceInfo runningServiceInfo : srvList) {
            }
        }
        if (srvList == null || srvList.size() < 0) {
            return -1;
        }
        return srvList.size();
    }

    public static boolean doRootOperation() {
        DataInputStream is;
        String idStr;
        try {
            Process p = Runtime.getRuntime().exec("su");
            DataOutputStream os = new DataOutputStream(p.getOutputStream());
            os.writeBytes("id\n");
            os.writeBytes("exit\n");
            os.flush();
            try {
                p.waitFor();
                if (p.exitValue() == 255 || (is = new DataInputStream(p.getInputStream())) == null || (idStr = is.readLine()) == null || idStr.length() <= 0) {
                    return false;
                }
                Log.d("doRootOperation", idStr);
                return idStr.contains("uid=0(") || idStr.contains("(root)");
            } catch (InterruptedException e) {
                return false;
            }
        } catch (IOException e2) {
            return false;
        }
    }

    private static boolean isPackageInstalled(Activity activity, String pkgName) {
        PackageManager pkgMgr;
        if (activity == null || (pkgMgr = activity.getPackageManager()) == null) {
            return false;
        }
        try {
            pkgMgr.getPackageInfo(pkgName, 128);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    private static boolean isFileExists(String fileName) {
        File fil = new File(fileName);
        if (fil == null || !fil.exists()) {
            return false;
        }
        return true;
    }

    public static boolean checkRootedDevice(Activity activity) {
        if (isFileExists("/system/app/Superuser.apk")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 1 ***");
        if (isPackageInstalled(activity, "com.noshufou.android.su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 2 ***");
        if (isPackageInstalled(activity, "com.thirdparty.superuser")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 3 ***");
        if (isPackageInstalled(activity, "eu.chainfire.supersu")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 4 ***");
        if (isPackageInstalled(activity, "com.koushikdutta.superuser")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 5 ***");
        if (isFileExists("/system/bin/su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 6 ***");
        if (isFileExists("/system/xbin/su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 7 ***");
        if (isFileExists("/sbin/su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 8 ***");
        if (isFileExists("/system/su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 9 ***");
        if (isFileExists("/system/bin/.ext/.su")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 10 ***");
        if (isFileExists("/system/usr/we-need-root/su-backup")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 11 ***");
        if (isFileExists("/system/xbin/mu")) {
            return true;
        }
        Log.d("checkRootedDevice", "*** 12 ***");
        return false;
    }

    public static class PCIDevInfo {
        public int pciBus;
        public int pciDev;
        public int pciDevID;
        public int pciFunc;
        public int pciVenID;

        protected PCIDevInfo() {
        }
    }

    public static List<PCIDevInfo> getPCIDevices() {
        List<PCIDevInfo> res = new ArrayList<>();
        File devices = new File("/proc/bus/pci/devices");
        if (devices != null && devices.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(devices));
                if (br != null) {
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        }
                        int i = aLine.indexOf("\t");
                        if (i > 0) {
                            String bdfStr = aLine.substring(0, i);
                            if (bdfStr.length() == 4) {
                                int bdf = hexToInt(bdfStr);
                                String aLine2 = aLine.substring(i + 1);
                                int i2 = aLine2.indexOf("\t");
                                if (i2 > 0) {
                                    String vidDidStr = aLine2.substring(0, i2);
                                    if (vidDidStr.length() == 8) {
                                        int venID = hexToInt(vidDidStr.substring(0, 4));
                                        int devID = hexToInt(vidDidStr.substring(4));
                                        PCIDevInfo pdi = new PCIDevInfo();
                                        pdi.pciBus = (bdf >> 8) & 255;
                                        pdi.pciDev = (bdf >> 3) & 31;
                                        pdi.pciFunc = bdf & 7;
                                        pdi.pciVenID = venID;
                                        pdi.pciDevID = devID;
                                        res.add(pdi);
                                    }
                                }
                            }
                        }
                    }
                    br.close();
                }
            } catch (IOException e) {
            }
        }
        return res;
    }

    public static class USBDevInfo {
        public int bClass = -1;
        public int bMaxPwr = -1;
        public int bProt = -1;
        public int bSubClass = -1;
        public int idProduct = -1;
        public int idVendor = -1;
        public String manuf = "";
        public String prod = "";
        public String serial = "";
        public int speed = -1;
        public String ver = "";

        protected USBDevInfo() {
        }
    }

    public static int getUSBDeviceCount() {
        File[] flist;
        File f = new File(USBDEV_DIR);
        if (f == null || !f.exists() || (flist = f.listFiles()) == null) {
            return 0;
        }
        return flist.length;
    }

    public static List<USBDevInfo> getUSBDevices() {
        File[] flist;
        String fname;
        String venStr;
        List<USBDevInfo> res = new ArrayList<>();
        File f = new File(USBDEV_DIR);
        if (!(f == null || !f.exists() || (flist = f.listFiles()) == null)) {
            int length = flist.length;
            for (int i = 0; i < length; i++) {
                File fil = flist[i];
                if (!(fil == null || (fname = fil.getName()) == null || (venStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/idVendor").trim()) == null || venStr.length() != 4)) {
                    USBDevInfo udi = new USBDevInfo();
                    udi.idVendor = hexToInt(venStr);
                    String prodStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/idProduct").trim();
                    if (prodStr != null && prodStr.length() == 4) {
                        udi.idProduct = hexToInt(prodStr);
                    }
                    udi.manuf = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/manufacturer").trim();
                    udi.prod = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/product").trim();
                    udi.serial = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/serial").trim();
                    udi.ver = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/version").trim();
                    String classStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/bDeviceClass").trim();
                    if (classStr != null && classStr.length() == 2) {
                        udi.bClass = hexToInt(classStr);
                    }
                    String subClassStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/bDeviceSubClass").trim();
                    if (subClassStr != null && subClassStr.length() == 2) {
                        udi.bSubClass = hexToInt(subClassStr);
                    }
                    String protStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/bDeviceProtocol").trim();
                    if (protStr != null && protStr.length() == 2) {
                        udi.bProt = hexToInt(protStr);
                    }
                    String pwrStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/bMaxPower").trim();
                    if (pwrStr.toUpperCase().indexOf("MA") == pwrStr.length() - 2) {
                        pwrStr = pwrStr.substring(0, pwrStr.length() - 2).trim();
                    }
                    if (pwrStr.length() > 0 && !pwrStr.equals("0")) {
                        udi.bMaxPwr = strToInt(pwrStr);
                    }
                    String spdStr = readFirstLineFromSystemFile_Str("/sys/bus/usb/devices/" + fname + "/speed").trim();
                    if (spdStr.length() > 0) {
                        udi.speed = strToInt(spdStr);
                    }
                    if (udi.idVendor >= 0 && udi.idProduct >= 0) {
                        res.add(udi);
                    }
                }
            }
        }
        return res;
    }

    public static String usbClassSubclassProtocolIDToStr(int bClass, int bSubClass, int bProtocol) {
        switch (bClass) {
            case 1:
                switch (bSubClass) {
                    case 1:
                        return "Audio Control";
                    case 2:
                        return "Audio Streaming";
                    case 3:
                        return "MIDI Streaming";
                    default:
                        return "Audio";
                }
            case 2:
                return "Communications";
            case 3:
                return "Human Interface Device";
            case 5:
                return "Physical";
            case 6:
                return "Imaging";
            case 7:
                return "Printer";
            case 8:
                return "Mass Storage";
            case 9:
                switch (bSubClass) {
                    case 0:
                        switch (bProtocol) {
                            case 0:
                                return "Full-Speed Hub";
                            case 1:
                                return "Hi-Speed Hub with single TT";
                            case 2:
                                return "Hi-Speed Hub with multiple TTs";
                        }
                }
                return "Hub";
            case 10:
                return "CDC-Data";
            case 11:
                return "Smart Card";
            case 13:
                return "Content Security";
            case 14:
                return "Video";
            case 15:
                return "Personal Healthcare";
            case 16:
                return "Audio/Video Devices";
            case 17:
                return "Billboard Device";
            case 220:
                return "Diagnostic Device";
            case 224:
                switch (bSubClass) {
                    case 1:
                        switch (bProtocol) {
                            case 1:
                                return "Bluetooth";
                            case 2:
                                return "UWB Radio Control";
                            case 3:
                                return "Remote NDIS";
                            case 4:
                                return "Bluetooth AMP Controller";
                        }
                    case 2:
                        switch (bProtocol) {
                            case 1:
                                return "Host Wire Adapter Control/Data";
                            case 2:
                                return "Device Wire Adapter Control/Data";
                            case 3:
                                return "Device Wire Adapter Isochronous";
                        }
                }
                return "Wireless Controller";
            case 239:
                switch (bSubClass) {
                    case 1:
                        switch (bProtocol) {
                            case 1:
                                return "Active Sync";
                            case 2:
                                return "Palm Sync";
                        }
                    case 2:
                        switch (bProtocol) {
                            case 1:
                                return "Interface Association Descriptor";
                            case 2:
                                return "Wire Adapter Multifunction Peripheral";
                        }
                    case 3:
                        switch (bProtocol) {
                            case 1:
                                return "Cable Based Association Framework";
                        }
                    case 4:
                        switch (bProtocol) {
                            case 1:
                                return "RNDIS over Ethernet";
                            case 2:
                                return "RNDIS over WiFi";
                            case 3:
                                return "RNDIS over WiMAX";
                            case 4:
                                return "RNDIS over WWAN";
                            case 5:
                                return "RNDIS for Raw IPv4";
                            case 6:
                                return "RNDIS for Raw IPv6";
                            case 7:
                                return "RNDIS for GPRS";
                        }
                    case 5:
                        switch (bProtocol) {
                            case 0:
                                return "USB3 Vision Control Interface";
                            case 1:
                                return "USB3 Vision Event Interface";
                            case 2:
                                return "USB3 Vision Streaming Interface";
                        }
                }
                return "Miscellaneous";
            default:
                return "";
        }
    }

    public static int getDeviceType(Context c) {
        if (isRunningOnWatchDevice(c)) {
            return 5;
        }
        if (isRunningOnTvDevice(c)) {
            return 8;
        }
        return SysInfoSingleTon.getInstance().DB_Device_Type;
    }

    public static int getInstalledRAM_MB(long totmemmb) {
        if (isBlackBerryDevice()) {
            String brd = Build.BOARD.trim().toUpperCase();
            if (brd.startsWith("SQW100-")) {
                return 3072;
            }
            if (brd.startsWith("SQC100-") || brd.startsWith("SQK100-") || brd.startsWith("SQN100-") || brd.startsWith("SQR100-") || brd.startsWith("STA100-") || brd.startsWith("STK100-") || brd.startsWith("STL100-") || brd.startsWith("STR100-")) {
                return 2048;
            }
            if (brd.startsWith("STJ100-")) {
                return 1536;
            }
        }
        float gb = ((float) totmemmb) / 1024.0f;
        if (gb > 9.5f && gb < 10.0f) {
            return 10240;
        }
        if (gb > 8.5f && gb < 9.0f) {
            return 9216;
        }
        if (gb > 7.5f && gb < 8.0f) {
            return 8192;
        }
        if (gb > 6.5f && gb < 7.0f) {
            return 7168;
        }
        if (gb > 5.5f && gb < 6.0f) {
            return 6144;
        }
        if (gb > 4.5f && gb < 5.0f) {
            return 5120;
        }
        if (gb > 3.5f && gb < 4.0f) {
            return 4096;
        }
        if (gb > 3.0f && gb < 3.5f) {
            return 3584;
        }
        if (gb > 2.5f && gb < 3.0f) {
            return 3072;
        }
        if (gb > 2.0f && gb < 2.5f) {
            return 2560;
        }
        if (gb > 1.5f && gb < 2.0f) {
            return 2048;
        }
        if (gb > 1.0f && gb < 1.5f) {
            return 1536;
        }
        if (gb > 0.75f && gb < 1.0f) {
            return 1024;
        }
        if (gb > 0.5f && gb < 0.75f) {
            return 768;
        }
        if (gb <= 0.25f || gb >= 0.5f) {
            return 0;
        }
        return 512;
    }

    private static int getCPUCoreCount_sys() {
        File[] files;
        try {
            File dir = new File("/sys/devices/system/cpu/");
            if (dir == null || !dir.exists() || (files = dir.listFiles(new FileFilter() {
                /* class com.finalwire.aidaengine.SysInfo.AnonymousClass1CpuFilter */

                public boolean accept(File pathname) {
                    if (Pattern.matches("cpu[0-9]+", pathname.getName())) {
                        return true;
                    }
                    return false;
                }
            })) == null) {
                return 1;
            }
            return files.length;
        } catch (Exception e) {
            return 1;
        }
    }

    public static int getCPUCoreCount() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (sysinfo.CPUInfo_x86_CoreCount > 0) {
            return sysinfo.CPUInfo_x86_CoreCount;
        }
        int cores = getCPUCoreCount_sys();
        if (sysinfo.CPUInfo_ARM_CoreCount > cores) {
            return sysinfo.CPUInfo_ARM_CoreCount;
        }
        return cores;
    }

    public static String getCPUScalingGovernor(int cpucore) {
        return readFirstLineFromSystemFile_Str("/sys/devices/system/cpu/cpu" + cpucore + "/cpufreq/scaling_governor");
    }

    public static long getCurrentCPUCoreClock(int cpucore, boolean refresh) {
        if (!refresh && !new File("/sys/devices/system/cpu/cpu" + cpucore).exists()) {
            return 0;
        }
        String valStr = readFirstLineFromSystemFile_Str("/sys/devices/system/cpu/cpu" + cpucore + "/cpufreq/scaling_cur_freq");
        if (valStr.length() == 0) {
            return -1;
        }
        long value = strToLong(valStr);
        if (value > 0) {
            return value / 1000;
        }
        return 0;
    }

    public static long getMinCPUCoreClock(int cpucore) {
        String valStr = readFirstLineFromSystemFile_Str("/sys/devices/system/cpu/cpu" + cpucore + "/cpufreq/cpuinfo_min_freq");
        if (valStr.length() == 0) {
            return 0;
        }
        long value = strToLong(valStr);
        if (value > 0) {
            return value / 1000;
        }
        return 0;
    }

    public static long getMaxCPUCoreClock(int cpucore) {
        String valStr = readFirstLineFromSystemFile_Str("/sys/devices/system/cpu/cpu" + cpucore + "/cpufreq/cpuinfo_max_freq");
        if (valStr.length() == 0) {
            return 0;
        }
        long value = strToLong(valStr);
        if (value > 0) {
            return value / 1000;
        }
        return 0;
    }

    private static Float[] getCPUCycles_proc_stat() {
        BufferedReader br;
        String[] split;
        Float[] res = null;
        try {
            File stat = new File("/proc/stat");
            if (!(stat == null || !stat.exists() || (br = new BufferedReader(new FileReader(stat))) == null)) {
                String aLine = br.readLine();
                if (aLine != null && aLine.startsWith("cpu ") && (split = aLine.substring(4).trim().split(" ")) != null && split.length >= 7) {
                    float stat_user = strToFloat(split[0]);
                    float stat_nice = strToFloat(split[1]);
                    float stat_system = strToFloat(split[2]);
                    float stat_idle = strToFloat(split[3]);
                    res = new Float[]{Float.valueOf(stat_user + stat_nice + stat_system + strToFloat(split[4]) + strToFloat(split[5]) + strToFloat(split[6])), Float.valueOf(stat_idle)};
                }
                br.close();
            }
        } catch (IOException e) {
        }
        return res;
    }

    public static String getCPULoad_Str() {
        Float[] cpucycles = getCPUCycles_proc_stat();
        if (cpucycles == null || cpucycles.length != 2 || cpucycles[0].floatValue() <= 0.0f || cpucycles[1].floatValue() <= 0.0f) {
            return "";
        }
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        float cycles_used = cpucycles[0].floatValue() - sysinfo.CPUCycles_Used.floatValue();
        String res = String.format("%d %%", Integer.valueOf(Math.round((cycles_used / (cycles_used + (cpucycles[1].floatValue() - sysinfo.CPUCycles_Idle.floatValue()))) * 100.0f)));
        sysinfo.CPUCycles_Used = cpucycles[0];
        sysinfo.CPUCycles_Idle = cpucycles[1];
        return res;
    }

    private static int getSoCModel_x86() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (sysinfo.CPUInfo_isX86_Intel) {
            switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                case 132720:
                    if (!sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2")) {
                        return 5;
                    }
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2420 ")) {
                        return 1;
                    }
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2460 ")) {
                        return 2;
                    }
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2480 ")) {
                        return 3;
                    }
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2610 ")) {
                        return 4;
                    }
                    return 5;
                case 198224:
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2520 ")) {
                            return 6;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2560 ")) {
                            return 7;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2580 ")) {
                            return 8;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z2760 ")) {
                            return 9;
                        }
                    }
                    return 10;
                case 198256:
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3680 ")) {
                            return 11;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3680D ")) {
                            return 12;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3735D ")) {
                            return 13;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3735E ")) {
                            return 14;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3735F ")) {
                            return 15;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3735G ")) {
                            return 16;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3736F ")) {
                            return 17;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3736G ")) {
                            return 18;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3740 ")) {
                            return 19;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3740D ")) {
                            return 20;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3745 ")) {
                            return 21;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3745D ")) {
                            return 22;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3770 ")) {
                            return 23;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3770D ")) {
                            return 24;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3775 ")) {
                            return 25;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3775D ")) {
                            return 26;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3785 ")) {
                            return 27;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3795 ")) {
                            return 28;
                        }
                    }
                    return 29;
                case 263840:
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3460 ")) {
                            return 30;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3480 ")) {
                            return 31;
                        }
                    }
                    return 32;
                case 263872:
                    if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8300 ")) {
                            return 33;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8350 ")) {
                            return 34;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8500 ")) {
                            return 35;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8550 ")) {
                            return 36;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8700 ")) {
                            return 37;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-Z8750 ")) {
                            return 38;
                        }
                    }
                    return 39;
                case 329376:
                    if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3530 ")) {
                            return 40;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3560 ")) {
                            return 41;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3570 ")) {
                            return 42;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains(" CPU Z3580 ")) {
                            return 43;
                        }
                    }
                    if (build_Manufacturer().toUpperCase().equals("ASUS")) {
                        String mdl = Build.MODEL.trim().toUpperCase();
                        if (mdl.startsWith("ASUS ") || mdl.startsWith("ASUS-") || mdl.startsWith("ASUS_")) {
                            mdl = mdl.substring(5);
                        }
                        if (mdl.equals("K007") || mdl.equals("K01H") || mdl.equals("NEXUS PLAYER")) {
                            return 41;
                        }
                    }
                    return 44;
                case 329408:
                    return 45;
                case 329424:
                    if (sysinfo.CPUInfo_x86_ModelName.contains("-C3")) {
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-C3130 ")) {
                            return 46;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-C3230RK")) {
                            return 47;
                        }
                        if (sysinfo.CPUInfo_x86_ModelName.contains("-C3440 ")) {
                            return 48;
                        }
                    }
                    if (!build_Manufacturer().toUpperCase().equals("CHUWI") || !Build.MODEL.trim().toUpperCase().equals("CW-VI7")) {
                        return 49;
                    }
                    return 47;
                case 394832:
                    return 50;
            }
        } else if (sysinfo.CPUInfo_isX86_AMD) {
            switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                case 18878208:
                    return 1001;
            }
        }
        return 51;
    }

    private static int getSoCModel_ARM() {
        String cihw;
        int devManuf = getDevManufacturer();
        String brd = Build.BOARD.trim().toUpperCase();
        String hw = build_Hardware().toUpperCase();
        String mdl = getStrippedBuildModel(devManuf);
        String dev = Build.DEVICE.trim().toUpperCase();
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        String cpuinfo_hw = sysinfo.CPUInfo_ARM_CPUInfo.hardware.trim().toUpperCase();
        if (cpuinfo_hw.startsWith("SAMSUNG ")) {
            cpuinfo_hw = cpuinfo_hw.substring(8);
        } else if (cpuinfo_hw.startsWith("MEDIATEK ")) {
            cpuinfo_hw = cpuinfo_hw.substring(9);
        } else if (cpuinfo_hw.startsWith("HISILICON ")) {
            cpuinfo_hw = cpuinfo_hw.substring(10);
        }
        String cpuinfo_chipname = sysinfo.CPUInfo_ARM_CPUInfo.chipName.trim().toUpperCase();
        if (cpuinfo_chipname.startsWith("SAMSUNG ")) {
            cpuinfo_chipname = cpuinfo_chipname.substring(8);
        }
        String cpuinfo_msmhw = sysinfo.CPUInfo_ARM_CPUInfo.msmHardware.trim().toUpperCase();
        if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 78) {
            switch (devManuf) {
                case 20:
                    if (mdl.equals("NEXUS 9")) {
                        return 2010;
                    }
                    break;
            }
            if (readFirstLineFromSystemFile_Str("/sys/devices/soc0/family").trim().toUpperCase().equals("TEGRA13")) {
                return 2010;
            }
        }
        if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 65) {
            switch (devManuf) {
                case 4:
                    if (mdl.equals("RCT6272W23")) {
                        return 5004;
                    }
                    if (mdl.equals("RCT6378W2")) {
                        return 5009;
                    }
                    if (mdl.equals("RCT6573W23") || mdl.equals("RCT6672W23")) {
                        return 5011;
                    }
                case 7:
                    if (mdl.equals("NEXUS 7")) {
                        return 2005;
                    }
                    if (mdl.equals("TRANSFORMER TF101")) {
                        return 2003;
                    }
                    break;
                case 15:
                    if (mdl.equals("IQ239")) {
                        return SOC_SC6820;
                    }
                    if (mdl.equals("IQ436I") || mdl.equals("IQ4490I")) {
                        return SOC_SC7715;
                    }
                    if (mdl.equals("IQ442 QUAD")) {
                        return SOC_SNAP_S4_PLAY_200_MSM8225Q;
                    }
                    break;
                case 18:
                    if (mdl.equals("ODROID-U3")) {
                        return SOC_EXYNOS_4412;
                    }
                    if (mdl.equals("ODROID-XU3") || mdl.equals("ODROID-XU3 LITE")) {
                        return SOC_EXYNOS_5422;
                    }
                case 19:
                    if (mdl.equals("E270BSA")) {
                        return 5006;
                    }
                    if (mdl.equals("E2281")) {
                        return 5011;
                    }
                    break;
                case 20:
                    if (mdl.equals("DESIRE 400") || mdl.equals("DESIRE 400 DUAL SIM") || mdl.equals("T329T")) {
                        return SOC_NOVATHOR_U8500;
                    }
                    if (mdl.equals("WILDFIRE")) {
                        return SOC_SNAP_S1_MSM7225;
                    }
                    if (mdl.equals("WILDFIRE S")) {
                        return SOC_SNAP_S1_MSM7227;
                    }
                    if (mdl.equals("INSPIRE 4G")) {
                        return SOC_SNAP_S2_MSM8255;
                    }
                    if (mdl.equals("D500X") || mdl.equals("DESIRE 500") || mdl.equals("DESIRE 500 DUAL SIM")) {
                        return SOC_SNAP_200_MSM8225Q;
                    }
                    if (mdl.equals("DESIRE 700") || mdl.equals("DESIRE 700 DUAL SIM")) {
                        return SOC_SC7735S;
                    }
                    break;
                case 21:
                    if (mdl.equals("U8815")) {
                        return SOC_SNAP_S1_MSM7227A;
                    }
                    if (mdl.equals("G6-L22") || mdl.equals("G6-L33") || mdl.equals("G6-U01") || mdl.equals("G6-U10")) {
                        return SOC_SNAP_400_MSM8926;
                    }
                    if (mdl.equals("MEDIAPAD T1 8.0")) {
                        return SOC_SNAP_200_MSM8212;
                    }
                    if (mdl.equals("U9510E")) {
                        return 4001;
                    }
                    break;
                case 30:
                    if (mdl.equals("KU8800") || mdl.equals("P990") || mdl.equals("P993") || mdl.equals("SU660") || mdl.equals("SU880")) {
                        return 2002;
                    }
                    if (mdl.equals("V900")) {
                        return 2003;
                    }
                    if (mdl.equals("KU5900") || mdl.equals("LU3000") || mdl.equals("P970") || mdl.equals("P970H")) {
                        return 10005;
                    }
                    if (mdl.equals("P720") || mdl.equals("P720H") || mdl.equals("P725") || mdl.equals("P920") || mdl.equals("P920H") || mdl.equals("SU760") || mdl.equals("SU870")) {
                        return 10006;
                    }
                    if (mdl.equals("F490L")) {
                        return SOC_NUCLUN;
                    }
                    if (mdl.equals("G WATCH") || mdl.equals("G WATCH R") || mdl.equals("G WATCH URBANE")) {
                        return SOC_SNAP_400_APQ8026;
                    }
                    break;
                case 31:
                    if (mdl.equals("MX2")) {
                        return SOC_EXYNOS_4412;
                    }
                    if (mdl.equals("MX4PRO") || mdl.equals("MX4 PRO")) {
                        return SOC_EXYNOS_5430;
                    }
                case 32:
                    if (mdl.equals("NEO-X7")) {
                        return 5010;
                    }
                    break;
                case 33:
                    if (mdl.equals("MB855") || mdl.equals("MT870") || mdl.equals("XT865") || mdl.equals("XT882")) {
                        return 2002;
                    }
                    if (mdl.equals("MZ505") || mdl.equals("MZ600") || mdl.equals("MZ601") || mdl.equals("MZ602") || mdl.equals("MZ603") || mdl.equals("MZ604") || mdl.equals("MZ605") || mdl.equals("MZ606")) {
                        return 2003;
                    }
                    if (mdl.equals("MB508")) {
                        return 10001;
                    }
                    if (mdl.equals("MT716")) {
                        return 10002;
                    }
                    if (mdl.equals("MB520") || mdl.equals("ME525")) {
                        return 10003;
                    }
                    if (mdl.equals("MB612") || mdl.equals("MB526") || mdl.equals("XT610")) {
                        return 10004;
                    }
                    if (mdl.equals("MB810") || mdl.equals("ME722") || mdl.equals("ME811")) {
                        return 10005;
                    }
                    if (mdl.equals("MOTO 360")) {
                        if (brd.equals("MINNOW")) {
                            return 10005;
                        }
                        if (brd.equals("SMELT")) {
                            return SOC_SNAP_400_APQ8026;
                        }
                    }
                    if (mdl.equals("DROID RAZR") || mdl.equals("MB865") || mdl.equals("MZ607") || mdl.equals("MZ608") || mdl.equals("MZ609") || mdl.equals("MZ615") || mdl.equals("MZ616") || mdl.equals("MZ617") || mdl.equals("XT860") || mdl.equals("XT875") || mdl.equals("XT881") || mdl.equals("XT883") || mdl.equals("XT885") || mdl.equals("XT889") || mdl.equals("XT894") || mdl.equals("XT910") || mdl.equals("XT912")) {
                        return 10006;
                    }
                    if (mdl.equals("XT760")) {
                        return SOC_NOVATHOR_U8500;
                    }
                    break;
                case 38:
                    if (mdl.equals("TEGRANOTE-P1640")) {
                        return 2007;
                    }
                    break;
                case 41:
                    if (mdl.equals("R8106")) {
                        return SOC_SNAP_615_MSM8939;
                    }
                    break;
                case 45:
                    if (mdl.equals("GT-P7300") || mdl.equals("GT-P7310") || mdl.equals("GT-P7320T") || mdl.equals("GT-P7500") || mdl.equals("GT-P7501") || mdl.equals("GT-P7510") || mdl.equals("GT-P7511") || mdl.equals("SCH-I905") || mdl.equals("SGH-I957")) {
                        return 2003;
                    }
                    if (mdl.equals("SM-G110H") || mdl.equals("SM-G313H") || mdl.equals("SM-G350E")) {
                        return SOC_SC7715;
                    }
                    if (mdl.equals("SM-G355H")) {
                        return SOC_SC7735S;
                    }
                    if (mdl.equals("GT-S5280") || mdl.equals("GT-S5282") || mdl.equals("SM-G130H")) {
                        return SOC_SC8810;
                    }
                    if (mdl.equals("GT-I9103")) {
                        return 2002;
                    }
                    if (mdl.equals("GT-I9082") || mdl.equals("GT-I9105") || mdl.equals("GT-I9105P") || mdl.equals("GT-I9080") || mdl.equals("GT-I9080L")) {
                        return SOC_BCM28155;
                    }
                    if (mdl.equals("GT-S6810") || mdl.equals("GT-S6810L") || mdl.equals("GT-S6810M") || mdl.equals("GT-S6810P")) {
                        return 3002;
                    }
                    if (mdl.equals("SM-G350") || mdl.equals("SM-G3500")) {
                        return 3003;
                    }
                    if (mdl.equals("GT-S7582") || mdl.equals("GT-S7582L")) {
                        return SOC_BCM21664T;
                    }
                    if (mdl.equals("GT-I9060") || mdl.equals("GT-I9062") || mdl.equals("GT-I9063T")) {
                        return SOC_BCM23550;
                    }
                    if (mdl.equals("GT-I7680") || dev.equals("GT-I7680") || mdl.equals("GT-I9003")) {
                        return 10005;
                    }
                    if (mdl.equals("GT-I9000") || mdl.equals("GT-I9020") || mdl.equals("GT-I9020A") || mdl.equals("GT-I9020T") || mdl.equals("GT-I9023") || mdl.equals("GT-P1000") || mdl.equals("SC-02B") || mdl.equals("SGH-I897")) {
                        return 6001;
                    }
                    if (mdl.equals("GT-I9100") || mdl.equals("GT-P6200") || mdl.equals("GT-P6210") || mdl.equals("GT-P6211")) {
                        return 6004;
                    }
                    if (mdl.equals("GT-I9300")) {
                        return SOC_EXYNOS_4412;
                    }
                    if (mdl.equals("GT-P8110") || mdl.equals("NEXUS 10")) {
                        return SOC_EXYNOS_5250;
                    }
                    if (mdl.equals("GT-I9100G") || mdl.equals("GT-I9108") || mdl.equals("GT-P3100") || mdl.equals("GT-P3110") || mdl.equals("GT-P5100") || mdl.equals("GT-P5110") || mdl.equals("GT-P5113") || mdl.equals("SCH-I705") || mdl.equals("SCH-I915") || mdl.equals("SGH-I497") || mdl.equals("SGH-T779") || mdl.equals("SPH-P500")) {
                        return 10006;
                    }
                    if (mdl.equals("GALAXY NEXUS") || mdl.equals("GT-I9250") || mdl.equals("GT-I9250M") || mdl.equals("SCH-I515") || mdl.equals("SPH-L700")) {
                        return 10007;
                    }
                    if (mdl.equals("GT-I9260")) {
                        return 10008;
                    }
                    if (mdl.equals("GT-S7560M") || mdl.equals("GT-S7710")) {
                        return SOC_NOVATHOR_U8420;
                    }
                    if (mdl.equals("GT-I8160") || mdl.equals("GT-I8190") || mdl.equals("GT-I8190N") || mdl.equals("GT-I8530") || mdl.equals("GT-I9070")) {
                        return SOC_NOVATHOR_U8500;
                    }
                    if (mdl.equals("GT-S7260") || mdl.equals("GT-S7262")) {
                        return SOC_SC6820I;
                    }
                    if (mdl.equals("GT-S5830")) {
                        return SOC_SNAP_S1_MSM7227;
                    }
                    if (mdl.equals("GT-S6500") || mdl.equals("GT-S6500D")) {
                        return SOC_SNAP_S1_MSM7227A;
                    }
                    if (mdl.equals("SCH-I739")) {
                        return SOC_SNAP_S4_PLAY_MSM8625;
                    }
                    if (mdl.equals("GT-I8550") || mdl.equals("GT-I8552")) {
                        return SOC_SNAP_200_MSM8625Q;
                    }
                    if (mdl.equals("SM-R382")) {
                        return SOC_SNAP_400_APQ8026;
                    }
                    if (mdl.startsWith("SM-A700")) {
                        switch (sysinfo.CPUInfo_ARM_CPUInfo.part) {
                            case ARM_PART_A7 /*{ENCODED_INT: 3079}*/:
                            case ARM_PART_A15 /*{ENCODED_INT: 3087}*/:
                                return SOC_EXYNOS_5430;
                            case ARM_PART_A53 /*{ENCODED_INT: 3331}*/:
                                return SOC_SNAP_615_MSM8939;
                        }
                    }
                    break;
                case 47:
                case 48:
                    if (mdl.equals("E15A") || mdl.equals("E15I")) {
                        return SOC_SNAP_S1_MSM7227;
                    }
                    if (mdl.equals("LT22I") || mdl.equals("MT27I") || mdl.equals("ST25A") || mdl.equals("ST25I") || mdl.equals("ST27A") || mdl.equals("ST27I")) {
                        return SOC_NOVATHOR_U8500;
                    }
                    break;
                case 49:
                    if (mdl.startsWith("P90HD(")) {
                        return 5012;
                    }
                    break;
                case 54:
                    if (mdl.equals("XTAB-100DCI-3G")) {
                        return 5006;
                    }
                    if (mdl.equals("XTAB-9") || mdl.equals("XTAB-100QCR")) {
                        return 5010;
                    }
                case 55:
                    if (mdl.equals("HM 2A")) {
                        return SOC_LC1860C;
                    }
                    if (mdl.equals("HM NOTE 1LTE")) {
                        return SOC_SNAP_400_MSM8928;
                    }
                    break;
                case 56:
                    if (mdl.equals("XENTA TAB07-200")) {
                        return 5006;
                    }
                    break;
                case 59:
                    if (mdl.equals("BLADE S6")) {
                        return SOC_SNAP_615_MSM8939;
                    }
                    break;
                case 61:
                    if (mdl.equals("READMAN 6")) {
                        return 5001;
                    }
                    if (mdl.equals("TAB 9.7 IPS PLUS") || mdl.equals("TAB NOVUM") || mdl.equals("TAB PLAY 16GB") || mdl.equals("TAB SPEED") || mdl.equals("TAB T10")) {
                        return 5006;
                    }
                    if (mdl.equals("TAB SLIM 8GB") || mdl.equals("TAB SLIM 16GB")) {
                        return 5010;
                    }
                    break;
                case 62:
                    if (isAlcatelOT990()) {
                        return SOC_SNAP_S1_MSM7227;
                    }
                    if (mdl.equals("7040A") || mdl.equals("7040D") || mdl.equals("7040E") || mdl.equals("7040F") || mdl.equals("7041D") || mdl.equals("7041X")) {
                        return SOC_MT6582M;
                    }
                    if (mdl.equals("EVO7HD")) {
                        return 5006;
                    }
                    break;
                case 65:
                    if (mdl.equals("M9") || mdl.equals("M9PRO")) {
                        return 5010;
                    }
                    if (mdl.equals("P9")) {
                        return 5012;
                    }
                    break;
                case 66:
                    if (mdl.equals("V989")) {
                        return SOC_ALLW_A80T;
                    }
                    break;
                case 67:
                    if (mdl.equals("TPC-7151")) {
                        return 5006;
                    }
                    break;
                case 68:
                    if (mdl.equals("AFTM")) {
                        return SOC_BCM28155;
                    }
                    if (mdl.equals("KFOT") || mdl.equals("KINDLE FIRE")) {
                        return 10006;
                    }
                    if (mdl.equals("KFTT")) {
                        return 10007;
                    }
                    if (mdl.equals("KFJWA") || mdl.equals("KFJWI") || mdl.equals("KFSOWI")) {
                        return 10008;
                    }
                    break;
                case 79:
                    if (mdl.equals("Q600S") || mdl.equals("Q1000 OPUS") || mdl.equals("Q2000L")) {
                        return SOC_BCM23550;
                    }
                case 91:
                    if (mdl.equals("A091") || mdl.equals("A94")) {
                        return SOC_BCM23550;
                    }
                case 92:
                    if (mdl.equals("PRIMO81")) {
                        return SOC_ALLW_A31S;
                    }
                    break;
                case 107:
                    if (mdl.equals("U39GT")) {
                        return 5010;
                    }
                    break;
                case DEVMANUF_OVERMAX /*{ENCODED_INT: 120}*/:
                    if (mdl.equals("BASICTABII")) {
                        return 5004;
                    }
                    break;
                case DEVMANUF_REKAM /*{ENCODED_INT: 144}*/:
                    if (mdl.equals("3G910RQ")) {
                        return 5010;
                    }
                    break;
                case DEVMANUF_SUPRA /*{ENCODED_INT: 165}*/:
                    if (mdl.equals("M722")) {
                        return 5004;
                    }
                    if (mdl.equals("M74CG") || mdl.equals("M74DG") || mdl.equals("M94AG")) {
                        return SOC_SC7731G;
                    }
                case DEVMANUF_ESCORT /*{ENCODED_INT: 167}*/:
                    if (mdl.equals("ES702")) {
                        return 5004;
                    }
                    break;
                case DEVMANUF_BN /*{ENCODED_INT: 173}*/:
                    if (mdl.equals("BNTV400") || mdl.equals("BNTV600")) {
                        return 10008;
                    }
                case DEVMANUF_CELKON /*{ENCODED_INT: 179}*/:
                    if (mdl.equals("Q455") || mdl.equals("Q500")) {
                        return SOC_BCM23550;
                    }
                case DEVMANUF_RIKOMAGIC /*{ENCODED_INT: 197}*/:
                    if (mdl.equals("RKM MK802IV")) {
                        return 5010;
                    }
                    break;
            }
            String socFam = readFirstLineFromSystemFile_Str("/sys/devices/soc0/family").trim().toUpperCase();
            if (socFam.equals("TEGRA11")) {
                return 2007;
            }
            if (socFam.equals("TEGRA12")) {
                return 2009;
            }
        }
        if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 81) {
            switch (devManuf) {
                case 7:
                    if (mdl.equals("ME302KL")) {
                        return SOC_SNAP_S4_PRO_APQ8064;
                    }
                    if (mdl.equals("NEXUS 7") && cpuinfo_hw.equals("QCT APQ8064 FLO")) {
                        return SOC_SNAP_600_APQ8064FLO;
                    }
                    if (mdl.equals("T00N")) {
                        return SOC_SNAP_801_MSM8974AB;
                    }
                    break;
                case 17:
                    if (mdl.equals("E7")) {
                        return SOC_SNAP_800_MSM8274;
                    }
                    break;
                case 20:
                    if (mdl.equals("ONE") || mdl.equals("ONE DUAL SIM")) {
                        return SOC_SNAP_600_APQ8064T;
                    }
                case 30:
                    if (mdl.equals("NEXUS 4")) {
                        return SOC_SNAP_S4_PRO_APQ8064;
                    }
                    if (mdl.equals("NEXUS 5")) {
                        return SOC_SNAP_800_MSM8974;
                    }
                    if (mdl.equals("LS720") || mdl.equals("MS659") || mdl.equals("VM720") || mdl.equals("D500") || mdl.equals("D505") || mdl.equals("MS500")) {
                        return SOC_SNAP_400_MSM8930;
                    }
                case 33:
                    if (mdl.equals("MB886")) {
                        return SOC_SNAP_S4_PLUS_MSM8960;
                    }
                    if (mdl.equals("NEXUS 6")) {
                        return SOC_SNAP_805_APQ8084AB;
                    }
                    break;
                case 45:
                    if (mdl.equals("GT-I9128I")) {
                        return SOC_SNAP_S4_PLUS_MSM8230;
                    }
                    if (mdl.equals("SGH-I437") || mdl.equals("SGH-I437P")) {
                        return SOC_SNAP_S4_PLUS_MSM8960;
                    }
                    if (mdl.equals("GT-I9190") || mdl.equals("GT-I9192") || mdl.equals("GT-I9195") || mdl.equals("GT-I9195L") || mdl.equals("GT-S7275") || mdl.equals("GT-S7275R")) {
                        return SOC_SNAP_400_MSM8930AB;
                    }
                    if (mdl.equals("GT-I9505") || mdl.equals("GT-I9505G") || mdl.equals("SGH-I337") || mdl.equals("SGH-M919")) {
                        return SOC_SNAP_600_APQ8064T;
                    }
                    if (mdl.equals("SM-N900V")) {
                        return SOC_SNAP_800_MSM8974;
                    }
                    if (mdl.equals("SM-G900F") || mdl.equals("SM-G900FD") || mdl.equals("SM-G900P")) {
                        return SOC_SNAP_801_MSM8974AC;
                    }
                    break;
                case 47:
                    if (mdl.equals("C1904") || mdl.equals("C1905") || mdl.equals("C2004") || mdl.equals("C2005")) {
                        return SOC_SNAP_S4_PLUS_MSM8227;
                    }
                    if (mdl.equals("C6602") || mdl.equals("C6603")) {
                        return SOC_SNAP_S4_PRO_APQ8064;
                    }
                    if (mdl.equals("D6502") || mdl.equals("D6503") || mdl.equals("D6543") || mdl.equals("L50W")) {
                        return SOC_SNAP_801_MSM8974AB;
                    }
                    if (mdl.equals("SGP321") || mdl.equals("SGP351") || mdl.equals("SO-03E")) {
                        return SOC_SNAP_S4_PRO_APQ8064;
                    }
                    break;
            }
        }
        if (cpuinfo_chipname.startsWith("EXYNOS") || cpuinfo_hw.startsWith("EXYNOS") || cpuinfo_hw.startsWith("UNIVERSAL") || cpuinfo_hw.startsWith("SM")) {
            if (cpuinfo_chipname.equals("EXYNOS3110") || cpuinfo_hw.equals("EXYNOS3110") || cpuinfo_hw.equals("UNIVERSAL3110")) {
                return 6001;
            }
            if (cpuinfo_chipname.equals("EXYNOS3470") || cpuinfo_hw.equals("EXYNOS3470") || cpuinfo_hw.equals("UNIVERSAL3470")) {
                return 6002;
            }
            if (cpuinfo_chipname.equals("EXYNOS3475") || cpuinfo_hw.equals("EXYNOS3475") || cpuinfo_hw.equals("UNIVERSAL3475")) {
                return 6003;
            }
            if (cpuinfo_chipname.equals("EXYNOS4210") || cpuinfo_hw.equals("EXYNOS4210") || cpuinfo_hw.equals("UNIVERSAL4210") || cpuinfo_hw.equals("SMDK4210")) {
                return 6004;
            }
            if (cpuinfo_chipname.equals("EXYNOS4212") || cpuinfo_hw.equals("EXYNOS4212") || cpuinfo_hw.equals("UNIVERSAL4212")) {
                return SOC_EXYNOS_4212;
            }
            if (cpuinfo_chipname.equals("EXYNOS4412") || cpuinfo_hw.equals("EXYNOS4412") || cpuinfo_hw.equals("UNIVERSAL4412")) {
                return SOC_EXYNOS_4412;
            }
            if (cpuinfo_chipname.equals("EXYNOS5250") || cpuinfo_hw.equals("EXYNOS5250") || cpuinfo_hw.equals("UNIVERSAL5250")) {
                return SOC_EXYNOS_5250;
            }
            if (cpuinfo_chipname.equals("EXYNOS5260") || cpuinfo_hw.equals("EXYNOS5260") || cpuinfo_hw.equals("UNIVERSAL5260")) {
                return SOC_EXYNOS_5260;
            }
            if (cpuinfo_chipname.equals("EXYNOS5410") || cpuinfo_hw.equals("EXYNOS5410") || cpuinfo_hw.equals("UNIVERSAL5410")) {
                return SOC_EXYNOS_5410;
            }
            if (cpuinfo_chipname.equals("EXYNOS5420") || cpuinfo_hw.equals("EXYNOS5420") || cpuinfo_hw.equals("UNIVERSAL5420")) {
                return SOC_EXYNOS_5420;
            }
            if (cpuinfo_chipname.equals("EXYNOS5422") || cpuinfo_hw.equals("EXYNOS5422") || cpuinfo_hw.equals("UNIVERSAL5422")) {
                return SOC_EXYNOS_5422;
            }
            if (cpuinfo_chipname.equals("EXYNOS5430") || cpuinfo_hw.equals("EXYNOS5430") || cpuinfo_hw.equals("UNIVERSAL5430")) {
                return SOC_EXYNOS_5430;
            }
            if (cpuinfo_chipname.equals("EXYNOS5433") || cpuinfo_hw.equals("EXYNOS5433") || cpuinfo_hw.equals("UNIVERSAL5433")) {
                return SOC_EXYNOS_5433;
            }
            if (cpuinfo_chipname.equals("EXYNOS5800") || cpuinfo_hw.equals("EXYNOS5800") || cpuinfo_hw.equals("UNIVERSAL5800")) {
                return SOC_EXYNOS_5800;
            }
            if (cpuinfo_chipname.equals("EXYNOS7410") || cpuinfo_hw.equals("EXYNOS7410") || cpuinfo_hw.equals("UNIVERSAL7410")) {
                return SOC_EXYNOS_7410;
            }
            if (cpuinfo_chipname.equals("EXYNOS7420") || cpuinfo_hw.equals("EXYNOS7420") || cpuinfo_hw.equals("UNIVERSAL7420")) {
                return SOC_EXYNOS_7420;
            }
            if (cpuinfo_chipname.equals("EXYNOS7580") || cpuinfo_hw.equals("EXYNOS7580") || cpuinfo_hw.equals("UNIVERSAL7580")) {
                return SOC_EXYNOS_7580;
            }
            if (cpuinfo_chipname.equals("EXYNOS8890") || cpuinfo_hw.equals("EXYNOS8890") || cpuinfo_hw.equals("UNIVERSAL8890")) {
                return SOC_EXYNOS_8890;
            }
            if (cpuinfo_hw.equals("SMDK4X12")) {
                return SOC_EXYNOS_4212_4412;
            }
        }
        if (cpuinfo_msmhw.length() > 0) {
            if (cpuinfo_msmhw.equals("APQ8084 ES1.1")) {
                return SOC_SNAP_805_APQ8084;
            }
            if (cpuinfo_msmhw.equals("MSM8210 CS")) {
                return SOC_SNAP_200_MSM8210;
            }
            if (cpuinfo_msmhw.equals("MSM8226 CS")) {
                return SOC_SNAP_400_MSM8226;
            }
            if (cpuinfo_msmhw.equals("MSM8228 CS")) {
                return SOC_SNAP_400_MSM8228;
            }
            if (cpuinfo_msmhw.equals("MSM8610 CS")) {
                return SOC_SNAP_200_MSM8610;
            }
            if (cpuinfo_msmhw.equals("MSM8626 CS")) {
                return SOC_SNAP_400_MSM8626;
            }
            if (cpuinfo_msmhw.equals("MSM8916 ES1.0")) {
                return SOC_SNAP_410_MSM8916;
            }
            if (cpuinfo_msmhw.equals("MSM8926")) {
                return SOC_SNAP_400_MSM8926;
            }
            if (cpuinfo_msmhw.equals("MSM8974AC ES1.1")) {
                return SOC_SNAP_801_MSM8974AC;
            }
            if (cpuinfo_msmhw.equals("MSM8992")) {
                return SOC_SNAP_808_MSM8992;
            }
        }
        if (cpuinfo_hw.length() > 0) {
            if (cpuinfo_hw.startsWith("QUALCOMM TECHNOLOGIES, INC MSM")) {
                String cihw2 = cpuinfo_hw.substring(30).trim();
                if (cihw2.equals("8208")) {
                    return SOC_SNAP_208_MSM8208;
                }
                if (cihw2.equals("8209")) {
                    return SOC_SNAP_210_MSM8209;
                }
                if (cihw2.equals("8216")) {
                    return SOC_SNAP_410_MSM8216;
                }
                if (cihw2.equals("8909")) {
                    return SOC_SNAP_210_MSM8909;
                }
                if (cihw2.equals("8916")) {
                    return SOC_SNAP_410_MSM8916;
                }
                if (cihw2.equals("8929")) {
                    return SOC_SNAP_415_MSM8929;
                }
                if (cihw2.equals("8936")) {
                    return SOC_SNAP_610_MSM8936;
                }
                if (cihw2.equals("8937")) {
                    return SOC_SNAP_430_MSM8937;
                }
                if (cihw2.equals("8939")) {
                    return SOC_SNAP_615_MSM8939;
                }
                if (cihw2.equals("8952")) {
                    return SOC_SNAP_617_MSM8952;
                }
                if (cihw2.equals("8956")) {
                    return SOC_SNAP_618_MSM8956;
                }
                if (cihw2.equals("8976")) {
                    return SOC_SNAP_620_MSM8976;
                }
                if (cihw2.equals("8992")) {
                    return SOC_SNAP_808_MSM8992;
                }
                if (cihw2.equals("8994")) {
                    return SOC_SNAP_810_MSM8994;
                }
                if (cihw2.equals("8996")) {
                    return SOC_SNAP_820_MSM8996;
                }
            }
            if (cpuinfo_hw.startsWith("QUALCOMM ")) {
                String cihw3 = cpuinfo_hw.substring(9).trim();
                if (cihw3.equals("APQ8026")) {
                    return SOC_SNAP_400_APQ8026;
                }
                if (cihw3.equals("APQ8084")) {
                    return SOC_SNAP_805_APQ8084;
                }
                if (cihw3.equals("MSM8212") || cpuinfo_hw.equals("MSM 8212")) {
                    return SOC_SNAP_200_MSM8212;
                }
                if (cihw3.equals("MSM8226") || cihw3.startsWith("MSM 8226 (FLATTENED ")) {
                    return SOC_SNAP_400_MSM8226;
                }
                if (cihw3.equals("MSM8228") || cihw3.startsWith("MSM 8228 (FLATTENED ")) {
                    return SOC_SNAP_400_MSM8228;
                }
                if (cihw3.equals("MSM8610") || cihw3.startsWith("MSM 8610 (FLATTENED ")) {
                    return SOC_SNAP_200_MSM8610;
                }
                if (cihw3.equals("MSM8926")) {
                    return SOC_SNAP_400_MSM8926;
                }
                if (cihw3.equals("MSM8974") || cihw3.startsWith("MSM 8974 HAMMERHEAD") || cihw3.startsWith("MSM 8974 (FLATTENED ")) {
                    return SOC_SNAP_800_MSM8974;
                }
                if (cihw3.equals("MSM8974PRO-AA")) {
                    return SOC_SNAP_801_MSM8974AA;
                }
                if (cihw3.equals("MSM8974PRO-AB")) {
                    return SOC_SNAP_801_MSM8974AB;
                }
                if (cihw3.equals("MSM8974PRO-AC")) {
                    return SOC_SNAP_801_MSM8974AC;
                }
            }
            if (cpuinfo_hw.equals("QCT MSM7625A FFA")) {
                return SOC_SNAP_S1_MSM7625A;
            }
            if (cpuinfo_hw.equals("QCT MSM7X27 FFA")) {
                return SOC_SNAP_S1_MSM7X27;
            }
            if (cpuinfo_hw.equals("QCT MSM7X27A FFA") || cpuinfo_hw.equals("LGE MSM7X27A U0")) {
                return SOC_SNAP_S1_MSM7X27A;
            }
            if (cpuinfo_hw.equals("ZTE MSM8960 KISKA")) {
                return SOC_SNAP_S4_PLUS_MSM8960;
            }
            if (cpuinfo_hw.equals("MSM8960DT")) {
                return SOC_SNAP_S4_PRO_MSM8960DT;
            }
            if (cpuinfo_hw.equals("QCT APQ8064 FLO")) {
                return SOC_SNAP_600_APQ8064FLO;
            }
            if (cpuinfo_hw.equals("QCT APQ8064 AWIFI")) {
                return SOC_SNAP_600_APQ8064T;
            }
            if (cpuinfo_hw.equals("QCT MSM8625 FFA")) {
                return SOC_SNAP_S4_PLAY_MSM8625;
            }
            if (cpuinfo_hw.equals("QCT MSM8930 CDP") || cpuinfo_hw.equals("QCT MSM8930 MTP")) {
                return SOC_SNAP_400_MSM8930;
            }
            if (cpuinfo_hw.equals("QCT APQ8064 MAKO") || cpuinfo_hw.equals("QCT APQ8064 MTP") || cpuinfo_hw.equals("PANTECH APQ8064 EF48S")) {
                return SOC_SNAP_S4_PRO_APQ8064;
            }
            if (cpuinfo_hw.equals("QRD MSM8625 SKU5")) {
                return SOC_SNAP_S4_PLAY_MSM8625;
            }
            if (cpuinfo_hw.equals("QRD MSM8625Q SKUD")) {
                return SOC_SNAP_200_MSM8625Q;
            }
            if (cpuinfo_hw.startsWith("BCM21553 ")) {
                return 3001;
            }
            if (cpuinfo_hw.equals("K3V2OEM1")) {
                return 4001;
            }
            if (cpuinfo_hw.startsWith("HI")) {
                if (cpuinfo_hw.equals("HI6210SFT")) {
                    return 4003;
                }
                if (cpuinfo_hw.equals("HI6620OEM")) {
                    return 4004;
                }
            }
            if (cpuinfo_hw.startsWith("KIRIN")) {
                if (cpuinfo_hw.startsWith("KIRIN ")) {
                    cihw = cpuinfo_hw.substring(6).trim();
                } else if (cpuinfo_hw.startsWith("KIRIN")) {
                    cihw = cpuinfo_hw.substring(5).trim();
                } else {
                    cihw = cpuinfo_hw;
                }
                if (cihw.equals("620")) {
                    return 4003;
                }
                if (cihw.equals("910")) {
                    return 4004;
                }
                if (cihw.equals("920")) {
                    return 4006;
                }
                if (cihw.equals("925")) {
                    return SOC_KIRIN_925;
                }
                if (cihw.equals("928")) {
                    return SOC_KIRIN_928;
                }
                if (cihw.equals("930")) {
                    return SOC_KIRIN_930;
                }
                if (cihw.equals("935")) {
                    return SOC_KIRIN_935;
                }
                if (cihw.equals("940")) {
                    return SOC_KIRIN_940;
                }
                if (cihw.equals("950")) {
                    return SOC_KIRIN_950;
                }
            }
            if (cpuinfo_hw.startsWith("PXA")) {
                if (cpuinfo_hw.equals("PXA986")) {
                    return 7001;
                }
                if (cpuinfo_hw.equals("PXA988")) {
                    return 7002;
                }
                if (cpuinfo_hw.equals("PXA1088")) {
                    return 7003;
                }
                if (cpuinfo_hw.equals("PXA1908")) {
                    return 7004;
                }
                if (cpuinfo_hw.equals("PXA1920")) {
                    return 7005;
                }
                if (cpuinfo_hw.equals("PXA1928")) {
                    return SOC_PXA1928;
                }
                if (cpuinfo_hw.equals("PXA1936")) {
                    return 7007;
                }
            }
            if (cpuinfo_hw.startsWith("OMAP")) {
                if (cpuinfo_hw.equals("OMAP4430")) {
                    return 10006;
                }
                if (cpuinfo_hw.equals("OMAP4460")) {
                    return 10007;
                }
                if (cpuinfo_hw.equals("OMAP4470")) {
                    return 10008;
                }
            }
            if (cpuinfo_hw.equals("RK2918BOARD")) {
                return 5002;
            }
            if (cpuinfo_hw.equals("RK2928BOARD")) {
                return 5003;
            }
            if (cpuinfo_hw.startsWith("ROCKCHIP RK3288 (FLATTENED ")) {
                return 5012;
            }
            if (cpuinfo_hw.equals("ROCKCHIP,RK3368")) {
                return 5013;
            }
            if (cpuinfo_hw.startsWith("SUN")) {
                if (cpuinfo_hw.equals("SUN4I")) {
                    return SOC_ALLW_A10;
                }
                if (cpuinfo_hw.equals("SUN5I")) {
                    return SOC_ALLW_A13;
                }
                if (cpuinfo_hw.equals("SUN6I")) {
                    return SOC_ALLW_A31;
                }
                if (cpuinfo_hw.equals("SUN7I")) {
                    return SOC_ALLW_A20;
                }
                if (cpuinfo_hw.equals("SUN8I")) {
                    return SOC_ALLW_A23;
                }
                if (cpuinfo_hw.equals("SUN9I")) {
                    return SOC_ALLW_A80;
                }
            }
            if (cpuinfo_hw.equals("GS702A")) {
                return SOC_ATM7029;
            }
            if (cpuinfo_hw.equals("GS702C")) {
                return SOC_ATM7021;
            }
            if (cpuinfo_hw.startsWith("AMLOGIC MESON6 G")) {
                return SOC_AML8726_MX;
            }
            if (cpuinfo_hw.equals("AMLOGIC MESON8")) {
                return SOC_AML8726_M8;
            }
        }
        if (brd.equals("BCM21553") || hw.equals("BCM21553") || mdl.equals("BCM21553")) {
            return 3001;
        }
        if (brd.startsWith("SC")) {
            if (brd.equals("SC6820")) {
                return SOC_SC6820;
            }
            if (brd.equals("SC6820I")) {
                return SOC_SC6820I;
            }
            if (brd.equals("SC6821")) {
                return SOC_SC6821;
            }
            if (brd.equals("SC6825")) {
                return SOC_SC6825;
            }
            if (brd.equals("SC7715")) {
                return SOC_SC7715;
            }
            if (brd.equals("SC7727S")) {
                return SOC_SC7727S;
            }
            if (brd.equals("SC7730A")) {
                return SOC_SC7730A;
            }
            if (brd.equals("SC7730S")) {
                return SOC_SC7730S;
            }
            if (brd.equals("SC7730SE")) {
                return SOC_SC7730SE;
            }
            if (brd.equals("SC7731G")) {
                return SOC_SC7731G;
            }
            if (brd.equals("SC7735S")) {
                return SOC_SC7735S;
            }
            if (brd.equals("SC8810")) {
                return SOC_SC8810;
            }
        }
        if (brd.startsWith("PXA") || hw.startsWith("PXA") || mdl.startsWith("PXA")) {
            if (brd.equals("PXA986") || hw.equals("PXA986") || mdl.equals("PXA986")) {
                return 7001;
            }
            if (brd.equals("PXA988") || hw.equals("PXA988") || mdl.equals("PXA988")) {
                return 7002;
            }
            if (brd.equals("PXA1088") || hw.equals("PXA1088") || mdl.equals("PXA1088")) {
                return 7003;
            }
            if (brd.equals("PXA1908") || hw.equals("PXA1908") || mdl.equals("PXA1908")) {
                return 7004;
            }
            if (brd.equals("PXA1920") || hw.equals("PXA1920") || mdl.equals("PXA1920")) {
                return 7005;
            }
            if (brd.equals("PXA1928") || hw.equals("PXA1928") || mdl.equals("PXA1928")) {
                return SOC_PXA1928;
            }
            if (brd.equals("PXA1936") || hw.equals("PXA1936") || mdl.equals("PXA1936")) {
                return 7007;
            }
        }
        if (cpuinfo_hw.startsWith("MT")) {
            if (cpuinfo_hw.equals("MT6513")) {
                return 8001;
            }
            if (cpuinfo_hw.equals("MT6515")) {
                return 8002;
            }
            if (cpuinfo_hw.equals("MT6516")) {
                return 8003;
            }
            if (cpuinfo_hw.equals("MT6517")) {
                return SOC_MT6517;
            }
            if (cpuinfo_hw.equals("MT6517T")) {
                return SOC_MT6517T;
            }
            if (cpuinfo_hw.equals("MT6570")) {
                return SOC_MT6570;
            }
            if (cpuinfo_hw.equals("MT6571")) {
                return SOC_MT6571;
            }
            if (cpuinfo_hw.equals("MT6572")) {
                return SOC_MT6572;
            }
            if (cpuinfo_hw.equals("MT6572M")) {
                return SOC_MT6572M;
            }
            if (cpuinfo_hw.equals("MT6573")) {
                return SOC_MT6573;
            }
            if (cpuinfo_hw.equals("MT6575")) {
                return SOC_MT6575;
            }
            if (cpuinfo_hw.equals("MT6575M")) {
                return SOC_MT6575M;
            }
            if (cpuinfo_hw.equals("MT6577")) {
                return SOC_MT6577;
            }
            if (cpuinfo_hw.equals("MT6577T")) {
                return SOC_MT6577T;
            }
            if (cpuinfo_hw.equals("MT6580")) {
                return SOC_MT6580;
            }
            if (cpuinfo_hw.equals("MT6581")) {
                return SOC_MT6581;
            }
            if (cpuinfo_hw.equals("MT6582")) {
                return SOC_MT6582;
            }
            if (cpuinfo_hw.equals("MT6582M")) {
                return SOC_MT6582M;
            }
            if (cpuinfo_hw.equals("MT6588")) {
                return SOC_MT6588;
            }
            if (cpuinfo_hw.equals("MT6589")) {
                return SOC_MT6589;
            }
            if (cpuinfo_hw.equals("MT6589M")) {
                return SOC_MT6589M;
            }
            if (cpuinfo_hw.equals("MT6589T")) {
                return SOC_MT6589T;
            }
            if (cpuinfo_hw.equals("MT6591")) {
                return SOC_MT6591;
            }
            if (cpuinfo_hw.equals("MT6592")) {
                return SOC_MT6592;
            }
            if (cpuinfo_hw.equals("MT6592M")) {
                return SOC_MT6592M;
            }
            if (cpuinfo_hw.equals("MT6592T")) {
                return SOC_MT6592T;
            }
            if (cpuinfo_hw.equals("MT6592W")) {
                return SOC_MT6592W;
            }
            if (cpuinfo_hw.equals("MT6595")) {
                return SOC_MT6595;
            }
            if (cpuinfo_hw.equals("MT6595M")) {
                return SOC_MT6595M;
            }
            if (cpuinfo_hw.equals("MT6595T")) {
                return SOC_MT6595T;
            }
            if (cpuinfo_hw.equals("MT6732")) {
                return SOC_MT6732;
            }
            if (cpuinfo_hw.equals("MT6732A")) {
                return SOC_MT6732A;
            }
            if (cpuinfo_hw.equals("MT6732M")) {
                return SOC_MT6732M;
            }
            if (cpuinfo_hw.equals("MT6735")) {
                return SOC_MT6735;
            }
            if (cpuinfo_hw.equals("MT6735A")) {
                return SOC_MT6735A;
            }
            if (cpuinfo_hw.equals("MT6735M")) {
                return SOC_MT6735M;
            }
            if (cpuinfo_hw.equals("MT6735P")) {
                return SOC_MT6735P;
            }
            if (cpuinfo_hw.equals("MT6752")) {
                return SOC_MT6752;
            }
            if (cpuinfo_hw.equals("MT6752L")) {
                return SOC_MT6752L;
            }
            if (cpuinfo_hw.equals("MT6752M")) {
                return SOC_MT6752M;
            }
            if (cpuinfo_hw.equals("MT6753")) {
                return SOC_MT6753;
            }
            if (cpuinfo_hw.equals("MT6755")) {
                return SOC_MT6755;
            }
            if (cpuinfo_hw.equals("MT6795")) {
                return SOC_MT6795;
            }
            if (cpuinfo_hw.equals("MT6795M")) {
                return SOC_MT6795M;
            }
            if (cpuinfo_hw.equals("MT6795T")) {
                return SOC_MT6795T;
            }
            if (cpuinfo_hw.equals("MT6797")) {
                return SOC_MT6797;
            }
            if (cpuinfo_hw.equals("MT8117")) {
                return SOC_MT8117;
            }
            if (cpuinfo_hw.equals("MT8121")) {
                return SOC_MT8121;
            }
            if (cpuinfo_hw.equals("MT8125")) {
                return SOC_MT8125;
            }
            if (cpuinfo_hw.equals("MT8127")) {
                return SOC_MT8127;
            }
            if (cpuinfo_hw.equals("MT8135")) {
                return SOC_MT8135;
            }
            if (cpuinfo_hw.equals("MT8135V")) {
                return SOC_MT8135V;
            }
            if (cpuinfo_hw.equals("MT8161")) {
                return SOC_MT8161;
            }
            if (cpuinfo_hw.equals("MT8165")) {
                return SOC_MT8165;
            }
            if (cpuinfo_hw.equals("MT8173")) {
                return SOC_MT8173;
            }
            if (cpuinfo_hw.equals("MT8312")) {
                return SOC_MT8312;
            }
            if (cpuinfo_hw.equals("MT8312C")) {
                return SOC_MT8312C;
            }
            if (cpuinfo_hw.equals("MT8312D")) {
                return SOC_MT8312D;
            }
            if (cpuinfo_hw.equals("MT8317")) {
                return SOC_MT8317;
            }
            if (cpuinfo_hw.equals("MT8317T")) {
                return SOC_MT8317T;
            }
            if (cpuinfo_hw.equals("MT8377")) {
                return SOC_MT8377;
            }
            if (cpuinfo_hw.equals("MT8377T")) {
                return SOC_MT8377T;
            }
            if (cpuinfo_hw.equals("MT8382")) {
                return SOC_MT8382;
            }
            if (cpuinfo_hw.equals("MT8389")) {
                return SOC_MT8389;
            }
            if (cpuinfo_hw.equals("MT8389T")) {
                return SOC_MT8389T;
            }
            if (cpuinfo_hw.equals("MT8392")) {
                return SOC_MT8392;
            }
            if (cpuinfo_hw.equals("MT8685")) {
                return SOC_MT8685;
            }
            if (cpuinfo_hw.equals("MT8732")) {
                return SOC_MT8732;
            }
            if (cpuinfo_hw.equals("MT8735")) {
                return SOC_MT8735;
            }
            if (cpuinfo_hw.equals("MT8752")) {
                return SOC_MT8752;
            }
            if (cpuinfo_hw.equals("MT8783")) {
                return SOC_MT8783;
            }
            if (cpuinfo_hw.equals("MT8783T")) {
                return SOC_MT8783T;
            }
        }
        if (brd.startsWith("MT") || hw.startsWith("MT") || mdl.startsWith("MT")) {
            if (brd.equals("MT6513") || hw.equals("MT6513") || mdl.equals("MT6513")) {
                return 8001;
            }
            if (brd.equals("MT6515") || hw.equals("MT6515") || mdl.equals("MT6515")) {
                return 8002;
            }
            if (brd.equals("MT6516") || hw.equals("MT6516") || mdl.equals("MT6516")) {
                return 8003;
            }
            if (brd.equals("MT6517") || hw.equals("MT6517") || mdl.equals("MT6517")) {
                return SOC_MT6517;
            }
            if (brd.equals("MT6517T") || hw.equals("MT6517T") || mdl.equals("MT6517T")) {
                return SOC_MT6517T;
            }
            if (brd.equals("MT6570") || hw.equals("MT6570") || mdl.equals("MT6570")) {
                return SOC_MT6570;
            }
            if (brd.equals("MT6571") || hw.equals("MT6571") || mdl.equals("MT6571")) {
                return SOC_MT6571;
            }
            if (brd.equals("MT6572") || hw.equals("MT6572") || mdl.equals("MT6572")) {
                return SOC_MT6572;
            }
            if (brd.equals("MT6572M") || hw.equals("MT6572M") || mdl.equals("MT6572M")) {
                return SOC_MT6572M;
            }
            if (brd.equals("MT6573") || hw.equals("MT6573") || mdl.equals("MT6573")) {
                return SOC_MT6573;
            }
            if (brd.equals("MT6575") || hw.equals("MT6575") || mdl.equals("MT6575")) {
                return SOC_MT6575;
            }
            if (brd.equals("MT6575M") || hw.equals("MT6575M") || mdl.equals("MT6575M")) {
                return SOC_MT6575M;
            }
            if (brd.equals("MT6577") || hw.equals("MT6577") || mdl.equals("MT6577")) {
                return SOC_MT6577;
            }
            if (brd.equals("MT6577T") || hw.equals("MT6577T") || mdl.equals("MT6577T")) {
                return SOC_MT6577T;
            }
            if (brd.equals("MT6580") || hw.equals("MT6580") || mdl.equals("MT6580")) {
                return SOC_MT6580;
            }
            if (brd.equals("MT6581") || hw.equals("MT6581") || mdl.equals("MT6581")) {
                return SOC_MT6581;
            }
            if (brd.equals("MT6582") || hw.equals("MT6582") || mdl.equals("MT6582")) {
                return SOC_MT6582;
            }
            if (brd.equals("MT6582M") || hw.equals("MT6582M") || mdl.equals("MT6582M")) {
                return SOC_MT6582M;
            }
            if (brd.equals("MT6588") || hw.equals("MT6588") || mdl.equals("MT6588")) {
                return SOC_MT6588;
            }
            if (brd.equals("MT6589") || hw.equals("MT6589") || mdl.equals("MT6589")) {
                return SOC_MT6589;
            }
            if (brd.equals("MT6589M") || hw.equals("MT6589M") || mdl.equals("MT6589M")) {
                return SOC_MT6589M;
            }
            if (brd.equals("MT6589T") || hw.equals("MT6589T") || mdl.equals("MT6589T")) {
                return SOC_MT6589T;
            }
            if (brd.equals("MT6591") || hw.equals("MT6591") || mdl.equals("MT6591")) {
                return SOC_MT6591;
            }
            if (brd.equals("MT6592") || hw.equals("MT6592") || mdl.equals("MT6592")) {
                return SOC_MT6592;
            }
            if (brd.equals("MT6592M") || hw.equals("MT6592M") || mdl.equals("MT6592M")) {
                return SOC_MT6592M;
            }
            if (brd.equals("MT6592T") || hw.equals("MT6592T") || mdl.equals("MT6592T")) {
                return SOC_MT6592T;
            }
            if (brd.equals("MT6592W") || hw.equals("MT6592W") || mdl.equals("MT6592W")) {
                return SOC_MT6592W;
            }
            if (brd.equals("MT6595") || hw.equals("MT6595") || mdl.equals("MT6595")) {
                return SOC_MT6595;
            }
            if (brd.equals("MT6595M") || hw.equals("MT6595M") || mdl.equals("MT6595M")) {
                return SOC_MT6595M;
            }
            if (brd.equals("MT6595T") || hw.equals("MT6595T") || mdl.equals("MT6595T")) {
                return SOC_MT6595T;
            }
            if (brd.equals("MT6732") || hw.equals("MT6732") || mdl.equals("MT6732")) {
                return SOC_MT6732;
            }
            if (brd.equals("MT6732A") || hw.equals("MT6732A") || mdl.equals("MT6732A")) {
                return SOC_MT6732A;
            }
            if (brd.equals("MT6732M") || hw.equals("MT6732M") || mdl.equals("MT6732M")) {
                return SOC_MT6732M;
            }
            if (brd.equals("MT6735") || hw.equals("MT6735") || mdl.equals("MT6735")) {
                return SOC_MT6735;
            }
            if (brd.equals("MT6735A") || hw.equals("MT6735A") || mdl.equals("MT6735A")) {
                return SOC_MT6735A;
            }
            if (brd.equals("MT6735M") || hw.equals("MT6735M") || mdl.equals("MT6735M")) {
                return SOC_MT6735M;
            }
            if (brd.equals("MT6735P") || hw.equals("MT6735P") || mdl.equals("MT6735P")) {
                return SOC_MT6735P;
            }
            if (brd.equals("MT6752") || hw.equals("MT6752") || mdl.equals("MT6752")) {
                return SOC_MT6752;
            }
            if (brd.equals("MT6752L") || hw.equals("MT6752L") || mdl.equals("MT6752L")) {
                return SOC_MT6752L;
            }
            if (brd.equals("MT6752M") || hw.equals("MT6752M") || mdl.equals("MT6752M")) {
                return SOC_MT6752M;
            }
            if (brd.equals("MT6753") || hw.equals("MT6753") || mdl.equals("MT6753")) {
                return SOC_MT6753;
            }
            if (brd.equals("MT6755") || hw.equals("MT6755") || mdl.equals("MT6755")) {
                return SOC_MT6755;
            }
            if (brd.equals("MT6795") || hw.equals("MT6795") || mdl.equals("MT6795")) {
                return SOC_MT6795;
            }
            if (brd.equals("MT6795M") || hw.equals("MT6795M") || mdl.equals("MT6795M")) {
                return SOC_MT6795M;
            }
            if (brd.equals("MT6795T") || hw.equals("MT6795T") || mdl.equals("MT6795T")) {
                return SOC_MT6795T;
            }
            if (brd.equals("MT6797") || hw.equals("MT6797") || mdl.equals("MT6797")) {
                return SOC_MT6797;
            }
            if (brd.equals("MT8117") || hw.equals("MT8117") || mdl.equals("MT8117")) {
                return SOC_MT8117;
            }
            if (brd.equals("MT8121") || hw.equals("MT8121") || mdl.equals("MT8121")) {
                return SOC_MT8121;
            }
            if (brd.equals("MT8125") || hw.equals("MT8125") || mdl.equals("MT8125")) {
                return SOC_MT8125;
            }
            if (brd.equals("MT8127") || hw.equals("MT8127") || mdl.equals("MT8127")) {
                return SOC_MT8127;
            }
            if (brd.equals("MT8135") || hw.equals("MT8135") || mdl.equals("MT8135")) {
                return SOC_MT8135;
            }
            if (brd.equals("MT8135V") || hw.equals("MT8135V") || mdl.equals("MT8135V")) {
                return SOC_MT8135V;
            }
            if (brd.equals("MT8161") || hw.equals("MT8161") || mdl.equals("MT8161")) {
                return SOC_MT8161;
            }
            if (brd.equals("MT8165") || hw.equals("MT8165") || mdl.equals("MT8165")) {
                return SOC_MT8165;
            }
            if (brd.equals("MT8173") || hw.equals("MT8173") || mdl.equals("MT8173")) {
                return SOC_MT8173;
            }
            if (brd.equals("MT8312") || hw.equals("MT8312") || mdl.equals("MT8312")) {
                return SOC_MT8312;
            }
            if (brd.equals("MT8312C") || hw.equals("MT8312C") || mdl.equals("MT8312C")) {
                return SOC_MT8312C;
            }
            if (brd.equals("MT8312D") || hw.equals("MT8312D") || mdl.equals("MT8312D")) {
                return SOC_MT8312D;
            }
            if (brd.equals("MT8317") || hw.equals("MT8317") || mdl.equals("MT8317")) {
                return SOC_MT8317;
            }
            if (brd.equals("MT8317T") || hw.equals("MT8317T") || mdl.equals("MT8317T")) {
                return SOC_MT8317T;
            }
            if (brd.equals("MT8377") || hw.equals("MT8377") || mdl.equals("MT8377")) {
                return SOC_MT8377;
            }
            if (brd.equals("MT8377T") || hw.equals("MT8377T") || mdl.equals("MT8377T")) {
                return SOC_MT8377T;
            }
            if (brd.equals("MT8382") || hw.equals("MT8382") || mdl.equals("MT8382")) {
                return SOC_MT8382;
            }
            if (brd.equals("MT8389") || hw.equals("MT8389") || mdl.equals("MT8389")) {
                return SOC_MT8389;
            }
            if (brd.equals("MT8389T") || hw.equals("MT8389T") || mdl.equals("MT8389T")) {
                return SOC_MT8389T;
            }
            if (brd.equals("MT8392") || hw.equals("MT8392") || mdl.equals("MT8392")) {
                return SOC_MT8392;
            }
            if (brd.equals("MT8685") || hw.equals("MT8685") || mdl.equals("MT8685")) {
                return SOC_MT8685;
            }
            if (brd.equals("MT8732") || hw.equals("MT8732") || mdl.equals("MT8732")) {
                return SOC_MT8732;
            }
            if (brd.equals("MT8735") || hw.equals("MT8735") || mdl.equals("MT8735")) {
                return SOC_MT8735;
            }
            if (brd.equals("MT8752") || hw.equals("MT8752") || mdl.equals("MT8752")) {
                return SOC_MT8752;
            }
            if (brd.equals("MT8783") || hw.equals("MT8783") || mdl.equals("MT8783")) {
                return SOC_MT8783;
            }
            if (brd.equals("MT8783T") || hw.equals("MT8783T") || mdl.equals("MT8783T")) {
                return SOC_MT8783T;
            }
        }
        if (brd.equals("RK2906")) {
            return 5001;
        }
        if (brd.equals("RK2918")) {
            return 5002;
        }
        if (brd.equals("RK2928")) {
            return 5003;
        }
        if (brd.equals("RK3026")) {
            return 5004;
        }
        if (brd.equals("RK3028")) {
            return 5005;
        }
        if (brd.equals("RK3066")) {
            return 5006;
        }
        if (brd.equals("RK3126")) {
            return 5007;
        }
        if (brd.equals("RK3128")) {
            return 5008;
        }
        if (brd.equals("RK3168")) {
            return 5009;
        }
        if (brd.equals("RK3188")) {
            return 5010;
        }
        if (brd.equals("RK3188T")) {
            return 5011;
        }
        if (brd.equals("RK3288")) {
            return 5012;
        }
        if (brd.equals("RK3368")) {
            return 5013;
        }
        if (isBlackBerryDevice()) {
            if (brd.equals("STL100-1")) {
                return 10008;
            }
            if (brd.startsWith("SQC100-") || brd.startsWith("SQN100-") || brd.startsWith("SQR100-") || brd.equals("STL100-2") || brd.equals("STL100-3") || brd.equals("STL100-4") || brd.startsWith("STR100-")) {
                return SOC_SNAP_S4_PLUS_MSM8960;
            }
            if (brd.startsWith("SQK100") || brd.startsWith("STA100-") || brd.startsWith("STK100")) {
                return SOC_SNAP_S4_PRO_MSM8960T;
            }
            if (brd.startsWith("STJ100-")) {
                return SOC_SNAP_S4_PLUS_MSM8230;
            }
            if (brd.startsWith("SQW100-")) {
                return SOC_SNAP_801_MSM8974AA;
            }
        }
        if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 65 && readFirstLineFromSystemFile_Str("/sys/class/devfreq/exynos5-devfreq-int/cur_freq").length() > 0) {
            return SOC_EXYNOS_5XXX;
        }
        String oglVendor = sysinfo.OGLES_Vendor;
        String oglRender = sysinfo.OGLES_Renderer;
        if (oglVendor != null && oglVendor.length() > 0 && oglRender != null && oglRender.length() > 0) {
            String oglVendor2 = oglVendor.trim().toUpperCase();
            String oglRender2 = oglRender.trim().toUpperCase();
            if (oglVendor2.startsWith("QUALCOMM") && oglRender2.startsWith("ADRENO ")) {
                if (oglRender2.startsWith("ADRENO (TM) ")) {
                    oglRender2 = oglRender2.substring(12);
                } else if (oglRender2.startsWith("ADRENO ")) {
                    oglRender2 = oglRender2.substring(7);
                }
                if (oglRender2.equals("200")) {
                    return SOC_SNAP_S1;
                }
                if (oglRender2.equals("203")) {
                    if (sysinfo.CPUInfo_ARM_CoreCount == 2) {
                        return SOC_SNAP_S4_PLAY_MSM8225_MSM8625;
                    }
                    if (sysinfo.CPUInfo_ARM_CoreCount == 4) {
                        return SOC_SNAP_S4_PLAY_200_MSM8225Q_MSM8625Q;
                    }
                }
                if (oglRender2.equals("205")) {
                    return SOC_SNAP_S2;
                }
                if (oglRender2.equals("220")) {
                    return SOC_SNAP_S3;
                }
                if (oglRender2.equals("225")) {
                    return SOC_SNAP_S4_PLUS;
                }
                if (oglRender2.equals("302")) {
                    return SOC_SNAP_200_A7;
                }
                if (oglRender2.equals("304")) {
                    if (sysinfo.CPUInfo_ARM_CoreCount == 2) {
                        return SOC_SNAP_208;
                    }
                    if (sysinfo.CPUInfo_ARM_CoreCount == 4) {
                        return SOC_SNAP_210_212;
                    }
                }
                if (oglRender2.equals("305")) {
                    if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 65 && sysinfo.CPUInfo_ARM_CoreCount == 2) {
                        return SOC_SNAP_200_MSM8210;
                    }
                    if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 81) {
                        return SOC_SNAP_S4_PLUS_400;
                    }
                }
                if (oglRender2.equals("306")) {
                    return SOC_SNAP_410_412;
                }
                if (oglRender2.equals("320")) {
                    if (sysinfo.CPUInfo_ARM_CoreCount == 2) {
                        return SOC_SNAP_S4_PRO;
                    }
                    if (sysinfo.CPUInfo_ARM_CoreCount == 4) {
                        if (getAdrenoMaxGPUClock_MHz() == 450) {
                            return SOC_SNAP_600_APQ8064AB;
                        }
                        return SOC_SNAP_S4_PRO_600;
                    }
                }
                if (!oglRender2.equals("330")) {
                    if (oglRender2.equals("405")) {
                        if (sysinfo.CPUInfo_ARM_CoreCount == 4) {
                            return SOC_SNAP_610;
                        }
                        if (sysinfo.CPUInfo_ARM_CoreCount == 8) {
                            return SOC_SNAP_415_425_615_616_617;
                        }
                    }
                    if (oglRender2.equals("418")) {
                        return SOC_SNAP_808;
                    }
                    if (oglRender2.equals("420")) {
                        return SOC_SNAP_805;
                    }
                    if (oglRender2.equals("430")) {
                        return SOC_SNAP_810;
                    }
                    if (oglRender2.equals("505")) {
                        return SOC_SNAP_430;
                    }
                    if (oglRender2.equals("510")) {
                        if (sysinfo.CPUInfo_ARM_CoreCount == 6) {
                            return SOC_SNAP_618;
                        }
                        if (sysinfo.CPUInfo_ARM_CoreCount == 8) {
                            return SOC_SNAP_620;
                        }
                    }
                    if (oglRender2.equals("530")) {
                        return SOC_SNAP_820;
                    }
                } else if (getAdrenoMaxGPUClock_MHz() == 578) {
                    return SOC_SNAP_801;
                } else {
                    return SOC_SNAP_800_801;
                }
            } else if (oglVendor2.startsWith("NVIDIA") && oglRender2.startsWith("NVIDIA ")) {
                String oglRender3 = oglRender2.substring(7);
                if (oglRender3.equals("TEGRA 2")) {
                    return 2001;
                }
                if (oglRender3.equals("TEGRA 3")) {
                    return 2004;
                }
                if (oglRender3.equals("TEGRA 4")) {
                    return 2006;
                }
                if (oglRender3.equals("TEGRA 4I")) {
                    return 2008;
                }
            }
        }
        if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 81) {
            switch (sysinfo.CPUInfo_ARM_CPUInfo.part) {
                case 15:
                    return SOC_SNAP_S1_S2;
                case 45:
                    return SOC_SNAP_S3;
                case 77:
                    return SOC_SNAP_DUAL_KRAIT;
                case DEVMANUF_MEDION /*{ENCODED_INT: 111}*/:
                    return SOC_SNAP_QUAD_KRAIT;
            }
        }
        return 0;
    }

    public static int getSoCModel() {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.CPUInfo_isX86) {
            return getSoCModel_x86();
        }
        if (sysInfoST.CPUInfo_isARM) {
            return getSoCModel_ARM();
        }
        return 0;
    }

    public static int getSoCModel_Cached() {
        SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
        if (sysInfoST.SoC_Model == -1) {
            sysInfoST.SoC_Model = getSoCModel();
        }
        return sysInfoST.SoC_Model;
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    public static String getSoCModel_Str() {
        switch (getSoCModel_Cached()) {
            case 1:
                return "Intel Atom Z2420";
            case 2:
                return "Intel Atom Z2460";
            case 3:
                return "Intel Atom Z2480";
            case 4:
                return "Intel Atom Z2610";
            case 5:
                return "Intel Medfield";
            case 6:
                return "Intel Atom Z2520";
            case 7:
                return "Intel Atom Z2560";
            case 8:
                return "Intel Atom Z2580";
            case 9:
                return "Intel Atom Z2760";
            case 10:
                return "Intel Cloverview";
            case 11:
                return "Intel Atom Z3680";
            case 12:
                return "Intel Atom Z3680D";
            case 13:
                return "Intel Atom Z3735D";
            case 14:
                return "Intel Atom Z3735E";
            case 15:
                return "Intel Atom Z3735F";
            case 16:
                return "Intel Atom Z3735G";
            case 17:
                return "Intel Atom Z3736F";
            case 18:
                return "Intel Atom Z3736G";
            case 19:
                return "Intel Atom Z3740";
            case 20:
                return "Intel Atom Z3740D";
            case 21:
                return "Intel Atom Z3745";
            case 22:
                return "Intel Atom Z3745D";
            case 23:
                return "Intel Atom Z3770";
            case 24:
                return "Intel Atom Z3770D";
            case 25:
                return "Intel Atom Z3775";
            case 26:
                return "Intel Atom Z3775D";
            case 27:
                return "Intel Atom Z3785";
            case 28:
                return "Intel Atom Z3795";
            case 29:
                return "Intel Bay Trail";
            case 30:
                return "Intel Atom Z3460";
            case 31:
                return "Intel Atom Z3480";
            case 32:
                return "Intel Merrifield";
            case 33:
                return "Intel Atom x5-Z8300";
            case 34:
                return "Intel Atom x5-Z8350";
            case 35:
                return "Intel Atom x5-Z8500";
            case 36:
                return "Intel Atom x5-Z8550";
            case 37:
                return "Intel Atom x7-Z8700";
            case 38:
                return "Intel Atom x7-Z8750";
            case 39:
                return "Intel Cherry Trail";
            case 40:
                return "Intel Atom Z3530";
            case 41:
                return "Intel Atom Z3560";
            case 42:
                return "Intel Atom Z3570";
            case 43:
                return "Intel Atom Z3580";
            case 44:
                return "Intel Moorefield";
            case 45:
                return "Intel Apollo Lake";
            case 46:
                return "Intel Atom x3-C3130";
            case 47:
                return "Intel Atom x3-C3230RK";
            case 48:
                return "Intel Atom x3-C3440";
            case 49:
                return "Intel SoFIA";
            case 50:
                return "Intel SoFIA LTE";
            case 51:
                SysInfoSingleTon sysInfoST = SysInfoSingleTon.getInstance();
                if (sysInfoST.CPUInfo_x86_ModelName != null && sysInfoST.CPUInfo_x86_ModelName.length() > 0) {
                    return sysInfoST.CPUInfo_x86_ModelName;
                }
            case 1001:
                break;
            case 2001:
                return "nVIDIA Tegra 2";
            case 2002:
                return "nVIDIA Tegra 2 (AP20H)";
            case 2003:
                return "nVIDIA Tegra 2 (T20)";
            case 2004:
                return "nVIDIA Tegra 3";
            case 2005:
                return "nVIDIA Tegra 3 (T30L)";
            case 2006:
                return "nVIDIA Tegra 4";
            case 2007:
                return "nVIDIA Tegra 4 (T114)";
            case 2008:
                return "nVIDIA Tegra 4i";
            case 2009:
                return "nVIDIA Tegra K1 (T124)";
            case 2010:
                return "nVIDIA Tegra K1 (T132)";
            case 3001:
                return "Broadcom BCM21553";
            case 3002:
                return "Broadcom BCM21654G";
            case 3003:
                return "Broadcom BCM21664";
            case SOC_BCM21664T /*{ENCODED_INT: 3004}*/:
                return "Broadcom BCM21664T";
            case SOC_BCM23550 /*{ENCODED_INT: 3005}*/:
                return "Broadcom BCM23550";
            case SOC_BCM28155 /*{ENCODED_INT: 3006}*/:
                return "Broadcom BCM28155";
            case 4001:
                return "HiSilicon K3V2";
            case 4002:
                return "HiSilicon K3V2E";
            case 4003:
                return "HiSilicon Kirin 620";
            case 4004:
                return "HiSilicon Kirin 910";
            case 4005:
                return "HiSilicon Kirin 910T";
            case 4006:
                return "HiSilicon Kirin 920";
            case SOC_KIRIN_925 /*{ENCODED_INT: 4007}*/:
                return "HiSilicon Kirin 925";
            case SOC_KIRIN_928 /*{ENCODED_INT: 4008}*/:
                return "HiSilicon Kirin 928";
            case SOC_KIRIN_930 /*{ENCODED_INT: 4009}*/:
                return "HiSilicon Kirin 930";
            case SOC_KIRIN_935 /*{ENCODED_INT: 4010}*/:
                return "HiSilicon Kirin 935";
            case SOC_KIRIN_940 /*{ENCODED_INT: 4011}*/:
                return "HiSilicon Kirin 940";
            case SOC_KIRIN_950 /*{ENCODED_INT: 4012}*/:
                return "HiSilicon Kirin 950";
            case 5001:
                return "RockChip RK2906";
            case 5002:
                return "RockChip RK2918";
            case 5003:
                return "RockChip RK2928";
            case 5004:
                return "RockChip RK3026";
            case 5005:
                return "RockChip RK3028";
            case 5006:
                return "RockChip RK3066";
            case 5007:
                return "RockChip RK3126";
            case 5008:
                return "RockChip RK3128";
            case 5009:
                return "RockChip RK3168";
            case 5010:
                return "RockChip RK3188";
            case 5011:
                return "RockChip RK3188T";
            case 5012:
                return "RockChip RK3288";
            case 5013:
                return "RockChip RK3368";
            case 6001:
                return "Samsung Exynos 3 Single (3110)";
            case 6002:
                return "Samsung Exynos 3 Quad (3470)";
            case 6003:
                return "Samsung Exynos 3 Quad (3475)";
            case 6004:
                return "Samsung Exynos 4 Dual (4210)";
            case SOC_EXYNOS_4212 /*{ENCODED_INT: 6005}*/:
                return "Samsung Exynos 4 Dual (4212)";
            case SOC_EXYNOS_4212_4412 /*{ENCODED_INT: 6006}*/:
                return "Samsung Exynos 4 (4212/4412)";
            case SOC_EXYNOS_4412 /*{ENCODED_INT: 6007}*/:
                return "Samsung Exynos 4 Quad (4412)";
            case SOC_EXYNOS_5XXX /*{ENCODED_INT: 6008}*/:
                return "Samsung Exynos 5";
            case SOC_EXYNOS_5250 /*{ENCODED_INT: 6009}*/:
                return "Samsung Exynos 5 Dual (5250)";
            case SOC_EXYNOS_5260 /*{ENCODED_INT: 6010}*/:
                return "Samsung Exynos 5 Hexa (5260)";
            case SOC_EXYNOS_5410 /*{ENCODED_INT: 6011}*/:
                return "Samsung Exynos 5 Octa (5410)";
            case SOC_EXYNOS_5420 /*{ENCODED_INT: 6012}*/:
                return "Samsung Exynos 5 Octa (5420)";
            case SOC_EXYNOS_5422 /*{ENCODED_INT: 6013}*/:
                return "Samsung Exynos 5 Octa (5422)";
            case SOC_EXYNOS_5430 /*{ENCODED_INT: 6014}*/:
                return "Samsung Exynos 5 Octa (5430)";
            case SOC_EXYNOS_5433 /*{ENCODED_INT: 6015}*/:
                return "Samsung Exynos 7 Octa (5433)";
            case SOC_EXYNOS_5800 /*{ENCODED_INT: 6016}*/:
                return "Samsung Exynos 5 Octa (5800)";
            case SOC_EXYNOS_7410 /*{ENCODED_INT: 6017}*/:
                return "Samsung Exynos 7 Octa (7410)";
            case SOC_EXYNOS_7420 /*{ENCODED_INT: 6018}*/:
                return "Samsung Exynos 7 Octa (7420)";
            case SOC_EXYNOS_7580 /*{ENCODED_INT: 6019}*/:
                return "Samsung Exynos 7 Octa (7580)";
            case SOC_EXYNOS_8890 /*{ENCODED_INT: 6020}*/:
                return "Samsung Exynos 8 Octa (8890)";
            case 7001:
                return "Marvell PXA986";
            case 7002:
                return "Marvell PXA988";
            case 7003:
                return "Marvell Armada PXA1088";
            case 7004:
                return "Marvell Armada PXA1908";
            case 7005:
                return "Marvell Armada PXA1920";
            case SOC_PXA1928 /*{ENCODED_INT: 7006}*/:
                return "Marvell Armada PXA1928";
            case 7007:
                return "Marvell Armada PXA1936";
            case 8001:
                return "MediaTek MT6513";
            case 8002:
                return "MediaTek MT6515";
            case 8003:
                return "MediaTek MT6516";
            case SOC_MT6517 /*{ENCODED_INT: 8004}*/:
                return "MediaTek MT6517";
            case SOC_MT6517T /*{ENCODED_INT: 8005}*/:
                return "MediaTek MT6517T";
            case SOC_MT6570 /*{ENCODED_INT: 8006}*/:
                return "MediaTek MT6570";
            case SOC_MT6571 /*{ENCODED_INT: 8007}*/:
                return "MediaTek MT6571";
            case SOC_MT6572 /*{ENCODED_INT: 8008}*/:
                return "MediaTek MT6572";
            case SOC_MT6572M /*{ENCODED_INT: 8009}*/:
                return "MediaTek MT6572M";
            case SOC_MT6573 /*{ENCODED_INT: 8010}*/:
                return "MediaTek MT6573";
            case SOC_MT6575 /*{ENCODED_INT: 8011}*/:
                return "MediaTek MT6575";
            case SOC_MT6575M /*{ENCODED_INT: 8012}*/:
                return "MediaTek MT6575M";
            case SOC_MT6577 /*{ENCODED_INT: 8013}*/:
                return "MediaTek MT6577";
            case SOC_MT6577T /*{ENCODED_INT: 8014}*/:
                return "MediaTek MT6577T";
            case SOC_MT6580 /*{ENCODED_INT: 8015}*/:
                return "MediaTek MT6580";
            case SOC_MT6581 /*{ENCODED_INT: 8016}*/:
                return "MediaTek MT6581";
            case SOC_MT6582 /*{ENCODED_INT: 8017}*/:
                return "MediaTek MT6582";
            case SOC_MT6582M /*{ENCODED_INT: 8018}*/:
                return "MediaTek MT6582M";
            case SOC_MT6588 /*{ENCODED_INT: 8019}*/:
                return "MediaTek MT6588";
            case SOC_MT6589 /*{ENCODED_INT: 8020}*/:
                return "MediaTek MT6589";
            case SOC_MT6589M /*{ENCODED_INT: 8021}*/:
                return "MediaTek MT6589M";
            case SOC_MT6589T /*{ENCODED_INT: 8022}*/:
                return "MediaTek MT6589T";
            case SOC_MT6591 /*{ENCODED_INT: 8023}*/:
                return "MediaTek MT6591";
            case SOC_MT6592 /*{ENCODED_INT: 8024}*/:
                return "MediaTek MT6592";
            case SOC_MT6592M /*{ENCODED_INT: 8025}*/:
                return "MediaTek MT6592M";
            case SOC_MT6592T /*{ENCODED_INT: 8026}*/:
                return "MediaTek MT6592T";
            case SOC_MT6592W /*{ENCODED_INT: 8027}*/:
                return "MediaTek MT6592W";
            case SOC_MT6595 /*{ENCODED_INT: 8028}*/:
                return "MediaTek MT6595";
            case SOC_MT6595M /*{ENCODED_INT: 8029}*/:
                return "MediaTek MT6595M";
            case SOC_MT6595T /*{ENCODED_INT: 8030}*/:
                return "MediaTek MT6595T";
            case SOC_MT6732 /*{ENCODED_INT: 8031}*/:
                return "MediaTek MT6732";
            case SOC_MT6732A /*{ENCODED_INT: 8032}*/:
                return "MediaTek MT6732A";
            case SOC_MT6732M /*{ENCODED_INT: 8033}*/:
                return "MediaTek MT6732M";
            case SOC_MT6735 /*{ENCODED_INT: 8034}*/:
                return "MediaTek MT6735";
            case SOC_MT6735A /*{ENCODED_INT: 8035}*/:
                return "MediaTek MT6735A";
            case SOC_MT6735M /*{ENCODED_INT: 8036}*/:
                return "MediaTek MT6735M";
            case SOC_MT6735P /*{ENCODED_INT: 8037}*/:
                return "MediaTek MT6735P";
            case SOC_MT6752 /*{ENCODED_INT: 8038}*/:
                return "MediaTek MT6752";
            case SOC_MT6752L /*{ENCODED_INT: 8039}*/:
                return "MediaTek MT6752L";
            case SOC_MT6752M /*{ENCODED_INT: 8040}*/:
                return "MediaTek MT6752M";
            case SOC_MT6753 /*{ENCODED_INT: 8041}*/:
                return "MediaTek MT6753";
            case SOC_MT6755 /*{ENCODED_INT: 8042}*/:
                return "MediaTek Helio P10 (MT6755)";
            case SOC_MT6795 /*{ENCODED_INT: 8043}*/:
                return "MediaTek Helio X10 (MT6795)";
            case SOC_MT6795M /*{ENCODED_INT: 8044}*/:
                return "MediaTek Helio X10 (MT6795M)";
            case SOC_MT6795T /*{ENCODED_INT: 8045}*/:
                return "MediaTek Helio X10 (MT6795T)";
            case SOC_MT6797 /*{ENCODED_INT: 8046}*/:
                return "MediaTek Helio X20 (MT6797)";
            case SOC_MT8117 /*{ENCODED_INT: 8047}*/:
                return "MediaTek MT8117";
            case SOC_MT8121 /*{ENCODED_INT: 8048}*/:
                return "MediaTek MT8121";
            case SOC_MT8125 /*{ENCODED_INT: 8049}*/:
                return "MediaTek MT8125";
            case SOC_MT8127 /*{ENCODED_INT: 8050}*/:
                return "MediaTek MT8127";
            case SOC_MT8135 /*{ENCODED_INT: 8051}*/:
                return "MediaTek MT8135";
            case SOC_MT8135V /*{ENCODED_INT: 8052}*/:
                return "MediaTek MT8135V";
            case SOC_MT8161 /*{ENCODED_INT: 8053}*/:
                return "MediaTek MT8161";
            case SOC_MT8165 /*{ENCODED_INT: 8054}*/:
                return "MediaTek MT8165";
            case SOC_MT8173 /*{ENCODED_INT: 8055}*/:
                return "MediaTek MT8173";
            case SOC_MT8312 /*{ENCODED_INT: 8056}*/:
                return "MediaTek MT8312";
            case SOC_MT8312C /*{ENCODED_INT: 8057}*/:
                return "MediaTek MT8312C";
            case SOC_MT8312D /*{ENCODED_INT: 8058}*/:
                return "MediaTek MT8312D";
            case SOC_MT8317 /*{ENCODED_INT: 8059}*/:
                return "MediaTek MT8317";
            case SOC_MT8317T /*{ENCODED_INT: 8060}*/:
                return "MediaTek MT8317T";
            case SOC_MT8377 /*{ENCODED_INT: 8061}*/:
                return "MediaTek MT8377";
            case SOC_MT8377T /*{ENCODED_INT: 8062}*/:
                return "MediaTek MT8377T";
            case SOC_MT8382 /*{ENCODED_INT: 8063}*/:
                return "MediaTek MT8382";
            case SOC_MT8389 /*{ENCODED_INT: 8064}*/:
                return "MediaTek MT8389";
            case SOC_MT8389T /*{ENCODED_INT: 8065}*/:
                return "MediaTek MT8389T";
            case SOC_MT8392 /*{ENCODED_INT: 8066}*/:
                return "MediaTek MT8392";
            case SOC_MT8685 /*{ENCODED_INT: 8067}*/:
                return "MediaTek MT8685";
            case SOC_MT8732 /*{ENCODED_INT: 8068}*/:
                return "MediaTek MT8732";
            case SOC_MT8735 /*{ENCODED_INT: 8069}*/:
                return "MediaTek MT8735";
            case SOC_MT8752 /*{ENCODED_INT: 8070}*/:
                return "MediaTek MT8752";
            case SOC_MT8783 /*{ENCODED_INT: 8071}*/:
                return "MediaTek MT8783";
            case SOC_MT8783T /*{ENCODED_INT: 8072}*/:
                return "MediaTek MT8783T";
            case SOC_SNAP_S1 /*{ENCODED_INT: 9001}*/:
                return "Qualcomm Snapdragon S1";
            case SOC_SNAP_S1_MSM7225 /*{ENCODED_INT: 9002}*/:
                return "Qualcomm Snapdragon S1 (MSM7225)";
            case SOC_SNAP_S1_MSM7227 /*{ENCODED_INT: 9003}*/:
                return "Qualcomm Snapdragon S1 (MSM7227)";
            case SOC_SNAP_S1_MSM7227A /*{ENCODED_INT: 9004}*/:
                return "Qualcomm Snapdragon S1 (MSM7227A)";
            case SOC_SNAP_S1_MSM7625A /*{ENCODED_INT: 9005}*/:
                return "Qualcomm Snapdragon S1 (MSM7625A)";
            case SOC_SNAP_S1_MSM7X27 /*{ENCODED_INT: 9006}*/:
                return "Qualcomm Snapdragon S1 (MSM7227/MSM7627)";
            case SOC_SNAP_S1_MSM7X27A /*{ENCODED_INT: 9007}*/:
                return "Qualcomm Snapdragon S1 (MSM7227A/MSM7627A)";
            case SOC_SNAP_S1_S2 /*{ENCODED_INT: 9008}*/:
                return "Qualcomm Snapdragon S1/S2";
            case SOC_SNAP_S2 /*{ENCODED_INT: 9009}*/:
                return "Qualcomm Snapdragon S2";
            case SOC_SNAP_S2_MSM8255 /*{ENCODED_INT: 9010}*/:
                return "Qualcomm Snapdragon S2 (MSM8255)";
            case SOC_SNAP_S3 /*{ENCODED_INT: 9011}*/:
                return "Qualcomm Snapdragon S3";
            case SOC_SNAP_S4_PLAY_MSM8625 /*{ENCODED_INT: 9012}*/:
                return "Qualcomm Snapdragon S4 Play (MSM8625)";
            case SOC_SNAP_S4_PLAY_MSM8225_MSM8625 /*{ENCODED_INT: 9013}*/:
                return "Qualcomm Snapdragon S4 Play (MSM8225/MSM8625)";
            case SOC_SNAP_S4_PLAY_200_MSM8225Q /*{ENCODED_INT: 9014}*/:
                return "Qualcomm Snapdragon S4 Play / 200 (MSM8225Q)";
            case SOC_SNAP_S4_PLAY_200_MSM8225Q_MSM8625Q /*{ENCODED_INT: 9015}*/:
                return "Qualcomm Snapdragon S4 Play / 200 (MSM8225Q/MSM8625Q)";
            case SOC_SNAP_S4_PLUS /*{ENCODED_INT: 9016}*/:
                return "Qualcomm Snapdragon S4 Plus";
            case SOC_SNAP_S4_PLUS_400 /*{ENCODED_INT: 9017}*/:
                return "Qualcomm Snapdragon S4 Plus / 400";
            case SOC_SNAP_S4_PLUS_MSM8227 /*{ENCODED_INT: 9018}*/:
                return "Qualcomm Snapdragon S4 Plus (MSM8227)";
            case SOC_SNAP_S4_PLUS_MSM8230 /*{ENCODED_INT: 9019}*/:
                return "Qualcomm Snapdragon S4 Plus (MSM8230)";
            case SOC_SNAP_S4_PLUS_MSM8960 /*{ENCODED_INT: 9020}*/:
                return "Qualcomm Snapdragon S4 Plus (MSM8960)";
            case SOC_SNAP_S4_PRO /*{ENCODED_INT: 9021}*/:
                return "Qualcomm Snapdragon S4 Pro";
            case SOC_SNAP_S4_PRO_600 /*{ENCODED_INT: 9022}*/:
                return "Qualcomm Snapdragon S4 Pro / 600";
            case SOC_SNAP_S4_PRO_APQ8064 /*{ENCODED_INT: 9023}*/:
                return "Qualcomm Snapdragon S4 Pro (APQ8064)";
            case SOC_SNAP_S4_PRO_MSM8960DT /*{ENCODED_INT: 9024}*/:
                return "Qualcomm Snapdragon S4 Pro (MSM8960DT)";
            case SOC_SNAP_S4_PRO_MSM8960T /*{ENCODED_INT: 9025}*/:
                return "Qualcomm Snapdragon S4 Pro (MSM8960T)";
            case SOC_SNAP_200_A7 /*{ENCODED_INT: 9026}*/:
                return "Qualcomm Snapdragon 200";
            case SOC_SNAP_200_MSM8210 /*{ENCODED_INT: 9027}*/:
                return "Qualcomm Snapdragon 200 (MSM8210)";
            case SOC_SNAP_200_MSM8212 /*{ENCODED_INT: 9028}*/:
                return "Qualcomm Snapdragon 200 (MSM8212)";
            case SOC_SNAP_200_MSM8225Q /*{ENCODED_INT: 9029}*/:
                return "Qualcomm Snapdragon 200 (MSM8225Q)";
            case SOC_SNAP_200_MSM8610 /*{ENCODED_INT: 9030}*/:
                return "Qualcomm Snapdragon 200 (MSM8610)";
            case SOC_SNAP_200_MSM8625Q /*{ENCODED_INT: 9031}*/:
                return "Qualcomm Snapdragon 200 (MSM8625Q)";
            case SOC_SNAP_208 /*{ENCODED_INT: 9032}*/:
                return "Qualcomm Snapdragon 208";
            case SOC_SNAP_208_MSM8208 /*{ENCODED_INT: 9033}*/:
                return "Qualcomm Snapdragon 208 (MSM8208)";
            case SOC_SNAP_210_212 /*{ENCODED_INT: 9034}*/:
                return "Qualcomm Snapdragon 210/212";
            case SOC_SNAP_210_MSM8209 /*{ENCODED_INT: 9035}*/:
                return "Qualcomm Snapdragon 210 (MSM8209)";
            case SOC_SNAP_210_MSM8909 /*{ENCODED_INT: 9036}*/:
                return "Qualcomm Snapdragon 210 (MSM8909)";
            case SOC_SNAP_400 /*{ENCODED_INT: 9037}*/:
                return "Qualcomm Snapdragon 400";
            case SOC_SNAP_400_APQ8026 /*{ENCODED_INT: 9038}*/:
                return "Qualcomm Snapdragon 400 (APQ8026)";
            case SOC_SNAP_400_MSM8226 /*{ENCODED_INT: 9039}*/:
                return "Qualcomm Snapdragon 400 (MSM8226)";
            case SOC_SNAP_400_MSM8228 /*{ENCODED_INT: 9040}*/:
                return "Qualcomm Snapdragon 400 (MSM8228)";
            case SOC_SNAP_400_MSM8626 /*{ENCODED_INT: 9041}*/:
                return "Qualcomm Snapdragon 400 (MSM8626)";
            case SOC_SNAP_400_MSM8926 /*{ENCODED_INT: 9042}*/:
                return "Qualcomm Snapdragon 400 (MSM8926)";
            case SOC_SNAP_400_MSM8928 /*{ENCODED_INT: 9043}*/:
                return "Qualcomm Snapdragon 400 (MSM8928)";
            case SOC_SNAP_400_MSM8930 /*{ENCODED_INT: 9044}*/:
                return "Qualcomm Snapdragon 400 (MSM8930)";
            case SOC_SNAP_400_MSM8930AB /*{ENCODED_INT: 9045}*/:
                return "Qualcomm Snapdragon 400 (MSM8930AB)";
            case SOC_SNAP_410_412 /*{ENCODED_INT: 9046}*/:
                return "Qualcomm Snapdragon 410/412";
            case SOC_SNAP_410_MSM8216 /*{ENCODED_INT: 9047}*/:
                return "Qualcomm Snapdragon 410 (MSM8216)";
            case SOC_SNAP_410_MSM8916 /*{ENCODED_INT: 9048}*/:
                return "Qualcomm Snapdragon 410 (MSM8916)";
            case SOC_SNAP_415_425_615_616_617 /*{ENCODED_INT: 9049}*/:
                return "Qualcomm Snapdragon 415/425/615/616/617";
            case SOC_SNAP_415_MSM8929 /*{ENCODED_INT: 9050}*/:
                return "Qualcomm Snapdragon 415 (MSM8929)";
            case SOC_SNAP_430 /*{ENCODED_INT: 9051}*/:
                return "Qualcomm Snapdragon 430";
            case SOC_SNAP_430_MSM8937 /*{ENCODED_INT: 9052}*/:
                return "Qualcomm Snapdragon 430 (MSM8937)";
            case SOC_SNAP_600_APQ8064AB /*{ENCODED_INT: 9053}*/:
                return "Qualcomm Snapdragon 600 (APQ8064AB)";
            case SOC_SNAP_600_APQ8064FLO /*{ENCODED_INT: 9054}*/:
                return "Qualcomm Snapdragon 600 (APQ8064-FLO)";
            case SOC_SNAP_600_APQ8064T /*{ENCODED_INT: 9055}*/:
                return "Qualcomm Snapdragon 600 (APQ8064T)";
            case SOC_SNAP_610 /*{ENCODED_INT: 9056}*/:
                return "Qualcomm Snapdragon 610";
            case SOC_SNAP_610_MSM8936 /*{ENCODED_INT: 9057}*/:
                return "Qualcomm Snapdragon 610 (MSM8936)";
            case SOC_SNAP_615_MSM8939 /*{ENCODED_INT: 9058}*/:
                return "Qualcomm Snapdragon 615 (MSM8939)";
            case SOC_SNAP_617_MSM8952 /*{ENCODED_INT: 9059}*/:
                return "Qualcomm Snapdragon 617 (MSM8952)";
            case SOC_SNAP_618 /*{ENCODED_INT: 9060}*/:
                return "Qualcomm Snapdragon 618";
            case SOC_SNAP_618_MSM8956 /*{ENCODED_INT: 9061}*/:
                return "Qualcomm Snapdragon 618 (MSM8956)";
            case SOC_SNAP_620 /*{ENCODED_INT: 9062}*/:
                return "Qualcomm Snapdragon 620";
            case SOC_SNAP_620_MSM8976 /*{ENCODED_INT: 9063}*/:
                return "Qualcomm Snapdragon 620 (MSM8976)";
            case SOC_SNAP_800_801 /*{ENCODED_INT: 9064}*/:
                return "Qualcomm Snapdragon 800/801";
            case SOC_SNAP_800_MSM8274 /*{ENCODED_INT: 9065}*/:
                return "Qualcomm Snapdragon 800 (MSM8274)";
            case SOC_SNAP_800_MSM8974 /*{ENCODED_INT: 9066}*/:
                return "Qualcomm Snapdragon 800 (MSM8974)";
            case SOC_SNAP_801 /*{ENCODED_INT: 9067}*/:
                return "Qualcomm Snapdragon 801";
            case SOC_SNAP_801_MSM8974AA /*{ENCODED_INT: 9068}*/:
                return "Qualcomm Snapdragon 801 (MSM8974AA)";
            case SOC_SNAP_801_MSM8974AB /*{ENCODED_INT: 9069}*/:
                return "Qualcomm Snapdragon 801 (MSM8974AB)";
            case SOC_SNAP_801_MSM8974AC /*{ENCODED_INT: 9070}*/:
                return "Qualcomm Snapdragon 801 (MSM8974AC)";
            case SOC_SNAP_805 /*{ENCODED_INT: 9071}*/:
                return "Qualcomm Snapdragon 805";
            case SOC_SNAP_805_APQ8084 /*{ENCODED_INT: 9072}*/:
                return "Qualcomm Snapdragon 805 (APQ8084)";
            case SOC_SNAP_805_APQ8084AB /*{ENCODED_INT: 9073}*/:
                return "Qualcomm Snapdragon 805 (APQ8084AB)";
            case SOC_SNAP_808 /*{ENCODED_INT: 9074}*/:
                return "Qualcomm Snapdragon 808";
            case SOC_SNAP_808_MSM8992 /*{ENCODED_INT: 9075}*/:
                return "Qualcomm Snapdragon 808 (MSM8992)";
            case SOC_SNAP_810 /*{ENCODED_INT: 9076}*/:
                return "Qualcomm Snapdragon 810";
            case SOC_SNAP_810_MSM8994 /*{ENCODED_INT: 9077}*/:
                return "Qualcomm Snapdragon 810 (MSM8994)";
            case SOC_SNAP_820 /*{ENCODED_INT: 9078}*/:
                return "Qualcomm Snapdragon 820";
            case SOC_SNAP_820_MSM8996 /*{ENCODED_INT: 9079}*/:
                return "Qualcomm Snapdragon 820 (MSM8996)";
            case SOC_SNAP_DUAL_KRAIT /*{ENCODED_INT: 9080}*/:
                return "Qualcomm Snapdragon S4/400";
            case SOC_SNAP_QUAD_KRAIT /*{ENCODED_INT: 9081}*/:
                return "Qualcomm Snapdragon S4/600/800/801/805";
            case 10001:
                return "Texas Instruments OMAP3410";
            case 10002:
                return "Texas Instruments OMAP3430";
            case 10003:
                return "Texas Instruments OMAP3610";
            case 10004:
                return "Texas Instruments OMAP3620";
            case 10005:
                return "Texas Instruments OMAP3630";
            case 10006:
                return "Texas Instruments OMAP4430";
            case 10007:
                return "Texas Instruments OMAP4460";
            case 10008:
                return "Texas Instruments OMAP4470";
            case SOC_NOVATHOR_U8420 /*{ENCODED_INT: 11001}*/:
                return "ST-Ericsson NovaThor U8420";
            case SOC_NOVATHOR_U8500 /*{ENCODED_INT: 11002}*/:
                return "ST-Ericsson NovaThor U8500";
            case SOC_NUCLUN /*{ENCODED_INT: 12001}*/:
                return "LG Nuclun LG7111";
            case SOC_SC6820 /*{ENCODED_INT: 13001}*/:
                return "Spreadtrum SC6820";
            case SOC_SC6820I /*{ENCODED_INT: 13002}*/:
                return "Spreadtrum SC6820i";
            case SOC_SC6821 /*{ENCODED_INT: 13003}*/:
                return "Spreadtrum SC6821";
            case SOC_SC6825 /*{ENCODED_INT: 13004}*/:
                return "Spreadtrum SC6825";
            case SOC_SC7715 /*{ENCODED_INT: 13005}*/:
                return "Spreadtrum SC7715";
            case SOC_SC7727S /*{ENCODED_INT: 13006}*/:
                return "Spreadtrum SC7727S";
            case SOC_SC7730A /*{ENCODED_INT: 13007}*/:
                return "Spreadtrum SC7730A";
            case SOC_SC7730S /*{ENCODED_INT: 13008}*/:
                return "Spreadtrum SC7730S";
            case SOC_SC7730SE /*{ENCODED_INT: 13009}*/:
                return "Spreadtrum SC7730SE";
            case SOC_SC7731G /*{ENCODED_INT: 13010}*/:
                return "Spreadtrum SC7731G";
            case SOC_SC7735S /*{ENCODED_INT: 13011}*/:
                return "Spreadtrum Shark SC7735S";
            case SOC_SC8810 /*{ENCODED_INT: 13012}*/:
                return "Spreadtrum SC8810";
            case SOC_ALLW_A10 /*{ENCODED_INT: 14001}*/:
                return "Allwinner A10";
            case SOC_ALLW_A13 /*{ENCODED_INT: 14002}*/:
                return "Allwinner A13";
            case SOC_ALLW_A20 /*{ENCODED_INT: 14003}*/:
                return "Allwinner A20";
            case SOC_ALLW_A23 /*{ENCODED_INT: 14004}*/:
                return "Allwinner A23";
            case SOC_ALLW_A31 /*{ENCODED_INT: 14005}*/:
                return "Allwinner A31";
            case SOC_ALLW_A31S /*{ENCODED_INT: 14006}*/:
                return "Allwinner A31s";
            case SOC_ALLW_A33 /*{ENCODED_INT: 14007}*/:
                return "Allwinner A33";
            case SOC_ALLW_A80 /*{ENCODED_INT: 14008}*/:
                return "Allwinner A80";
            case SOC_ALLW_A80T /*{ENCODED_INT: 14009}*/:
                return "Allwinner A80T";
            case SOC_ATM7021 /*{ENCODED_INT: 15001}*/:
                return "Actions ATM7021";
            case SOC_ATM7029 /*{ENCODED_INT: 15002}*/:
                return "Actions ATM7029";
            case SOC_AML8726_M8 /*{ENCODED_INT: 16001}*/:
                return "AMLogic Meson8 AML8726-M8";
            case SOC_AML8726_MX /*{ENCODED_INT: 16002}*/:
                return "AMLogic Meson6 AML8726-MX";
            case SOC_LC1810 /*{ENCODED_INT: 17001}*/:
                return "Leadcore LC1810";
            case SOC_LC1811 /*{ENCODED_INT: 17002}*/:
                return "Leadcore LC1811";
            case SOC_LC1813 /*{ENCODED_INT: 17003}*/:
                return "Leadcore LC1813";
            case SOC_LC1860 /*{ENCODED_INT: 17004}*/:
                return "Leadcore LC1860";
            case SOC_LC1860C /*{ENCODED_INT: 17005}*/:
                return "Leadcore LC1860C";
            case SOC_LC1913 /*{ENCODED_INT: 17006}*/:
                return "Leadcore LC1913";
            case SOC_LC1960 /*{ENCODED_INT: 17007}*/:
                return "Leadcore LC1960";
            default:
                return "";
        }
        return "AMD Amur";
    }

    public static String getSoCCodename_Str() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (sysinfo.CPUInfo_isX86) {
            if (sysinfo.CPUInfo_isX86_AMD) {
                switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                    case 1552:
                        return "Argon, K7";
                    case 1568:
                        return "Pluto, K75";
                    case 1584:
                        return "Spitfire";
                    case 1600:
                        return "Thunderbird";
                    case 1632:
                        return "Palomino";
                    case 4016:
                        return "Paris S939";
                    case 266000:
                    case 331536:
                        return "Santa Rosa";
                    case 266112:
                    case 331648:
                        return "Taylor";
                    case 266160:
                    case 331696:
                        return "Windsor";
                    case 397104:
                    case 462640:
                        return "Brisbane";
                    case 397184:
                    case 462720:
                        return "Tyler";
                    case 397248:
                    case 462784:
                        return "Sherman";
                    case 790288:
                        return "Windsor 4x4";
                    case 3149568:
                    case 3149584:
                    case 3149600:
                        return "Llano";
                    case 6360832:
                    case 6360848:
                        return "Trinity";
                    case 6360864:
                        return "Weatherford";
                    case 6360880:
                        return "Richland";
                    case 6426368:
                        return "Komodo";
                    case 6492032:
                        return "Godavari";
                    case 6688512:
                        return "Carrizo";
                    case 6754048:
                        return "Stoney";
                    case 7737088:
                        return "Nolan (Carrizo-L)";
                    case 18878208:
                        return "Amur";
                }
            } else if (sysinfo.CPUInfo_isX86_Intel) {
                switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                    case 1536:
                    case 1552:
                        return "P6";
                    case 1584:
                        return "Klamath";
                    case 1696:
                        return "Cascades";
                    case 1712:
                        return "Tualatin";
                    case 2816:
                        return "Knights Ferry";
                    case 2832:
                        return "Knights Corner";
                    case 5680:
                        return "Deschutes OverDrive";
                    case 67280:
                        return "Dunnington";
                    case 132720:
                        return "Penwell (Medfield)";
                    case 132768:
                        return "Sandy Bridge";
                    case 132816:
                        return "Sandy Bridge-E/EN/EP";
                    case 132832:
                        return "Nehalem-EX";
                    case 132848:
                        return "Westmere-EX";
                    case 198224:
                        return "Cloverview";
                    case 198256:
                        return "Bay Trail";
                    case 198304:
                        return "Ivy Bridge";
                    case 198336:
                        return "Haswell";
                    case 198352:
                        return "Broadwell-U/Y";
                    case 198368:
                        return "Ivy Bridge-E/EN/EP/EX";
                    case 198384:
                        return "Haswell-E/EN/EP/EX";
                    case 263760:
                        return "Haswell-ULT";
                    case 263776:
                        return "Crystal Well";
                    case 263792:
                        return "Broadwell-H";
                    case 263840:
                        return "Tangier (Merrifield)";
                    case 263872:
                        return "Cherry Trail";
                    case 263904:
                        return "Skylake-U/Y";
                    case 263920:
                        return "Broadwell-E/EN/EP/EX";
                    case 329296:
                        return "Skylake-E/EN/EP/EX";
                    case 329312:
                        return "Broadwell-DE";
                    case 329328:
                        return "Knights Landing";
                    case 329376:
                        return "Anniedale (Moorefield)";
                    case 329408:
                        return "Apollo Lake";
                    case 329424:
                        return "SoFIA";
                    case 329440:
                        return "Skylake-H/S";
                    case 394832:
                        return "SoFIA LTE";
                    case 394848:
                        return "Cannonlake";
                    case 526048:
                        return "Kaby Lake-U/Y";
                    case 591584:
                        return "Kaby Lake-H/S";
                }
            } else if (sysinfo.CPUInfo_isX86_VIA) {
                switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                    case 1632:
                        return "WinChip 5A, Samuel";
                    case 1648:
                        if (sysinfo.CPUInfo_x86_CPUIDRev >= 1656) {
                            return "WinChip 5C, Ezra";
                        }
                        return "WinChip 5B, Samuel 2, Cyrix IIIA";
                    case 1664:
                        return "WinChip 5N, Ezra-T";
                    case 1680:
                        if (sysinfo.CPUInfo_x86_CPUIDRev >= 1688) {
                            return "WinChip 5P, Nehemiah-P";
                        }
                        return "WinChip 5XL, Nehemiah";
                    case 1696:
                        if (sysinfo.CPUInfo_x86_CPUIDRev >= 1704) {
                            return "WinChip 5J, Esther";
                        }
                        return "WinChip 5Q, Ruth";
                    case 1744:
                        return "WinChip 5R, Esther";
                    case 1776:
                        if (sysinfo.CPUInfo_x86_CPUIDRev <= 1783) {
                            return "Isaiah CNA";
                        }
                        if (sysinfo.CPUInfo_x86_CPUIDRev <= 1787) {
                            return "Isaiah CNB";
                        }
                        if (sysinfo.CPUInfo_x86_CPUIDRev <= 1789) {
                            return "Isaiah CNQ";
                        }
                        return "Isaiah CNR";
                }
            }
            return "";
        }
        switch (getSoCModel_Cached()) {
            case 2004:
            case 2005:
                return "Kal-El";
            case 2006:
            case 2007:
                return "Wayne";
            case 2008:
                return "Grey";
            case 2009:
            case 2010:
                return "Logan";
            default:
                return "";
        }
    }

    public static String getCPUCaches() {
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (sysinfo.CPUInfo_isX86) {
            if (sysinfo.CPUInfo_isX86_Intel) {
                switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                    case 132720:
                        return "L1I=32K/L1D=24K/L2=512K";
                    case 198224:
                        return "L1I=32K/L1D=24K/L2=1M";
                    case 198256:
                        switch (sysinfo.CPUInfo_x86_CoreCount) {
                            case 2:
                                return "L1I=32K/L1D=24K/L2=1M";
                            case 4:
                                return "L1I=32K/L1D=24K/L2=2M";
                        }
                    case 263840:
                        return "L1I=32K/L1D=24K/L2=1M";
                    case 263872:
                        switch (sysinfo.CPUInfo_x86_CoreCount) {
                            case 2:
                                return "L1I=32K/L1D=24K/L2=1M";
                            case 4:
                                return "L1I=32K/L1D=24K/L2=2M";
                        }
                    case 329376:
                        return "L1I=32K/L1D=24K/L2=2M";
                    case 329424:
                        switch (sysinfo.CPUInfo_x86_CoreCount) {
                            case 2:
                                return "L1I=32K/L1D=24K/L2=512K";
                            case 4:
                                return "L1I=32K/L1D=24K/L2=1M";
                        }
                }
            }
            return "";
        }
        switch (getSoCModel_Cached()) {
            case 2001:
            case 2002:
            case 2003:
            case 2004:
            case 2005:
            case 4001:
            case 4002:
                return "L1I=32K/L1D=32K/L2=1M";
            case 2006:
            case 2007:
                return "L1I=32K/L1D=32K/L2=2M";
            case 2008:
                return "L1I=32K/L1D=32K/L2=1M";
            case 2009:
                return "L1I=32K/L1D=32K/L2=2M";
            case 2010:
                return "L1I=128K/L1D=64K/L2=2M";
            case 5006:
            case 5010:
            case 5011:
            case SOC_MT6582 /*{ENCODED_INT: 8017}*/:
            case SOC_MT6582M /*{ENCODED_INT: 8018}*/:
            case SOC_MT6588 /*{ENCODED_INT: 8019}*/:
            case SOC_MT8127 /*{ENCODED_INT: 8050}*/:
            case SOC_MT8732 /*{ENCODED_INT: 8068}*/:
                return "L2=512K";
            case 5009:
            case SOC_MT6572 /*{ENCODED_INT: 8008}*/:
            case SOC_MT6572M /*{ENCODED_INT: 8009}*/:
            case SOC_MT8312 /*{ENCODED_INT: 8056}*/:
            case SOC_MT8382 /*{ENCODED_INT: 8063}*/:
                return "L2=256K";
            case 5012:
            case SOC_MT6589 /*{ENCODED_INT: 8020}*/:
            case SOC_MT6589M /*{ENCODED_INT: 8021}*/:
            case SOC_MT6589T /*{ENCODED_INT: 8022}*/:
            case SOC_MT6592 /*{ENCODED_INT: 8024}*/:
            case SOC_MT6592M /*{ENCODED_INT: 8025}*/:
            case SOC_MT6592T /*{ENCODED_INT: 8026}*/:
            case SOC_MT6592W /*{ENCODED_INT: 8027}*/:
            case SOC_MT8125 /*{ENCODED_INT: 8049}*/:
            case SOC_MT8389 /*{ENCODED_INT: 8064}*/:
            case SOC_MT8389T /*{ENCODED_INT: 8065}*/:
            case SOC_MT8392 /*{ENCODED_INT: 8066}*/:
                return "L2=1M";
            case SOC_MT6595 /*{ENCODED_INT: 8028}*/:
            case SOC_MT6595M /*{ENCODED_INT: 8029}*/:
            case SOC_MT6595T /*{ENCODED_INT: 8030}*/:
                return "L2=2M";
            case SOC_SC6825 /*{ENCODED_INT: 13004}*/:
            case SOC_SC7715 /*{ENCODED_INT: 13005}*/:
            case SOC_SC7727S /*{ENCODED_INT: 13006}*/:
                return "L1I=32K/L1D=32K/L2=256K";
            case SOC_SC7730A /*{ENCODED_INT: 13007}*/:
            case SOC_SC7730S /*{ENCODED_INT: 13008}*/:
            case SOC_SC7730SE /*{ENCODED_INT: 13009}*/:
            case SOC_SC7731G /*{ENCODED_INT: 13010}*/:
            case SOC_SC7735S /*{ENCODED_INT: 13011}*/:
                return "L1I=32K/L1D=32K/L2=512K";
            default:
                if (sysinfo.CPUInfo_ARM_CPUInfo.impl == 81) {
                    switch (sysinfo.CPUInfo_ARM_CPUInfo.part) {
                        case 15:
                        case 45:
                            switch (getSoCModel_Cached()) {
                                case SOC_SNAP_S4_PLUS_MSM8230 /*{ENCODED_INT: 9019}*/:
                                case SOC_SNAP_S4_PLUS_MSM8960 /*{ENCODED_INT: 9020}*/:
                                case SOC_SNAP_S4_PRO_MSM8960T /*{ENCODED_INT: 9025}*/:
                                    sysinfo.CPUInfo_ARM_CPUInfo.part = 77;
                                    break;
                                case SOC_SNAP_801_MSM8974AA /*{ENCODED_INT: 9068}*/:
                                    sysinfo.CPUInfo_ARM_CPUInfo.part = DEVMANUF_MEDION;
                                    break;
                            }
                    }
                    switch (sysinfo.CPUInfo_ARM_CPUInfo.part) {
                        case 15:
                            return "L1I=32K/L1D=32K/L2=256K";
                        case 45:
                            return "L1I=32K/L1D=32K/L2=512K";
                        case 77:
                            return "L0I=4K/L0D=4K/L1I=16K/L1D=16K/L2=1M";
                        case DEVMANUF_MEDION /*{ENCODED_INT: 111}*/:
                            return "L0I=4K/L0D=4K/L1I=16K/L1D=16K/L2=2M";
                    }
                }
                return "";
        }
    }

    public static String extractCacheFromStr(String caches, String id) {
        int cores;
        int i = caches.indexOf("/" + id + "=");
        if (i >= 0) {
            String sub = caches.substring(id.length() + i + 2);
            int i2 = sub.indexOf("/");
            if (i2 >= 0) {
                sub = sub.substring(0, i2);
            }
            if (sub.length() > 0) {
                String coresStr = "";
                if ((id.startsWith("L0") || id.startsWith("L1")) && (cores = getCPUCoreCount()) > 1) {
                    coresStr = String.format("%dx ", Integer.valueOf(cores));
                }
                return coresStr + sub;
            }
        }
        return "";
    }

    private static String decodeARMImplementer(int impl) {
        switch (impl) {
            case 65:
                return MANUF_ARM;
            case 68:
                return MANUF_DEC;
            case 77:
                return MANUF_FS;
            case 78:
                return MANUF_NVDA;
            case 81:
                return MANUF_QCOM;
            case 86:
                return MANUF_MARV;
            case 105:
                return MANUF_INTC;
            default:
                return String.format("Unknown Vendor (id = 0x%02X)", Integer.valueOf(impl & 255));
        }
    }

    private static String decodeARMPartNumber_ARM(int part) {
        switch (part) {
            case 2336:
                return CORE_ARM920;
            case 2338:
                return CORE_ARM922;
            case 2342:
                return CORE_ARM926;
            case 2368:
                return CORE_ARM940;
            case 2374:
                return CORE_ARM946;
            case 2406:
                return CORE_ARM966;
            case 2408:
                return CORE_ARM968;
            case 2598:
                return CORE_ARM1026;
            case 2818:
                return CORE_ARM11;
            case 2870:
                return CORE_ARM1136;
            case 2902:
                return CORE_ARM1156;
            case 2934:
                return CORE_ARM1176;
            case ARM_PART_A5 /*{ENCODED_INT: 3077}*/:
                return CORE_A5;
            case ARM_PART_A7 /*{ENCODED_INT: 3079}*/:
                return CORE_A7;
            case 3080:
                return CORE_A8;
            case ARM_PART_A9 /*{ENCODED_INT: 3081}*/:
                return CORE_A9;
            case 3084:
                return CORE_A12;
            case 3085:
                return CORE_A17;
            case 3086:
                return CORE_A17;
            case ARM_PART_A15 /*{ENCODED_INT: 3087}*/:
                return CORE_A15;
            case 3092:
                return CORE_R4;
            case 3093:
                return CORE_R5;
            case 3104:
                return CORE_M0;
            case 3105:
                return CORE_M1;
            case 3107:
                return CORE_M3;
            case 3108:
                return CORE_M4;
            case 3168:
                return CORE_M0_PLUS;
            case ARM_PART_A53 /*{ENCODED_INT: 3331}*/:
                return CORE_A53;
            case ARM_PART_A57 /*{ENCODED_INT: 3335}*/:
                return CORE_A57;
            case ARM_PART_A72 /*{ENCODED_INT: 3336}*/:
                return CORE_A72;
            default:
                return String.format("0x%X", Integer.valueOf(65535 & part));
        }
    }

    private static String decodeARMPartNumber_DEC(int part) {
        switch (part) {
            case 2577:
                return "StrongARM SA-1100";
            default:
                return String.format("0x%X", Integer.valueOf(65535 & part));
        }
    }

    private static String decodeARMPartNumber_nVIDIA(int part) {
        switch (part) {
            case 0:
                return CORE_DENVER;
            default:
                return String.format("0x%X", Integer.valueOf(65535 & part));
        }
    }

    private static String decodeARMPartNumber_Qualcomm(int part) {
        switch (part) {
            case 15:
            case 45:
                switch (getSoCModel_Cached()) {
                    case SOC_SNAP_S4_PLUS_MSM8230 /*{ENCODED_INT: 9019}*/:
                    case SOC_SNAP_S4_PLUS_MSM8960 /*{ENCODED_INT: 9020}*/:
                    case SOC_SNAP_S4_PRO_MSM8960T /*{ENCODED_INT: 9025}*/:
                        return CORE_KRAIT;
                    case SOC_SNAP_801_MSM8974AA /*{ENCODED_INT: 9068}*/:
                        return CORE_KRAIT_400;
                    default:
                        return CORE_SCORPION;
                }
            case 77:
            case DEVMANUF_MEDION /*{ENCODED_INT: 111}*/:
                switch (getSoCModel_Cached()) {
                    case SOC_SNAP_S4_PRO_MSM8960DT /*{ENCODED_INT: 9024}*/:
                    case SOC_SNAP_400_MSM8930AB /*{ENCODED_INT: 9045}*/:
                    case SOC_SNAP_600_APQ8064AB /*{ENCODED_INT: 9053}*/:
                    case SOC_SNAP_600_APQ8064FLO /*{ENCODED_INT: 9054}*/:
                    case SOC_SNAP_600_APQ8064T /*{ENCODED_INT: 9055}*/:
                        return CORE_KRAIT_300;
                    case SOC_SNAP_800_801 /*{ENCODED_INT: 9064}*/:
                    case SOC_SNAP_800_MSM8274 /*{ENCODED_INT: 9065}*/:
                    case SOC_SNAP_800_MSM8974 /*{ENCODED_INT: 9066}*/:
                    case SOC_SNAP_801 /*{ENCODED_INT: 9067}*/:
                    case SOC_SNAP_801_MSM8974AA /*{ENCODED_INT: 9068}*/:
                    case SOC_SNAP_801_MSM8974AB /*{ENCODED_INT: 9069}*/:
                    case SOC_SNAP_801_MSM8974AC /*{ENCODED_INT: 9070}*/:
                        return CORE_KRAIT_400;
                    case SOC_SNAP_805 /*{ENCODED_INT: 9071}*/:
                    case SOC_SNAP_805_APQ8084 /*{ENCODED_INT: 9072}*/:
                    case SOC_SNAP_805_APQ8084AB /*{ENCODED_INT: 9073}*/:
                        return CORE_KRAIT_450;
                    default:
                        return CORE_KRAIT;
                }
            default:
                return String.format("0x%X", Integer.valueOf(65535 & part));
        }
    }

    private static String decodeARMPartNumber_Marvell(int part) {
        switch (part) {
            case 305:
                return "Feroceon";
            case 1409:
                return "PJ4/PJ4b";
            case 1412:
                return "PJ4/PJ4b";
            default:
                return String.format("0x%X", Integer.valueOf(65535 & part));
        }
    }

    private static String decodeARMPartNumber(int impl, int part) {
        switch (impl) {
            case 65:
                return decodeARMPartNumber_ARM(part);
            case 68:
                return decodeARMPartNumber_DEC(part);
            case 78:
                return decodeARMPartNumber_nVIDIA(part);
            case 81:
                return decodeARMPartNumber_Qualcomm(part);
            case 86:
                return decodeARMPartNumber_Marvell(part);
            default:
                return String.format("0x%X", Integer.valueOf(65535 & impl));
        }
    }

    public static List<String> getCPUCoreArchitecture() {
        Long max;
        List<String> res = new ArrayList<>();
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        if (!sysinfo.CPUInfo_isARM) {
            if (!sysinfo.CPUInfo_isX86_Intel) {
                if (sysinfo.CPUInfo_isX86_AMD) {
                    switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                        case 3149568:
                        case 3149584:
                        case 3149600:
                            res.add("AMD Husky");
                            break;
                        case 6360832:
                        case 6360848:
                        case 6360864:
                        case 6360880:
                            res.add("AMD Piledriver");
                            break;
                        case 6491904:
                        case 6491920:
                        case 6492032:
                            res.add("AMD Steamroller");
                            break;
                        case 6688512:
                        case 6754048:
                            res.add("AMD Excavator");
                            break;
                        case 18878208:
                            res.add("AMD K21");
                            break;
                    }
                }
            } else {
                switch (sysinfo.CPUInfo_x86_CPUIDRev & -16) {
                    case 67264:
                    case 132704:
                        res.add("Intel Bonnell");
                        break;
                    case 132720:
                    case 198224:
                    case 198240:
                        res.add("Intel Saltwell");
                        break;
                    case 198256:
                    case 263840:
                    case 263888:
                    case 329328:
                    case 329376:
                    case 329424:
                        res.add("Intel Silvermont");
                        break;
                    case 263872:
                        res.add("Intel Airmont");
                        break;
                    case 329408:
                        res.add("Intel Goldmont");
                        break;
                }
            }
        } else if (sysinfo.CPUInfo_ARM_CPUList.size() != 0) {
            String lastArch = "";
            int coreCount = 0;
            int listSize = sysinfo.CPUInfo_ARM_CPUList.size();
            Long maxClk = 0L;
            for (int coreIdx = 0; coreIdx < listSize; coreIdx++) {
                SysInfoSingleTon.ARMCPUInfo aci = sysinfo.CPUInfo_ARM_CPUList.get(coreIdx);
                if (aci != null) {
                    String arch = decodeARMImplementer(aci.impl) + " " + decodeARMPartNumber(aci.impl, aci.part);
                    if (sysinfo.CPUInfo_ARM_isExynos5410_5420) {
                        max = 0L;
                    } else {
                        max = Long.valueOf(getMaxCPUCoreClock(coreIdx));
                    }
                    if (!arch.equals(lastArch) || (sysinfo.CPUInfo_ARM_isBigLittle4_4 && coreIdx == 4)) {
                        if (lastArch.length() > 0) {
                            if (maxClk.longValue() > 0) {
                                lastArch = lastArch + String.format(" @ %d MHz", maxClk);
                            }
                            if (coreCount > 1) {
                                lastArch = String.format("%dx %s", Integer.valueOf(coreCount), lastArch);
                            }
                            res.add(lastArch);
                        }
                        lastArch = arch;
                        coreCount = 1;
                        maxClk = 0L;
                    } else {
                        coreCount++;
                    }
                    if (max.longValue() > 0) {
                        maxClk = max;
                    }
                }
            }
            if (Build.MODEL.equals("SM-G355H")) {
                coreCount = 4;
            }
            if (lastArch.length() > 0) {
                if (maxClk.longValue() > 0) {
                    lastArch = lastArch + String.format(" @ %d MHz", maxClk);
                }
                if (coreCount > 1) {
                    lastArch = String.format("%dx %s", Integer.valueOf(coreCount), lastArch);
                }
                res.add(lastArch);
            }
            switch (getSoCModel_Cached()) {
                case 2004:
                case 2005:
                    res.add(String.format("%dx ARM Cortex-A9 @ %d MHz", 1, 500));
                    break;
                case 2006:
                case 2007:
                    res.add(String.format("%dx ARM Cortex-A15", 1));
                    break;
                case 2008:
                    res.add(String.format("%dx ARM Cortex-A9", 1));
                    break;
            }
        } else {
            int impl = sysinfo.CPUInfo_ARM_CPUInfo.impl;
            int part = sysinfo.CPUInfo_ARM_CPUInfo.part;
            if (impl == 65 && part == -1 && sysinfo.CPUInfo_ARM_CPUInfo.hardware.trim().toUpperCase().equals("GS702A")) {
                part = ARM_PART_A5;
            }
            if (impl >= 0) {
                String arch2 = decodeARMImplementer(impl) + " " + decodeARMPartNumber(impl, part);
                Long maxClk2 = Long.valueOf(getMaxCPUCoreClock(0));
                if (maxClk2.longValue() > 0) {
                    arch2 = arch2 + String.format(" @ %d MHz", maxClk2);
                }
                res.add(arch2);
            }
        }
        return res;
    }

    public static String getCPUCoreArchitecture_Str() {
        String res = "";
        List<String> archinfo = getCPUCoreArchitecture();
        if (archinfo == null || archinfo.size() <= 0) {
            return res;
        }
        for (String ai : archinfo) {
            if (ai != null) {
                res = res + "\n" + ai;
            }
        }
        if (res.length() > 0) {
            return res.substring(1);
        }
        return res;
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    /*  JADX ERROR: JadxRuntimeException in pass: RegionMakerVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Failed to find switch 'out' block
        	at jadx.core.dex.visitors.regions.RegionMaker.processSwitch(RegionMaker.java:786)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:130)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:88)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:696)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:125)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:88)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:701)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:125)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:88)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:50)
        */
    public static int getSoCProcess() {
        /*
        // Method dump skipped, instructions count: 1890
        */
        throw new UnsupportedOperationException("Method not decompiled: com.finalwire.aidaengine.SysInfo.getSoCProcess():int");
    }

    public static String ABIsToStr(String[] abis) {
        if (abis == null || abis.length == 0) {
            return "";
        }
        StringBuilder builder = new StringBuilder();
        for (String s : abis) {
            if (s != null) {
                builder.append(", " + s);
            }
        }
        String res = builder.toString();
        if (res.length() > 2) {
            return res.substring(2);
        }
        return res;
    }

    public static int getCPUInstructionSet() {
        String[] abis64;
        String arch = System.getProperty("os.arch");
        if (arch == null) {
            return 0;
        }
        String arch2 = arch.toUpperCase();
        if (arch2.equals("AARCH64")) {
            if (Build.VERSION.SDK_INT < 21 || (abis64 = Build.SUPPORTED_64_BIT_ABIS) == null || abis64.length <= 0 || !abis64[0].toUpperCase().equals("ARM64-V8A")) {
                return 4;
            }
            return 5;
        } else if (arch2.startsWith("ARMV7")) {
            return 2;
        } else {
            if (arch2.startsWith("ARMV6")) {
                return 1;
            }
            if (arch2.equals("I686")) {
                return 3;
            }
            if (arch2.equals("X86_64")) {
                return 6;
            }
            if (arch2.startsWith("MIPS64")) {
                return 8;
            }
            if (arch2.startsWith("MIPS")) {
                return 7;
            }
            return 0;
        }
    }

    public static String ipAddressToStr(int ip) {
        return String.format("%d.%d.%d.%d", Integer.valueOf(ip & 255), Integer.valueOf((ip >> 8) & 255), Integer.valueOf((ip >> 16) & 255), Integer.valueOf(ip >> 24));
    }


    /* JADX WARNING: Removed duplicated region for block: B:10:0x0014  */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0025  */
    /* Code decompiled incorrectly, please refer to instructions dump. */

    /* JADX WARNING: Removed duplicated region for block: B:10:0x0014  */
    /* JADX WARNING: Removed duplicated region for block: B:17:0x002a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */

    /* access modifiers changed from: private */
    public static class GeminiMethodNotFoundException extends Exception {
        private static final long serialVersionUID = -996812356902545308L;

        public GeminiMethodNotFoundException(String info) {
            super(info);
        }
    }

    private static int getDualSimInt_NoParam(Object telMgr, String predictedMethodName) throws GeminiMethodNotFoundException {
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, new Class[0]).invoke(telMgr, new Object[0]);
            if (ob_phone != null) {
                return Integer.parseInt(ob_phone.toString());
            }
            return -1;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static int getDualSimInt_IntSlotID(Object telMgr, String predictedMethodName, int slotID) throws GeminiMethodNotFoundException {
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Integer.TYPE).invoke(telMgr, Integer.valueOf(slotID));
            if (ob_phone != null) {
                return Integer.parseInt(ob_phone.toString());
            }
            return -1;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static int getDualSimInt_LongSlotID(Object telMgr, String predictedMethodName, long slotID) throws GeminiMethodNotFoundException {
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Long.TYPE).invoke(telMgr, Long.valueOf(slotID));
            if (ob_phone != null) {
                return Integer.parseInt(ob_phone.toString());
            }
            return -1;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static String getDualSimStr_IntSlotID(Object telMgr, String predictedMethodName, int slotID) throws GeminiMethodNotFoundException {
        String ret = null;
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Integer.TYPE).invoke(telMgr, Integer.valueOf(slotID));
            if (ob_phone != null) {
                ret = ob_phone.toString();
            }
            if (ret == null) {
                return "";
            }
            return ret;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static String getDualSimStr_LongSlotID(Object telMgr, String predictedMethodName, long slotID) throws GeminiMethodNotFoundException {
        String ret = null;
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Long.TYPE).invoke(telMgr, Long.valueOf(slotID));
            if (ob_phone != null) {
                ret = ob_phone.toString();
            }
            if (ret == null) {
                return "";
            }
            return ret;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static boolean getDualSimBoolean_IntSlotID(Object telMgr, String predictedMethodName, int slotID) throws GeminiMethodNotFoundException {
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Integer.TYPE).invoke(telMgr, Integer.valueOf(slotID));
            if (ob_phone != null) {
                return Boolean.parseBoolean(ob_phone.toString());
            }
            return false;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static boolean getDualSimBoolean_LongSlotID(Object telMgr, String predictedMethodName, long slotID) throws GeminiMethodNotFoundException {
        try {
            Object ob_phone = Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Long.TYPE).invoke(telMgr, Long.valueOf(slotID));
            if (ob_phone != null) {
                return Boolean.parseBoolean(ob_phone.toString());
            }
            return false;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static boolean isDualSIMPhone_NoParam(Object telMgr, String predictedMethodName) throws GeminiMethodNotFoundException {
        try {
            if (Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, new Class[0]).invoke(telMgr, new Object[0]) != null) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static boolean isDualSIMPhone_IntSlotID(Object telMgr, String predictedMethodName, int slotID) throws GeminiMethodNotFoundException {
        try {
            if (Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Integer.TYPE).invoke(telMgr, Integer.valueOf(slotID)) != null) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    private static boolean isDualSIMPhone_LongSlotID(Object telMgr, String predictedMethodName, long slotID) throws GeminiMethodNotFoundException {
        try {
            if (Class.forName(telMgr.getClass().getName()).getMethod(predictedMethodName, Long.TYPE).invoke(telMgr, Long.valueOf(slotID)) != null) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new GeminiMethodNotFoundException(predictedMethodName);
        }
    }

    public static boolean detectDualSimKarbonn(TelephonyManager telMgr) {
        try {
            if (!isDualSIMPhone_LongSlotID(telMgr, "getNetworkCountryIso", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkCountryIso", 2) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkOperator", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkOperator", 2) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkOperatorName", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkOperatorName", 2) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkType", 0) || !isDualSIMPhone_LongSlotID(telMgr, "getNetworkType", 1) || !isDualSIMPhone_NoParam(telMgr, "getPhoneCount") || !isDualSIMPhone_NoParam(telMgr, "getSimCount") || !isDualSIMPhone_LongSlotID(telMgr, "getSimCountryIso", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getSimCountryIso", 2) || !isDualSIMPhone_LongSlotID(telMgr, "getSimOperator", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getSimOperator", 2) || !isDualSIMPhone_LongSlotID(telMgr, "getSimOperatorName", 1) || !isDualSIMPhone_LongSlotID(telMgr, "getSimOperatorName", 2) || !isDualSIMPhone_IntSlotID(telMgr, "getSimState", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimState", 1) || !isDualSIMPhone_LongSlotID(telMgr, "hasIccCard", 1) || !isDualSIMPhone_LongSlotID(telMgr, "hasIccCard", 2) || !isDualSIMPhone_LongSlotID(telMgr, "isNetworkRoaming", 1) || !isDualSIMPhone_LongSlotID(telMgr, "isNetworkRoaming", 2)) {
                return false;
            }
            return true;
        } catch (GeminiMethodNotFoundException e1) {
            e1.printStackTrace();
            return false;
        } catch (SecurityException e) {
            Log.e("detectDualSimKarbonn", "SecurityException");
            return false;
        }
    }

    public static boolean detectDualSim51(TelephonyManager telMgr) {
        try {
            if (!isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoForPhone", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoForPhone", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorForPhone", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorForPhone", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorName", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorName", 2) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkType", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkType", 1) || !isDualSIMPhone_NoParam(telMgr, "getPhoneCount") || !isDualSIMPhone_NoParam(telMgr, "getSimCount") || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoForPhone", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoForPhone", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperator", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperator", 2) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameForPhone", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameForPhone", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimState", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimState", 1) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCard", 0) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCard", 1) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoaming", 0) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoaming", 1)) {
                return false;
            }
            return true;
        } catch (GeminiMethodNotFoundException e1) {
            e1.printStackTrace();
            return false;
        } catch (SecurityException e) {
            Log.e("detectDualSim51", "SecurityException");
            return false;
        }
    }

    public static boolean detectDualSimDs(TelephonyManager telMgr) {
        try {
            if (!isDualSIMPhone_IntSlotID(telMgr, "getDataActivityDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getDataActivityDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getDataStateDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getDataStateDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorNameDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorNameDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkTypeDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkTypeDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getPhoneTypeDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getPhoneTypeDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimStateDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimStateDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCardDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCardDs", 1) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoamingDs", 0) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoamingDs", 1)) {
                return false;
            }
            return true;
        } catch (GeminiMethodNotFoundException e1) {
            e1.printStackTrace();
            return false;
        } catch (SecurityException e) {
            Log.e("detectDualSimDs", "SecurityException");
            return false;
        }
    }

    public static boolean detectDualSimGemini(TelephonyManager telMgr) {
        try {
            if (!isDualSIMPhone_IntSlotID(telMgr, "getDataStateGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getDataStateGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkCountryIsoGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorNameGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkOperatorNameGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkTypeGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getNetworkTypeGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getPhoneTypeGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getPhoneTypeGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimCountryIsoGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimOperatorNameGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "getSimStateGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "getSimStateGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCardGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "hasIccCardGemini", 1) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoamingGemini", 0) || !isDualSIMPhone_IntSlotID(telMgr, "isNetworkRoamingGemini", 1)) {
                return false;
            }
            return true;
        } catch (GeminiMethodNotFoundException e1) {
            e1.printStackTrace();
            return false;
        } catch (SecurityException e) {
            Log.e("detectDualSimGemini", "SecurityException");
            return false;
        }
    }

    public static String getDirectoryPath(File dir) {
        String path;
        return (dir == null || !dir.exists() || (path = dir.getPath()) == null) ? "" : path;
    }

    public static ArrayList<String> getSDCardMountPoints() {
        File dirFil;
        String[] aLineSplit;
        File dirFil2;
        if (new StringBuffer() == null) {
            return null;
        }
        File fil = new File("/system/etc/vold.fstab");
        ArrayList<String> res = new ArrayList<>();
        if (fil != null && fil.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(fil));
                if (br != null) {
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        } else if (aLine.startsWith("dev_mount") && (aLineSplit = aLine.split(" ")) != null && aLineSplit.length >= 3) {
                            String dir = aLineSplit[2];
                            if (dir.contains(":")) {
                                dir = dir.substring(0, dir.indexOf(":"));
                            }
                            if (!dir.toUpperCase().contains("USB") && !res.contains(dir) && (dirFil2 = new File(dir)) != null && dirFil2.exists()) {
                                res.add(dir);
                            }
                        }
                    }
                    br.close();
                }
            } catch (IOException e) {
            }
        }
        if (res.size() != 0 || (dirFil = new File("/mnt/sdcard")) == null || !dirFil.exists()) {
            return res;
        }
        res.add("/mnt/sdcard");
        return res;
    }

    public static void openWebBrowser(Context context, String url) {
        Intent browserIntent;
        if (context != null && (browserIntent = new Intent("android.intent.action.VIEW", Uri.parse(url))) != null) {
            context.startActivity(browserIntent);
        }
    }

    private static int strHexOrDecToInt(String val) {
        String value = val.trim().toUpperCase();
        int base = 10;
        if (value.startsWith("0X")) {
            base = 16;
            value = value.substring(2);
        }
        try {
            return Integer.valueOf(value, base).intValue();
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private static String valueForKey(String line, String key) {
        Matcher m = Pattern.compile("(?i)" + key + "\t*: (.*)").matcher(line);
        if (m.matches()) {
            return m.group(1);
        }
        return null;
    }

    private static void detectCPUInfo_proc_cpuinfo_ARM() {
        int valueInt;
        int valueInt2;
        File cpuinfo = new File("/proc/cpuinfo");
        if (cpuinfo != null && cpuinfo.exists()) {
            try {
                SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
                String varStr = "";
                String partStr = "";
                String revStr = "";
                BufferedReader br = new BufferedReader(new FileReader(cpuinfo));
                SysInfoSingleTon.ARMCPUInfo cpuInfo = new SysInfoSingleTon.ARMCPUInfo();
                if (br != null) {
                    sysinfo.CPUInfo_ARM_CPUList.clear();
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        }
                        String value = valueForKey(aLine, "processor");
                        if (value != null && (valueInt = strHexOrDecToInt(value)) >= 0 && (valueInt2 = valueInt + 1) > sysinfo.CPUInfo_ARM_CoreCount) {
                            sysinfo.CPUInfo_ARM_CoreCount = valueInt2;
                        }
                        String value2 = valueForKey(aLine, "Chip name");
                        if (value2 != null) {
                            sysinfo.CPUInfo_ARM_CPUInfo.chipName = value2.trim();
                        }
                        String value3 = valueForKey(aLine, "Hardware");
                        if (value3 != null) {
                            sysinfo.CPUInfo_ARM_CPUInfo.hardware = value3.trim();
                        }
                        String value4 = valueForKey(aLine, "MSM Hardware");
                        if (value4 != null) {
                            sysinfo.CPUInfo_ARM_CPUInfo.msmHardware = value4.trim();
                        }
                        String value5 = valueForKey(aLine, "CPU implementer");
                        if (value5 != null) {
                            int valueInt3 = strHexOrDecToInt(value5);
                            sysinfo.CPUInfo_ARM_CPUInfo.impl = valueInt3;
                            cpuInfo.impl = valueInt3;
                        }
                        String value6 = valueForKey(aLine, "CPU architecture");
                        if (value6 != null) {
                            String value7 = value6.trim();
                            sysinfo.CPUInfo_ARM_CPUInfo.arch = value7;
                            cpuInfo.arch = value7;
                        }
                        String value8 = valueForKey(aLine, "CPU variant");
                        if (value8 != null) {
                            int valueInt4 = strHexOrDecToInt(value8);
                            varStr = value8;
                            sysinfo.CPUInfo_ARM_CPUInfo.variant = valueInt4;
                            cpuInfo.variant = valueInt4;
                        }
                        String value9 = valueForKey(aLine, "CPU part");
                        if (value9 != null) {
                            int valueInt5 = strHexOrDecToInt(value9);
                            partStr = value9;
                            sysinfo.CPUInfo_ARM_CPUInfo.part = valueInt5;
                            cpuInfo.part = valueInt5;
                        }
                        String value10 = valueForKey(aLine, "CPU revision");
                        if (value10 != null) {
                            int valueInt6 = strHexOrDecToInt(value10);
                            revStr = value10;
                            sysinfo.CPUInfo_ARM_CPUInfo.rev = valueInt6;
                            cpuInfo.rev = valueInt6;
                            sysinfo.CPUInfo_ARM_CPUList.add(cpuInfo);
                            cpuInfo = new SysInfoSingleTon.ARMCPUInfo();
                        }
                    }
                    br.close();
                }
                int sysCores = getCPUCoreCount_sys();
                if (sysCores > sysinfo.CPUInfo_ARM_CoreCount) {
                    sysinfo.CPUInfo_ARM_CoreCount = sysCores;
                }
                sysinfo.CPUInfo_ARM_isBigLittle4_4 = sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Hisilicon Kirin 930") || sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Hisilicon Kirin 935");
                sysinfo.CPUInfo_ARM_isExynos5410_5420 = sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Samsung EXYNOS5410") || sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("UNIVERSAL5410") || sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Samsung EXYNOS5420") || sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("UNIVERSAL5420");
                if (sysinfo.CPUInfo_ARM_isExynos5410_5420 && sysinfo.CPUInfo_ARM_CoreCount == 4) {
                    sysinfo.CPUInfo_ARM_CoreCount = 8;
                }
                if (sysinfo.CPUInfo_ARM_CoreCount > sysinfo.CPUInfo_ARM_CPUList.size() && sysinfo.CPUInfo_ARM_CPUList.size() > 0) {
                    int count = sysinfo.CPUInfo_ARM_CoreCount - sysinfo.CPUInfo_ARM_CPUList.size();
                    SysInfoSingleTon.ARMCPUInfo item0 = sysinfo.CPUInfo_ARM_CPUList.get(0);
                    for (int i = 0; i < count; i++) {
                        sysinfo.CPUInfo_ARM_CPUList.add(new SysInfoSingleTon.ARMCPUInfo(item0));
                    }
                }
                int varIdx = varStr.indexOf(" & ");
                int partIdx = partStr.indexOf(" & ");
                int revIdx = revStr.indexOf(" & ");
                if (sysinfo.CPUInfo_ARM_CoreCount == 8 && varIdx > 0 && partIdx > 0 && revIdx > 0) {
                    int var1 = strHexOrDecToInt(varStr.substring(0, varIdx));
                    int var2 = strHexOrDecToInt(varStr.substring(varIdx + 3));
                    sysinfo.CPUInfo_ARM_CPUInfo.variant = var1;
                    int part1 = strHexOrDecToInt(partStr.substring(0, partIdx));
                    int part2 = strHexOrDecToInt(partStr.substring(partIdx + 3));
                    sysinfo.CPUInfo_ARM_CPUInfo.part = part1;
                    int rev1 = strHexOrDecToInt(revStr.substring(0, revIdx));
                    int rev2 = strHexOrDecToInt(revStr.substring(revIdx + 3));
                    sysinfo.CPUInfo_ARM_CPUInfo.rev = rev1;
                    int i2 = 0;
                    for (SysInfoSingleTon.ARMCPUInfo aci : sysinfo.CPUInfo_ARM_CPUList) {
                        if (i2 < 4) {
                            aci.variant = var1;
                            aci.part = part1;
                            aci.rev = rev1;
                        } else {
                            aci.variant = var2;
                            aci.part = part2;
                            aci.rev = rev2;
                        }
                        i2++;
                    }
                }
                if (sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("UNIVERSAL5260") && sysinfo.CPUInfo_ARM_CPUList.size() == 6) {
                    for (int i3 = 0; i3 < sysinfo.CPUInfo_ARM_CPUList.size(); i3++) {
                        SysInfoSingleTon.ARMCPUInfo aci2 = sysinfo.CPUInfo_ARM_CPUList.get(i3);
                        if (aci2 != null) {
                            if (i3 < 4) {
                                aci2.part = ARM_PART_A7;
                            } else {
                                aci2.part = ARM_PART_A15;
                            }
                        }
                    }
                }
                boolean exynos5430 = false;
                if (build_Manufacturer().toUpperCase().equals("MEIZU")) {
                    String mdl = Build.MODEL.trim().toUpperCase();
                    if (mdl.equals("MX4PRO") || mdl.equals("MX4 PRO")) {
                        exynos5430 = true;
                    }
                }
                if ((sysinfo.CPUInfo_ARM_isExynos5410_5420 || exynos5430) && sysinfo.CPUInfo_ARM_CPUList.size() == 8) {
                    for (int i4 = 0; i4 < sysinfo.CPUInfo_ARM_CPUList.size(); i4++) {
                        SysInfoSingleTon.ARMCPUInfo aci3 = sysinfo.CPUInfo_ARM_CPUList.get(i4);
                        if (aci3 != null) {
                            if (i4 < 4) {
                                aci3.part = ARM_PART_A7;
                            } else {
                                aci3.part = ARM_PART_A15;
                            }
                        }
                    }
                }
                boolean exynos7420 = sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("SAMSUNG Exynos7420");
                boolean snap810 = sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Qualcomm Technologies, Inc MSM8994");
                if ((exynos7420 || snap810) && sysinfo.CPUInfo_ARM_CPUList.size() == 8) {
                    for (int i5 = 0; i5 < sysinfo.CPUInfo_ARM_CPUList.size(); i5++) {
                        SysInfoSingleTon.ARMCPUInfo aci4 = sysinfo.CPUInfo_ARM_CPUList.get(i5);
                        if (aci4 != null) {
                            if (i5 < 4) {
                                aci4.part = ARM_PART_A53;
                            } else {
                                aci4.part = ARM_PART_A57;
                            }
                        }
                    }
                }
                if (sysinfo.CPUInfo_ARM_CPUInfo.hardware.equals("Qualcomm Technologies, Inc MSM8992") && sysinfo.CPUInfo_ARM_CPUList.size() == 6) {
                    for (int i6 = 0; i6 < sysinfo.CPUInfo_ARM_CPUList.size(); i6++) {
                        SysInfoSingleTon.ARMCPUInfo aci5 = sysinfo.CPUInfo_ARM_CPUList.get(i6);
                        if (aci5 != null) {
                            if (i6 < 4) {
                                aci5.part = ARM_PART_A53;
                            } else {
                                aci5.part = ARM_PART_A57;
                            }
                        }
                    }
                }
               /* Log.d("detectCPUInfo", "ARM_ChipName = *" + sysinfo.CPUInfo_ARM_CPUInfo.chipName + "*");
                Log.d("detectCPUInfo", "ARM_Hardware = *" + sysinfo.CPUInfo_ARM_CPUInfo.hardware + "*");
                Log.d("detectCPUInfo", "ARM_MSMHardware = *" + sysinfo.CPUInfo_ARM_CPUInfo.msmHardware + "*");
                Log.d("detectCPUInfo", "ARM_Implementer = " + sysinfo.CPUInfo_ARM_CPUInfo.impl);
                Log.d("detectCPUInfo", "ARM_Architecture = *" + sysinfo.CPUInfo_ARM_CPUInfo.arch + "*");
                Log.d("detectCPUInfo", "ARM_Variant = " + sysinfo.CPUInfo_ARM_CPUInfo.variant);
                Log.d("detectCPUInfo", "ARM_Part = " + sysinfo.CPUInfo_ARM_CPUInfo.part);
                Log.d("detectCPUInfo", "ARM_Revision = " + sysinfo.CPUInfo_ARM_CPUInfo.rev);
                Log.d("detectCPUInfo", "ARM_CoreCount = " + sysinfo.CPUInfo_ARM_CoreCount);
                Log.d("detectCPUInfo", "ARM_CPUList.size = " + sysinfo.CPUInfo_ARM_CPUList.size());*/
                int i7 = 0;
                for (SysInfoSingleTon.ARMCPUInfo aci6 : sysinfo.CPUInfo_ARM_CPUList) {
                    /*Log.d("detectCPUInfo", "CPU #" + i7 + " / ARM_Implementer = " + aci6.impl);
                    Log.d("detectCPUInfo", "CPU #" + i7 + " / ARM_Architecture = *" + aci6.arch + "*");
                    Log.d("detectCPUInfo", "CPU #" + i7 + " / ARM_Variant = " + aci6.variant);
                    Log.d("detectCPUInfo", "CPU #" + i7 + " / ARM_Part = " + aci6.part);
                    Log.d("detectCPUInfo", "CPU #" + i7 + " / ARM_Revision = " + aci6.rev);*/
                    i7++;
                }
            } catch (IOException e) {
            }
        }
    }

    private static void detectCPUInfo_proc_cpuinfo_x86() {
        int procnum;
        File cpuinfo = new File("/proc/cpuinfo");
        if (cpuinfo != null && cpuinfo.exists()) {
            try {
                SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
                BufferedReader br = new BufferedReader(new FileReader(cpuinfo));
                if (br != null) {
                    sysinfo.CPUInfo_x86_LogicalCPUs = 0;
                    while (true) {
                        String aLine = br.readLine();
                        if (aLine == null) {
                            break;
                        }
                        String value = valueForKey(aLine, "vendor_id");
                        if (value != null) {
                            sysinfo.CPUInfo_x86_VendorID = value.trim();
                        }
                        String value2 = valueForKey(aLine, "model name");
                        if (value2 != null) {
                            sysinfo.CPUInfo_x86_ModelName = value2.trim();
                        }
                        String value3 = valueForKey(aLine, "cpu family");
                        if (value3 != null) {
                            sysinfo.CPUInfo_x86_Family = strHexOrDecToInt(value3);
                        }
                        String value4 = valueForKey(aLine, "model");
                        if (value4 != null) {
                            sysinfo.CPUInfo_x86_Model = strHexOrDecToInt(value4);
                        }
                        String value5 = valueForKey(aLine, "stepping");
                        if (value5 != null) {
                            sysinfo.CPUInfo_x86_Stepping = strHexOrDecToInt(value5);
                        }
                        String value6 = valueForKey(aLine, "processor");
                        if (value6 != null && (procnum = strHexOrDecToInt(value6) + 1) > sysinfo.CPUInfo_x86_LogicalCPUs) {
                            sysinfo.CPUInfo_x86_LogicalCPUs = procnum;
                        }
                        String value7 = valueForKey(aLine, "cpu cores");
                        if (value7 != null) {
                            sysinfo.CPUInfo_x86_CoreCount = strHexOrDecToInt(value7);
                        }
                    }
                    br.close();
                }
                if (sysinfo.CPUInfo_x86_VendorID.equals("AuthenticAMD")) {
                    sysinfo.CPUInfo_isX86_AMD = true;
                } else if (sysinfo.CPUInfo_x86_VendorID.equals("GenuineIntel")) {
                    sysinfo.CPUInfo_isX86_Intel = true;
                } else if (sysinfo.CPUInfo_x86_VendorID.equals("CentaurHauls")) {
                    sysinfo.CPUInfo_isX86_VIA = true;
                }
                if (sysinfo.CPUInfo_x86_Family >= 0 && sysinfo.CPUInfo_x86_Model >= 0 && sysinfo.CPUInfo_x86_Stepping >= 0) {
                    sysinfo.CPUInfo_x86_CPUIDRev = ((sysinfo.CPUInfo_x86_Family & 255) << 8) | ((sysinfo.CPUInfo_x86_Model & 240) << 12) | ((sysinfo.CPUInfo_x86_Model & 15) << 4) | (sysinfo.CPUInfo_x86_Stepping & 15);
                }
                while (sysinfo.CPUInfo_x86_ModelName.contains("  ")) {
                    sysinfo.CPUInfo_x86_ModelName = sysinfo.CPUInfo_x86_ModelName.replace("  ", " ");
                }
                /*Log.d("detectCPUInfo", "isX86_AMD = *" + sysinfo.CPUInfo_isX86_AMD + "*");
                Log.d("detectCPUInfo", "isX86_Intel = *" + sysinfo.CPUInfo_isX86_Intel + "*");
                Log.d("detectCPUInfo", "isX86_VIA = *" + sysinfo.CPUInfo_isX86_VIA + "*");
                Log.d("detectCPUInfo", "x86_VendorID = *" + sysinfo.CPUInfo_x86_VendorID + "*");
                Log.d("detectCPUInfo", "x86_ModelName = *" + sysinfo.CPUInfo_x86_ModelName + "*");
                Log.d("detectCPUInfo", "x86_Family = " + sysinfo.CPUInfo_x86_Family);
                Log.d("detectCPUInfo", "x86_Model = " + sysinfo.CPUInfo_x86_Model);
                Log.d("detectCPUInfo", "x86_Stepping = " + sysinfo.CPUInfo_x86_Stepping);
                Log.d("detectCPUInfo", "x86_CPUIDRev = " + String.format("%08Xh", Integer.valueOf(sysinfo.CPUInfo_x86_CPUIDRev)));
                Log.d("detectCPUInfo", "x86_LogicalCPUs = " + sysinfo.CPUInfo_x86_LogicalCPUs);
                Log.d("detectCPUInfo", "x86_CoreCount = " + sysinfo.CPUInfo_x86_CoreCount);*/
            } catch (IOException e) {
            }
        }
    }

    public static void detectInitCPUInfo() {
        String arch;
        boolean z;
        boolean z2 = false;
        SysInfoSingleTon sysinfo = SysInfoSingleTon.getInstance();
        String arch2 = System.getProperty("os.arch");
        if (arch2 != null) {
            arch = arch2.toUpperCase();
        } else {
            arch = "";
        }
        String abi = Build.CPU_ABI.toUpperCase();
        if (arch.equals("AARCH64") || arch.startsWith(MANUF_ARM) || abi.startsWith(MANUF_ARM)) {
            z = true;
        } else {
            z = false;
        }
        sysinfo.CPUInfo_isARM = z;
        if (arch.equals("I686") || arch.equals("X86_64") || abi.startsWith("X86")) {
            z2 = true;
        }
        sysinfo.CPUInfo_isX86 = z2;
        if (sysinfo.CPUInfo_isARM) {
            detectCPUInfo_proc_cpuinfo_ARM();
        } else if (sysinfo.CPUInfo_isX86) {
            detectCPUInfo_proc_cpuinfo_x86();
        }
    }


    private static String cpuidDWordToStr(int reg) {
        byte[] b = {(byte) (reg & 255), (byte) ((reg >> 8) & 255), (byte) ((reg >> 16) & 255), (byte) ((reg >> 24) & 255)};
        if (b[0] < 32) {
            b[0] = 32;
        }
        if (b[1] < 32) {
            b[1] = 32;
        }
        if (b[2] < 32) {
            b[2] = 32;
        }
        if (b[3] < 32) {
            b[3] = 32;
        }
        String res = "";
        try {
            res = new String(b, "US-ASCII");
        } catch (UnsupportedEncodingException e) {
        }
        return res.trim();
    }


    static class OpenCLInfoClass {
        int addrSpaceSize = 0;
        String builtInKernels;
        int clockRate = 0;
        int computeUnits = 0;
        String devExtensions;
        String devName;
        String devProfile;
        long devType = 0;
        int devVenID = 0;
        String devVendor;
        String devVersion;
        String drvVersion;
        int globalMemCacheLineSize = 0;
        long globalMemCacheSize = 0;
        String globalMemCacheType;
        long globalMemSize = 0;
        int imageBaseAddressAlignment = 0;
        int imageRowPitchAlignment = 0;
        boolean isCommandQueueOOOExecEnabled = false;
        boolean isCommandQueueProfilingEnabled = false;
        boolean isCompilerAvailable = false;
        boolean isErrorCorrSupported = false;
        boolean isImagesSupported = false;
        boolean isKernelExecSupported = false;
        boolean isLinkerAvailable = false;
        boolean isLittleEndianDev = false;
        boolean isLocalMemDedicated = false;
        boolean isNativeKernelExecSupported = false;
        boolean isSVMAtomicsSupported = false;
        boolean isSVMCoarseGrainBufferSupported = false;
        boolean isSVMFineGrainBufferSupported = false;
        boolean isSVMFineGrainSystemSupported = false;
        boolean isUnifiedMem = false;
        long localMemSize = 0;
        long max2DImageHeight = 0;
        long max2DImageWidth = 0;
        long max3DImageDepth = 0;
        long max3DImageHeight = 0;
        long max3DImageWidth = 0;
        long maxArgSize = 0;
        int maxConstArgs = 0;
        long maxConstBufferSize = 0;
        long maxGlobalVarSize = 0;
        long maxImgArraySize = 0;
        long maxImgBufferSize = 0;
        long maxMemObjAllocSize = 0;
        int maxPipeArgs = 0;
        long maxPrintfBufferSize = 0;
        long maxSamplers = 0;
        long maxWorkGroupSize = 0;
        int maxWorkItemDim = 0;
        long[] maxWorkItemSizes = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        int memBaseAddrAlign = 0;
        int minDataTypeAlign = 0;
        int nativeVecWidChar = 0;
        int nativeVecWidDouble = 0;
        int nativeVecWidFloat = 0;
        int nativeVecWidHalf = 0;
        int nativeVecWidInt = 0;
        int nativeVecWidLong = 0;
        int nativeVecWidShort = 0;
        String oclCVersion;
        String oclLib;
        int prefGlobalAtomicAlign = 0;
        long prefGlobalVarsTotalSize = 0;
        int prefLocalAtomicAlign = 0;
        int prefPlatformAtomicAlign = 0;
        int prefVecWidChar = 0;
        int prefVecWidDouble = 0;
        int prefVecWidFloat = 0;
        int prefVecWidHalf = 0;
        int prefVecWidInt = 0;
        int prefVecWidLong = 0;
        int prefVecWidShort = 0;
        long profTimerRes = 0;
        String spirVersions;

        OpenCLInfoClass() {
        }
    }

    public static OpenCLInfoClass detectOpenCLInfo(int plat, int dev) {
        boolean oclLibLoaded = false;
        try {
            System.loadLibrary("aida_opencl");
            oclLibLoaded = true;
        } catch (UnsatisfiedLinkError e) {
            Log.e("detectOpenCLInfo", "Cannot load library: aida_opencl");
        }
        if (!oclLibLoaded) {
            return null;
        }
        OpenCLInfoClass mOCLInfo = new OpenCLInfoClass();
        if (getOCLInfo(plat, dev, mOCLInfo) == 0) {
            return null;
        }
        return mOCLInfo;
    }

    static class CUDAInfoClass {
        int asyncEngines = 0;
        int clockRate = 0;
        int computeCapMaj = 0;
        int computeCapMin = 0;
        int computeMode = -1;
        String cudaLib;
        String devName;
        int globalMemBusWidth = 0;
        boolean is32BitFPAtomicAddSupported = false;
        boolean is32BitIntAtomicOpsSupported = false;
        boolean is64BitIntAtomicOpsSupported = false;
        boolean isCachingGlobalsInL1Supported = false;
        boolean isCachingLocalsInL1Supported = false;
        boolean isConcurrentCopyExecSupported = false;
        boolean isConcurrentKernelExecSupported = false;
        boolean isDoublePrecFPSupported = false;
        boolean isECCEnabled = false;
        boolean isFunnelShiftSupported = false;
        boolean isHostMemMappingSupported = false;
        boolean isIntegDev = false;
        boolean isManagedMemSupported = false;
        boolean isMultiGPUBoard = false;
        boolean isStreamPrioritiesSupported = false;
        boolean isSurfaceFunctionsSupported = false;
        boolean isTCCDriver = false;
        boolean isUnifiedAddr = false;
        boolean isWarpVoteFuncsSupported = false;
        boolean is__ballotSupported = false;
        boolean is__syncthreads_andSupported = false;
        boolean is__syncthreads_countSupported = false;
        boolean is__syncthreads_orSupported = false;
        boolean is__threadfence_systemSupported = false;
        int l2CacheSize = 0;
        int max1DLayeredSurfaceLayers = 0;
        int max1DLayeredSurfaceWidth = 0;
        int max1DLayeredTextureLayers = 0;
        int max1DLayeredTextureWidth = 0;
        int max1DLinearTextureWidth = 0;
        int max1DSurfaceWidth = 0;
        int max1DTextureWidth = 0;
        int max2DLayeredSurfaceHeight = 0;
        int max2DLayeredSurfaceLayers = 0;
        int max2DLayeredSurfaceWidth = 0;
        int max2DLinearTextureHeight = 0;
        int max2DLinearTexturePitch = 0;
        int max2DLinearTextureWidth = 0;
        int max2DSurfaceHeight = 0;
        int max2DSurfaceWidth = 0;
        int max2DTextureHeight = 0;
        int max2DTextureWidth = 0;
        int max32BitRegPerMP = 0;
        int max3DSurfaceDepth = 0;
        int max3DSurfaceHeight = 0;
        int max3DSurfaceWidth = 0;
        int max3DTextureDepth = 0;
        int max3DTextureHeight = 0;
        int max3DTextureWidth = 0;
        int maxBlockSize_X = 0;
        int maxBlockSize_Y = 0;
        int maxBlockSize_Z = 0;
        int maxCubemapLayeredTextureLayers = 0;
        int maxCubemapLayeredTextureWidthHeight = 0;
        int maxCubemapTextureWidthHeight = 0;
        int maxGridSize_X = 0;
        int maxGridSize_Y = 0;
        int maxGridSize_Z = 0;
        int maxMemPitch = 0;
        int maxMillionInstrPerKernel = 0;
        int maxMipmapped1DTextureWidth = 0;
        int maxMipmapped2DTextureHeight = 0;
        int maxMipmapped2DTextureWidth = 0;
        int maxRegsPerBlock = 0;
        int maxSharedMemPerBlock = 0;
        int maxSharedMemPerMP = 0;
        int maxTextureArrayHeight = 0;
        int maxTextureArraySlices = 0;
        int maxTextureArrayWidth = 0;
        int maxThreadsPerBlock = 0;
        int maxThreadsPerMP = 0;
        int memClockRate = 0;
        int mpCount = 0;
        int pciBusID = 0;
        int pciDevID = 0;
        int pciDomainID = 0;
        boolean pciDomainIDValid = false;
        boolean pciIDValid = false;
        int surfaceAlignment = 0;
        int textureAlign = 0;
        int texturePitchAlignment = 0;
        int totalConstantMemory = 0;
        long totalMem = 0;
        int warpSize = 0;

        CUDAInfoClass() {
        }
    }

    public static CUDAInfoClass detectCUDAInfo(int dev) {
        boolean cudaLibLoaded = false;
        try {
            System.loadLibrary("aida_cuda");
            cudaLibLoaded = true;
        } catch (UnsatisfiedLinkError e) {
            Log.e("detectCUDAInfo", "Cannot load library: aida_cuda");
        }
        if (!cudaLibLoaded) {
            return null;
        }
        CUDAInfoClass mCUDAInfo = new CUDAInfoClass();
        if (getCUDAInfo(dev, mCUDAInfo) == 0) {
            return null;
        }
        return mCUDAInfo;
    }

    public static int nVIDIACoresPerSMByCC(int ccMaj, int ccMin) {
        if (ccMaj < 2) {
            return 8;
        }
        if (ccMaj == 5 && (ccMin == 0 || ccMin == 2)) {
            return 128;
        }
        if (ccMaj == 3 && (ccMin == 0 || ccMin == 2 || ccMin == 5)) {
            return DEVMANUF_ZUK;
        }
        if (ccMaj == 2 && ccMin == 0) {
            return 32;
        }
        if (ccMaj == 2 && ccMin == 1) {
            return 48;
        }
        return 0;
    }

    public static boolean isRunningOnWatchDevice(Context c) {
        UiModeManager uiModeManager;
        return Build.VERSION.SDK_INT >= 8 && c != null && (uiModeManager = (UiModeManager) c.getSystemService("uimode")) != null && uiModeManager.getCurrentModeType() == 6;
    }

    public static boolean isRunningOnTvDevice(Context c) {
        UiModeManager uiModeManager;
        return Build.VERSION.SDK_INT >= 8 && c != null && (uiModeManager = (UiModeManager) c.getSystemService("uimode")) != null && uiModeManager.getCurrentModeType() == 4;
    }

    public static Locale getAndroidLocale(Context c) {
        Resources res;
        Configuration config;
        PackageManager pkgMgr = c.getPackageManager();
        if (pkgMgr != null) {
            try {
                res = pkgMgr.getResourcesForApplication("android");
            } catch (PackageManager.NameNotFoundException e) {
                res = null;
            }
            if (!(res == null || (config = res.getConfiguration()) == null)) {
                return config.locale;
            }
        }
        return Locale.getDefault();
    }

    public static ScreenInfo get2ndScreenInfo() {
        if (build_Manufacturer().toUpperCase().startsWith("YOTA ")) {
            String mdl = Build.MODEL.trim().toUpperCase();
            if (mdl.equals("C9660")) {
                return new ScreenInfo(360, 640, 54, 96, 4.3f, DEVMANUF_TREKSTOR);
            }
            if (mdl.equals("YD201")) {
                return new ScreenInfo(540, 960, 58, 104, 4.7f, 235);
            }
        }
        return null;
    }

    public static int[] screenResolutionWorkarounds(int widthPx, int heightPx) {
        int[] res = {widthPx, heightPx};
        if (widthPx == 800 && heightPx == 800 && Build.BOARD.startsWith("SQN100-")) {
            res[1] = 720;
            res[0] = 720;
        }
        return res;
    }

    public static float[] screenDpiWorkarounds(float dpiX, float dpiY) {
        float[] res = {dpiX, dpiY};
        int devManuf = getDevManufacturer();
        String dev = Build.DEVICE.trim().toUpperCase();
        String mdl = getStrippedBuildModel(devManuf);
        switch (devManuf) {
            case 2:
                if (mdl.equals("ZETA") && dpiX < 242.0f && dpiY < 242.0f) {
                    res[1] = 244.77f;
                    res[0] = 244.77f;
                    break;
                }
            case 3:
                if (mdl.equals("K5 OCTA") && dpiX > 450.0f && dpiY > 450.0f) {
                    res[1] = 440.58f;
                    res[0] = 440.58f;
                    break;
                }
            case 7:
                if (mdl.equals("K012")) {
                    res[1] = 170.0f;
                    res[0] = 170.0f;
                    break;
                }
                break;
            case 10:
                if (mdl.equals("STUDIO ENERGY") && dpiX > 300.0f && dpiY > 300.0f) {
                    res[1] = 294.0f;
                    res[0] = 294.0f;
                    break;
                }
            case 13:
                if (!mdl.equals("GT99") || dpiX >= 322.0f || dpiY >= 322.0f) {
                    if (mdl.equals("S200") && dpiX > 300.0f && dpiY > 300.0f) {
                        res[1] = 294.0f;
                        res[0] = 294.0f;
                        break;
                    }
                } else {
                    res[1] = 326.0f;
                    res[0] = 326.0f;
                    break;
                }
                break;
            case 15:
                if (!mdl.equals("IQ442 QUAD") || dpiX >= 220.0f || dpiY >= 220.0f) {
                    if ((mdl.equals("IQ446") || mdl.equals("IQ446 MAGIC")) && dpiX < 242.0f && dpiY < 242.0f) {
                        res[1] = 244.8f;
                        res[0] = 244.8f;
                        break;
                    }
                } else {
                    res[1] = 233.0f;
                    res[0] = 233.0f;
                    break;
                }
                break;
            case 20:
                if (!mdl.equals("DESIRE 310") || dpiX <= 220.0f || dpiY <= 220.0f) {
                    if (!mdl.equals("ONE X") || dpiX >= 300.0f || dpiY >= 300.0f) {
                        if (mdl.equals("SENSATION") && dpiX < 240.0f && dpiY < 240.0f) {
                            res[1] = 256.15f;
                            res[0] = 256.15f;
                            break;
                        }
                    } else {
                        res[1] = 312.47f;
                        res[0] = 312.47f;
                        break;
                    }
                } else {
                    res[1] = 217.7f;
                    res[0] = 217.7f;
                    break;
                }
                break;
            case 21:
                if ((!mdl.equals("S8-701L") && !mdl.equals("S8-701U") && !mdl.equals("S8-701W") && !mdl.equals("MEDIAPAD T1 8.0")) || dpiX >= 180.0f || dpiY >= 180.0f) {
                    if (mdl.equals("U9200") && (dpiX < 250.0f || dpiY > 250.0f)) {
                        res[1] = 256.15f;
                        res[0] = 256.15f;
                        break;
                    }
                } else {
                    res[1] = 188.68f;
                    res[0] = 188.68f;
                    break;
                }
                break;
            case 24:
                if ((mdl.equals("G3") || mdl.equals("G3C")) && dpiX < 325.0f && dpiY < 325.0f) {
                    res[1] = 326.0f;
                    res[0] = 326.0f;
                    break;
                }
            case 29:
                if ((!mdl.equals("B8000-F") && !mdl.equals("B8000-H") && !mdl.equals("B8000-HV")) || dpiX <= 150.0f || dpiY <= 150.0f) {
                    if (!mdl.equals("K910") || dpiX >= 390.0f || dpiY >= 390.0f) {
                        if (!mdl.equals("K920") || dpiX >= 480.0f || dpiY >= 480.0f) {
                            if (mdl.equals("S920") && dpiX > 290.0f && dpiY > 290.0f) {
                                res[1] = 277.1f;
                                res[0] = 277.1f;
                                break;
                            }
                        } else {
                            res[1] = 489.53f;
                            res[0] = 489.53f;
                            break;
                        }
                    } else {
                        res[1] = 400.53f;
                        res[0] = 400.53f;
                        break;
                    }
                } else {
                    res[1] = 149.45f;
                    res[0] = 149.45f;
                    break;
                }
                break;
            case 30:
                if (!isLGG2() || dpiX <= 430.0f || dpiY <= 430.0f) {
                    if (!mdl.equals("NEXUS 4")) {
                        if (!mdl.equals("NEXUS 5")) {
                            if (mdl.equals("MS500") && dpiX > 250.0f && dpiY > 250.0f) {
                                res[1] = 244.77f;
                                res[0] = 244.77f;
                                break;
                            }
                        } else {
                            res[1] = 445.03f;
                            res[0] = 445.03f;
                            break;
                        }
                    } else {
                        res[1] = 317.6f;
                        res[0] = 317.6f;
                        break;
                    }
                } else {
                    res[1] = 423.64f;
                    res[0] = 423.64f;
                    break;
                }
                break;
            case 31:
                if (mdl.equals("MX4") && dpiX > 430.0f && dpiY > 430.0f) {
                    res[1] = 417.74f;
                    res[0] = 417.74f;
                    break;
                }
            case 36:
                if (mdl.equals("MI 4") && dpiX > 300.0f && dpiY > 300.0f) {
                    res[1] = 293.72f;
                    res[0] = 293.72f;
                    break;
                }
            case 43:
                if (mdl.equals("W7555") && dpiX < 230.0f && dpiY < 230.0f) {
                    res[1] = 244.77f;
                    res[0] = 244.77f;
                    break;
                }
            case 45:
                if ((!mdl.equals("GT-I9190") && !mdl.equals("GT-I9192") && !mdl.equals("GT-I9195")) || dpiX >= 250.0f || dpiY >= 250.0f) {
                    if ((!mdl.equals("GT-P6200") && !mdl.equals("GT-P6210")) || dpiX >= 165.0f || dpiY >= 165.0f) {
                        if ((!mdl.equals("GT-S6500") && !mdl.equals("GT-S6500D")) || dpiX >= 165.0f || dpiY >= 165.0f) {
                            if (!mdl.equals("SM-G355H") || dpiX <= 210.0f || dpiY <= 210.0f) {
                                if ((mdl.startsWith("SM-G900") || mdl.startsWith("SM-G901")) && dpiX < 430.0f && dpiY < 430.0f) {
                                    res[1] = 431.94f;
                                    res[0] = 431.94f;
                                    break;
                                }
                            } else {
                                res[1] = 207.32f;
                                res[0] = 207.32f;
                                break;
                            }
                        } else {
                            res[1] = 176.42f;
                            res[0] = 176.42f;
                            break;
                        }
                    } else {
                        res[1] = 169.55f;
                        res[0] = 169.55f;
                        break;
                    }
                } else {
                    res[1] = 256.15f;
                    res[0] = 256.15f;
                    break;
                }
                break;
            case 47:
            case 48:
                if ((!mdl.equals("C1904") && !mdl.equals("C1905") && !mdl.equals("C2004") && !mdl.equals("C2005")) || dpiX >= 230.0f || dpiY >= 230.0f) {
                    if ((mdl.equals("E15A") || mdl.equals("E15I")) && dpiX < 190.0f && dpiY < 190.0f) {
                        res[1] = 192.3f;
                        res[0] = 192.3f;
                        break;
                    }
                } else {
                    res[1] = 244.91f;
                    res[0] = 244.91f;
                    break;
                }
                break;
            case 50:
                if (mdl.equals("W8") && dpiX > 300.0f && dpiY > 300.0f) {
                    res[1] = 293.72f;
                    res[0] = 293.72f;
                    break;
                }
            case 55:
                if ((!dev.equals("HM2013023") && !mdl.equals("HM 1SW")) || dpiX >= 300.0f || dpiY >= 300.0f) {
                    if (mdl.equals("MI 3W") && dpiX > 445.0f && dpiY > 445.0f) {
                        res[1] = 440.58f;
                        res[0] = 440.58f;
                        break;
                    }
                } else {
                    res[1] = 312.47f;
                    res[0] = 312.47f;
                    break;
                }
                break;
            case 59:
                if (!mdl.equals("BLADE S6") || dpiX >= 280.0f || dpiY >= 280.0f) {
                    if (mdl.equals("NX505J") && dpiX < 390.0f && dpiY < 390.0f) {
                        res[1] = 400.53f;
                        res[0] = 400.53f;
                        break;
                    }
                } else {
                    res[1] = 293.72f;
                    res[0] = 293.72f;
                    break;
                }
                break;
            case 61:
                if (mdl.equals("SMARTPHONE 5005 NFC") && dpiX > 300.0f && dpiY > 300.0f) {
                    res[1] = 294.0f;
                    res[0] = 294.0f;
                    break;
                }
            case 62:
                if (!mdl.equals("6036Y") || dpiX >= 230.0f || dpiY >= 230.0f) {
                    if ((mdl.equals("6050F") || mdl.equals("6050Y")) && dpiX < 280.0f && dpiY < 280.0f) {
                        res[1] = 294.0f;
                        res[0] = 294.0f;
                        break;
                    }
                } else {
                    res[1] = 245.0f;
                    res[0] = 245.0f;
                    break;
                }
                break;
            case 65:
                if (mdl.equals("P9") && dpiX < 220.0f && dpiY < 220.0f) {
                    res[1] = 224.17f;
                    res[0] = 224.17f;
                    break;
                }
            case 69:
                if (mdl.equals("PAPILIO_G3") && dpiX > 315.0f && dpiY > 315.0f) {
                    res[1] = 312.47f;
                    res[0] = 312.47f;
                    break;
                }
            case 70:
                if ((mdl.equals("ELEGANCE 8 BY ZANETTI") || mdl.equals("ELEGANCE 8 3G BY ZANETTI")) && dpiX < 161.0f && dpiY < 161.0f) {
                    res[1] = 163.06f;
                    res[0] = 163.06f;
                    break;
                }
            case 73:
                if (mdl.equals("S5 QUAD CORE") && dpiX > 230.0f && dpiY > 230.0f) {
                    res[1] = 220.0f;
                    res[0] = 220.0f;
                    break;
                }
            case 75:
                if (mdl.equals("MOBI 7 LTE") && dpiX < 200.0f && dpiY < 200.0f) {
                    res[1] = 209.8f;
                    res[0] = 209.8f;
                    break;
                }
            case 76:
                if (mdl.equals("IXION XL 5") && dpiX > 445.0f && dpiY > 445.0f) {
                    res[1] = 440.58f;
                    res[0] = 440.58f;
                    break;
                }
        }
        return res;
    }
}